
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model Setting
 * 
 */
export type Setting = $Result.DefaultSelection<Prisma.$SettingPayload>
/**
 * Model PreOrder
 * 
 */
export type PreOrder = $Result.DefaultSelection<Prisma.$PreOrderPayload>
/**
 * Model OrderItem
 * 
 */
export type OrderItem = $Result.DefaultSelection<Prisma.$OrderItemPayload>
/**
 * Model Consolidation
 * 
 */
export type Consolidation = $Result.DefaultSelection<Prisma.$ConsolidationPayload>
/**
 * Model PreorderSession
 * 
 */
export type PreorderSession = $Result.DefaultSelection<Prisma.$PreorderSessionPayload>
/**
 * Model TableSaleSession
 * 
 */
export type TableSaleSession = $Result.DefaultSelection<Prisma.$TableSaleSessionPayload>
/**
 * Model MySession
 * 
 */
export type MySession = $Result.DefaultSelection<Prisma.$MySessionPayload>
/**
 * Model MiniStoreSession
 * 
 */
export type MiniStoreSession = $Result.DefaultSelection<Prisma.$MiniStoreSessionPayload>
/**
 * Model MainStoreSession
 * 
 */
export type MainStoreSession = $Result.DefaultSelection<Prisma.$MainStoreSessionPayload>
/**
 * Model Book
 * 
 */
export type Book = $Result.DefaultSelection<Prisma.$BookPayload>
/**
 * Model BookSale
 * 
 */
export type BookSale = $Result.DefaultSelection<Prisma.$BookSalePayload>
/**
 * Model BookSaleItem
 * 
 */
export type BookSaleItem = $Result.DefaultSelection<Prisma.$BookSaleItemPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.setting`: Exposes CRUD operations for the **Setting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.setting.findMany()
    * ```
    */
  get setting(): Prisma.SettingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.preOrder`: Exposes CRUD operations for the **PreOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PreOrders
    * const preOrders = await prisma.preOrder.findMany()
    * ```
    */
  get preOrder(): Prisma.PreOrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderItem`: Exposes CRUD operations for the **OrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItems
    * const orderItems = await prisma.orderItem.findMany()
    * ```
    */
  get orderItem(): Prisma.OrderItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.consolidation`: Exposes CRUD operations for the **Consolidation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consolidations
    * const consolidations = await prisma.consolidation.findMany()
    * ```
    */
  get consolidation(): Prisma.ConsolidationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.preorderSession`: Exposes CRUD operations for the **PreorderSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PreorderSessions
    * const preorderSessions = await prisma.preorderSession.findMany()
    * ```
    */
  get preorderSession(): Prisma.PreorderSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tableSaleSession`: Exposes CRUD operations for the **TableSaleSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TableSaleSessions
    * const tableSaleSessions = await prisma.tableSaleSession.findMany()
    * ```
    */
  get tableSaleSession(): Prisma.TableSaleSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mySession`: Exposes CRUD operations for the **MySession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MySessions
    * const mySessions = await prisma.mySession.findMany()
    * ```
    */
  get mySession(): Prisma.MySessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.miniStoreSession`: Exposes CRUD operations for the **MiniStoreSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MiniStoreSessions
    * const miniStoreSessions = await prisma.miniStoreSession.findMany()
    * ```
    */
  get miniStoreSession(): Prisma.MiniStoreSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mainStoreSession`: Exposes CRUD operations for the **MainStoreSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MainStoreSessions
    * const mainStoreSessions = await prisma.mainStoreSession.findMany()
    * ```
    */
  get mainStoreSession(): Prisma.MainStoreSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.book`: Exposes CRUD operations for the **Book** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Books
    * const books = await prisma.book.findMany()
    * ```
    */
  get book(): Prisma.BookDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bookSale`: Exposes CRUD operations for the **BookSale** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookSales
    * const bookSales = await prisma.bookSale.findMany()
    * ```
    */
  get bookSale(): Prisma.BookSaleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bookSaleItem`: Exposes CRUD operations for the **BookSaleItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookSaleItems
    * const bookSaleItems = await prisma.bookSaleItem.findMany()
    * ```
    */
  get bookSaleItem(): Prisma.BookSaleItemDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken',
    Setting: 'Setting',
    PreOrder: 'PreOrder',
    OrderItem: 'OrderItem',
    Consolidation: 'Consolidation',
    PreorderSession: 'PreorderSession',
    TableSaleSession: 'TableSaleSession',
    MySession: 'MySession',
    MiniStoreSession: 'MiniStoreSession',
    MainStoreSession: 'MainStoreSession',
    Book: 'Book',
    BookSale: 'BookSale',
    BookSaleItem: 'BookSaleItem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "account" | "session" | "verificationToken" | "setting" | "preOrder" | "orderItem" | "consolidation" | "preorderSession" | "tableSaleSession" | "mySession" | "miniStoreSession" | "mainStoreSession" | "book" | "bookSale" | "bookSaleItem"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Setting: {
        payload: Prisma.$SettingPayload<ExtArgs>
        fields: Prisma.SettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findFirst: {
            args: Prisma.SettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findMany: {
            args: Prisma.SettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          create: {
            args: Prisma.SettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          createMany: {
            args: Prisma.SettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          delete: {
            args: Prisma.SettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          update: {
            args: Prisma.SettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          deleteMany: {
            args: Prisma.SettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SettingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          upsert: {
            args: Prisma.SettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          aggregate: {
            args: Prisma.SettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSetting>
          }
          groupBy: {
            args: Prisma.SettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<SettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.SettingCountArgs<ExtArgs>
            result: $Utils.Optional<SettingCountAggregateOutputType> | number
          }
        }
      }
      PreOrder: {
        payload: Prisma.$PreOrderPayload<ExtArgs>
        fields: Prisma.PreOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PreOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PreOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreOrderPayload>
          }
          findFirst: {
            args: Prisma.PreOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PreOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreOrderPayload>
          }
          findMany: {
            args: Prisma.PreOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreOrderPayload>[]
          }
          create: {
            args: Prisma.PreOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreOrderPayload>
          }
          createMany: {
            args: Prisma.PreOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PreOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreOrderPayload>[]
          }
          delete: {
            args: Prisma.PreOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreOrderPayload>
          }
          update: {
            args: Prisma.PreOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreOrderPayload>
          }
          deleteMany: {
            args: Prisma.PreOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PreOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PreOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreOrderPayload>[]
          }
          upsert: {
            args: Prisma.PreOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreOrderPayload>
          }
          aggregate: {
            args: Prisma.PreOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePreOrder>
          }
          groupBy: {
            args: Prisma.PreOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<PreOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.PreOrderCountArgs<ExtArgs>
            result: $Utils.Optional<PreOrderCountAggregateOutputType> | number
          }
        }
      }
      OrderItem: {
        payload: Prisma.$OrderItemPayload<ExtArgs>
        fields: Prisma.OrderItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findFirst: {
            args: Prisma.OrderItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findMany: {
            args: Prisma.OrderItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          create: {
            args: Prisma.OrderItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          createMany: {
            args: Prisma.OrderItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          delete: {
            args: Prisma.OrderItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          update: {
            args: Prisma.OrderItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          deleteMany: {
            args: Prisma.OrderItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          upsert: {
            args: Prisma.OrderItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          aggregate: {
            args: Prisma.OrderItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderItem>
          }
          groupBy: {
            args: Prisma.OrderItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderItemCountArgs<ExtArgs>
            result: $Utils.Optional<OrderItemCountAggregateOutputType> | number
          }
        }
      }
      Consolidation: {
        payload: Prisma.$ConsolidationPayload<ExtArgs>
        fields: Prisma.ConsolidationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsolidationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsolidationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsolidationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsolidationPayload>
          }
          findFirst: {
            args: Prisma.ConsolidationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsolidationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsolidationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsolidationPayload>
          }
          findMany: {
            args: Prisma.ConsolidationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsolidationPayload>[]
          }
          create: {
            args: Prisma.ConsolidationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsolidationPayload>
          }
          createMany: {
            args: Prisma.ConsolidationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsolidationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsolidationPayload>[]
          }
          delete: {
            args: Prisma.ConsolidationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsolidationPayload>
          }
          update: {
            args: Prisma.ConsolidationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsolidationPayload>
          }
          deleteMany: {
            args: Prisma.ConsolidationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsolidationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConsolidationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsolidationPayload>[]
          }
          upsert: {
            args: Prisma.ConsolidationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsolidationPayload>
          }
          aggregate: {
            args: Prisma.ConsolidationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsolidation>
          }
          groupBy: {
            args: Prisma.ConsolidationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsolidationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsolidationCountArgs<ExtArgs>
            result: $Utils.Optional<ConsolidationCountAggregateOutputType> | number
          }
        }
      }
      PreorderSession: {
        payload: Prisma.$PreorderSessionPayload<ExtArgs>
        fields: Prisma.PreorderSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PreorderSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PreorderSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderSessionPayload>
          }
          findFirst: {
            args: Prisma.PreorderSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PreorderSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderSessionPayload>
          }
          findMany: {
            args: Prisma.PreorderSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderSessionPayload>[]
          }
          create: {
            args: Prisma.PreorderSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderSessionPayload>
          }
          createMany: {
            args: Prisma.PreorderSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PreorderSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderSessionPayload>[]
          }
          delete: {
            args: Prisma.PreorderSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderSessionPayload>
          }
          update: {
            args: Prisma.PreorderSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderSessionPayload>
          }
          deleteMany: {
            args: Prisma.PreorderSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PreorderSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PreorderSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderSessionPayload>[]
          }
          upsert: {
            args: Prisma.PreorderSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderSessionPayload>
          }
          aggregate: {
            args: Prisma.PreorderSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePreorderSession>
          }
          groupBy: {
            args: Prisma.PreorderSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PreorderSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PreorderSessionCountArgs<ExtArgs>
            result: $Utils.Optional<PreorderSessionCountAggregateOutputType> | number
          }
        }
      }
      TableSaleSession: {
        payload: Prisma.$TableSaleSessionPayload<ExtArgs>
        fields: Prisma.TableSaleSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TableSaleSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableSaleSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TableSaleSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableSaleSessionPayload>
          }
          findFirst: {
            args: Prisma.TableSaleSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableSaleSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TableSaleSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableSaleSessionPayload>
          }
          findMany: {
            args: Prisma.TableSaleSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableSaleSessionPayload>[]
          }
          create: {
            args: Prisma.TableSaleSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableSaleSessionPayload>
          }
          createMany: {
            args: Prisma.TableSaleSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TableSaleSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableSaleSessionPayload>[]
          }
          delete: {
            args: Prisma.TableSaleSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableSaleSessionPayload>
          }
          update: {
            args: Prisma.TableSaleSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableSaleSessionPayload>
          }
          deleteMany: {
            args: Prisma.TableSaleSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TableSaleSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TableSaleSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableSaleSessionPayload>[]
          }
          upsert: {
            args: Prisma.TableSaleSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableSaleSessionPayload>
          }
          aggregate: {
            args: Prisma.TableSaleSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTableSaleSession>
          }
          groupBy: {
            args: Prisma.TableSaleSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TableSaleSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TableSaleSessionCountArgs<ExtArgs>
            result: $Utils.Optional<TableSaleSessionCountAggregateOutputType> | number
          }
        }
      }
      MySession: {
        payload: Prisma.$MySessionPayload<ExtArgs>
        fields: Prisma.MySessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MySessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MySessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MySessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MySessionPayload>
          }
          findFirst: {
            args: Prisma.MySessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MySessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MySessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MySessionPayload>
          }
          findMany: {
            args: Prisma.MySessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MySessionPayload>[]
          }
          create: {
            args: Prisma.MySessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MySessionPayload>
          }
          createMany: {
            args: Prisma.MySessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MySessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MySessionPayload>[]
          }
          delete: {
            args: Prisma.MySessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MySessionPayload>
          }
          update: {
            args: Prisma.MySessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MySessionPayload>
          }
          deleteMany: {
            args: Prisma.MySessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MySessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MySessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MySessionPayload>[]
          }
          upsert: {
            args: Prisma.MySessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MySessionPayload>
          }
          aggregate: {
            args: Prisma.MySessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMySession>
          }
          groupBy: {
            args: Prisma.MySessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MySessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MySessionCountArgs<ExtArgs>
            result: $Utils.Optional<MySessionCountAggregateOutputType> | number
          }
        }
      }
      MiniStoreSession: {
        payload: Prisma.$MiniStoreSessionPayload<ExtArgs>
        fields: Prisma.MiniStoreSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MiniStoreSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MiniStoreSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MiniStoreSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MiniStoreSessionPayload>
          }
          findFirst: {
            args: Prisma.MiniStoreSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MiniStoreSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MiniStoreSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MiniStoreSessionPayload>
          }
          findMany: {
            args: Prisma.MiniStoreSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MiniStoreSessionPayload>[]
          }
          create: {
            args: Prisma.MiniStoreSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MiniStoreSessionPayload>
          }
          createMany: {
            args: Prisma.MiniStoreSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MiniStoreSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MiniStoreSessionPayload>[]
          }
          delete: {
            args: Prisma.MiniStoreSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MiniStoreSessionPayload>
          }
          update: {
            args: Prisma.MiniStoreSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MiniStoreSessionPayload>
          }
          deleteMany: {
            args: Prisma.MiniStoreSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MiniStoreSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MiniStoreSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MiniStoreSessionPayload>[]
          }
          upsert: {
            args: Prisma.MiniStoreSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MiniStoreSessionPayload>
          }
          aggregate: {
            args: Prisma.MiniStoreSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMiniStoreSession>
          }
          groupBy: {
            args: Prisma.MiniStoreSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MiniStoreSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MiniStoreSessionCountArgs<ExtArgs>
            result: $Utils.Optional<MiniStoreSessionCountAggregateOutputType> | number
          }
        }
      }
      MainStoreSession: {
        payload: Prisma.$MainStoreSessionPayload<ExtArgs>
        fields: Prisma.MainStoreSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MainStoreSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainStoreSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MainStoreSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainStoreSessionPayload>
          }
          findFirst: {
            args: Prisma.MainStoreSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainStoreSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MainStoreSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainStoreSessionPayload>
          }
          findMany: {
            args: Prisma.MainStoreSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainStoreSessionPayload>[]
          }
          create: {
            args: Prisma.MainStoreSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainStoreSessionPayload>
          }
          createMany: {
            args: Prisma.MainStoreSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MainStoreSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainStoreSessionPayload>[]
          }
          delete: {
            args: Prisma.MainStoreSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainStoreSessionPayload>
          }
          update: {
            args: Prisma.MainStoreSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainStoreSessionPayload>
          }
          deleteMany: {
            args: Prisma.MainStoreSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MainStoreSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MainStoreSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainStoreSessionPayload>[]
          }
          upsert: {
            args: Prisma.MainStoreSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MainStoreSessionPayload>
          }
          aggregate: {
            args: Prisma.MainStoreSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMainStoreSession>
          }
          groupBy: {
            args: Prisma.MainStoreSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MainStoreSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MainStoreSessionCountArgs<ExtArgs>
            result: $Utils.Optional<MainStoreSessionCountAggregateOutputType> | number
          }
        }
      }
      Book: {
        payload: Prisma.$BookPayload<ExtArgs>
        fields: Prisma.BookFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          findFirst: {
            args: Prisma.BookFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          findMany: {
            args: Prisma.BookFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>[]
          }
          create: {
            args: Prisma.BookCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          createMany: {
            args: Prisma.BookCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>[]
          }
          delete: {
            args: Prisma.BookDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          update: {
            args: Prisma.BookUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          deleteMany: {
            args: Prisma.BookDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>[]
          }
          upsert: {
            args: Prisma.BookUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          aggregate: {
            args: Prisma.BookAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBook>
          }
          groupBy: {
            args: Prisma.BookGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookCountArgs<ExtArgs>
            result: $Utils.Optional<BookCountAggregateOutputType> | number
          }
        }
      }
      BookSale: {
        payload: Prisma.$BookSalePayload<ExtArgs>
        fields: Prisma.BookSaleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookSaleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSalePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookSaleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSalePayload>
          }
          findFirst: {
            args: Prisma.BookSaleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSalePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookSaleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSalePayload>
          }
          findMany: {
            args: Prisma.BookSaleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSalePayload>[]
          }
          create: {
            args: Prisma.BookSaleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSalePayload>
          }
          createMany: {
            args: Prisma.BookSaleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookSaleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSalePayload>[]
          }
          delete: {
            args: Prisma.BookSaleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSalePayload>
          }
          update: {
            args: Prisma.BookSaleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSalePayload>
          }
          deleteMany: {
            args: Prisma.BookSaleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookSaleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookSaleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSalePayload>[]
          }
          upsert: {
            args: Prisma.BookSaleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSalePayload>
          }
          aggregate: {
            args: Prisma.BookSaleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookSale>
          }
          groupBy: {
            args: Prisma.BookSaleGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookSaleGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookSaleCountArgs<ExtArgs>
            result: $Utils.Optional<BookSaleCountAggregateOutputType> | number
          }
        }
      }
      BookSaleItem: {
        payload: Prisma.$BookSaleItemPayload<ExtArgs>
        fields: Prisma.BookSaleItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookSaleItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSaleItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookSaleItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSaleItemPayload>
          }
          findFirst: {
            args: Prisma.BookSaleItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSaleItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookSaleItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSaleItemPayload>
          }
          findMany: {
            args: Prisma.BookSaleItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSaleItemPayload>[]
          }
          create: {
            args: Prisma.BookSaleItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSaleItemPayload>
          }
          createMany: {
            args: Prisma.BookSaleItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookSaleItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSaleItemPayload>[]
          }
          delete: {
            args: Prisma.BookSaleItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSaleItemPayload>
          }
          update: {
            args: Prisma.BookSaleItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSaleItemPayload>
          }
          deleteMany: {
            args: Prisma.BookSaleItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookSaleItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookSaleItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSaleItemPayload>[]
          }
          upsert: {
            args: Prisma.BookSaleItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookSaleItemPayload>
          }
          aggregate: {
            args: Prisma.BookSaleItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookSaleItem>
          }
          groupBy: {
            args: Prisma.BookSaleItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookSaleItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookSaleItemCountArgs<ExtArgs>
            result: $Utils.Optional<BookSaleItemCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    account?: AccountOmit
    session?: SessionOmit
    verificationToken?: VerificationTokenOmit
    setting?: SettingOmit
    preOrder?: PreOrderOmit
    orderItem?: OrderItemOmit
    consolidation?: ConsolidationOmit
    preorderSession?: PreorderSessionOmit
    tableSaleSession?: TableSaleSessionOmit
    mySession?: MySessionOmit
    miniStoreSession?: MiniStoreSessionOmit
    mainStoreSession?: MainStoreSessionOmit
    book?: BookOmit
    bookSale?: BookSaleOmit
    bookSaleItem?: BookSaleItemOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    consolidations: number
    mySessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    consolidations?: boolean | UserCountOutputTypeCountConsolidationsArgs
    mySessions?: boolean | UserCountOutputTypeCountMySessionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConsolidationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsolidationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MySessionWhereInput
  }


  /**
   * Count Type PreOrderCountOutputType
   */

  export type PreOrderCountOutputType = {
    items: number
    consolidations: number
  }

  export type PreOrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | PreOrderCountOutputTypeCountItemsArgs
    consolidations?: boolean | PreOrderCountOutputTypeCountConsolidationsArgs
  }

  // Custom InputTypes
  /**
   * PreOrderCountOutputType without action
   */
  export type PreOrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreOrderCountOutputType
     */
    select?: PreOrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PreOrderCountOutputType without action
   */
  export type PreOrderCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }

  /**
   * PreOrderCountOutputType without action
   */
  export type PreOrderCountOutputTypeCountConsolidationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsolidationWhereInput
  }


  /**
   * Count Type ConsolidationCountOutputType
   */

  export type ConsolidationCountOutputType = {
    items: number
  }

  export type ConsolidationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | ConsolidationCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * ConsolidationCountOutputType without action
   */
  export type ConsolidationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsolidationCountOutputType
     */
    select?: ConsolidationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConsolidationCountOutputType without action
   */
  export type ConsolidationCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }


  /**
   * Count Type PreorderSessionCountOutputType
   */

  export type PreorderSessionCountOutputType = {
    mySessions: number
  }

  export type PreorderSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mySessions?: boolean | PreorderSessionCountOutputTypeCountMySessionsArgs
  }

  // Custom InputTypes
  /**
   * PreorderSessionCountOutputType without action
   */
  export type PreorderSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreorderSessionCountOutputType
     */
    select?: PreorderSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PreorderSessionCountOutputType without action
   */
  export type PreorderSessionCountOutputTypeCountMySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MySessionWhereInput
  }


  /**
   * Count Type TableSaleSessionCountOutputType
   */

  export type TableSaleSessionCountOutputType = {
    bookSales: number
    mySessions: number
  }

  export type TableSaleSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookSales?: boolean | TableSaleSessionCountOutputTypeCountBookSalesArgs
    mySessions?: boolean | TableSaleSessionCountOutputTypeCountMySessionsArgs
  }

  // Custom InputTypes
  /**
   * TableSaleSessionCountOutputType without action
   */
  export type TableSaleSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableSaleSessionCountOutputType
     */
    select?: TableSaleSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TableSaleSessionCountOutputType without action
   */
  export type TableSaleSessionCountOutputTypeCountBookSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookSaleWhereInput
  }

  /**
   * TableSaleSessionCountOutputType without action
   */
  export type TableSaleSessionCountOutputTypeCountMySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MySessionWhereInput
  }


  /**
   * Count Type MiniStoreSessionCountOutputType
   */

  export type MiniStoreSessionCountOutputType = {
    mySessions: number
  }

  export type MiniStoreSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mySessions?: boolean | MiniStoreSessionCountOutputTypeCountMySessionsArgs
  }

  // Custom InputTypes
  /**
   * MiniStoreSessionCountOutputType without action
   */
  export type MiniStoreSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MiniStoreSessionCountOutputType
     */
    select?: MiniStoreSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MiniStoreSessionCountOutputType without action
   */
  export type MiniStoreSessionCountOutputTypeCountMySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MySessionWhereInput
  }


  /**
   * Count Type MainStoreSessionCountOutputType
   */

  export type MainStoreSessionCountOutputType = {
    mySessions: number
  }

  export type MainStoreSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mySessions?: boolean | MainStoreSessionCountOutputTypeCountMySessionsArgs
  }

  // Custom InputTypes
  /**
   * MainStoreSessionCountOutputType without action
   */
  export type MainStoreSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainStoreSessionCountOutputType
     */
    select?: MainStoreSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MainStoreSessionCountOutputType without action
   */
  export type MainStoreSessionCountOutputTypeCountMySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MySessionWhereInput
  }


  /**
   * Count Type BookCountOutputType
   */

  export type BookCountOutputType = {
    sales: number
    preorders: number
  }

  export type BookCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sales?: boolean | BookCountOutputTypeCountSalesArgs
    preorders?: boolean | BookCountOutputTypeCountPreordersArgs
  }

  // Custom InputTypes
  /**
   * BookCountOutputType without action
   */
  export type BookCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookCountOutputType
     */
    select?: BookCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BookCountOutputType without action
   */
  export type BookCountOutputTypeCountSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookSaleItemWhereInput
  }

  /**
   * BookCountOutputType without action
   */
  export type BookCountOutputTypeCountPreordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }


  /**
   * Count Type BookSaleCountOutputType
   */

  export type BookSaleCountOutputType = {
    items: number
  }

  export type BookSaleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | BookSaleCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * BookSaleCountOutputType without action
   */
  export type BookSaleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSaleCountOutputType
     */
    select?: BookSaleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BookSaleCountOutputType without action
   */
  export type BookSaleCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookSaleItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    isAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    isAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    isAdmin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    isAdmin: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    consolidations?: boolean | User$consolidationsArgs<ExtArgs>
    mySessions?: boolean | User$mySessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "isAdmin" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    consolidations?: boolean | User$consolidationsArgs<ExtArgs>
    mySessions?: boolean | User$mySessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      consolidations: Prisma.$ConsolidationPayload<ExtArgs>[]
      mySessions: Prisma.$MySessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      isAdmin: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    consolidations<T extends User$consolidationsArgs<ExtArgs> = {}>(args?: Subset<T, User$consolidationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsolidationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mySessions<T extends User$mySessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$mySessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MySessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly isAdmin: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.consolidations
   */
  export type User$consolidationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consolidation
     */
    select?: ConsolidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consolidation
     */
    omit?: ConsolidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsolidationInclude<ExtArgs> | null
    where?: ConsolidationWhereInput
    orderBy?: ConsolidationOrderByWithRelationInput | ConsolidationOrderByWithRelationInput[]
    cursor?: ConsolidationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsolidationScalarFieldEnum | ConsolidationScalarFieldEnum[]
  }

  /**
   * User.mySessions
   */
  export type User$mySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionInclude<ExtArgs> | null
    where?: MySessionWhereInput
    orderBy?: MySessionOrderByWithRelationInput | MySessionOrderByWithRelationInput[]
    cursor?: MySessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MySessionScalarFieldEnum | MySessionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    createdAt: Date
    updatedAt: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionToken" | "userId" | "expires" | "createdAt" | "updatedAt", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"identifier" | "token" | "expires", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { identifier: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */ 
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Model Setting
   */

  export type AggregateSetting = {
    _count: SettingCountAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  export type SettingMinAggregateOutputType = {
    id: string | null
    currentSession: string | null
    adminPassword: string | null
  }

  export type SettingMaxAggregateOutputType = {
    id: string | null
    currentSession: string | null
    adminPassword: string | null
  }

  export type SettingCountAggregateOutputType = {
    id: number
    currentSession: number
    adminPassword: number
    mainStoreData: number
    _all: number
  }


  export type SettingMinAggregateInputType = {
    id?: true
    currentSession?: true
    adminPassword?: true
  }

  export type SettingMaxAggregateInputType = {
    id?: true
    currentSession?: true
    adminPassword?: true
  }

  export type SettingCountAggregateInputType = {
    id?: true
    currentSession?: true
    adminPassword?: true
    mainStoreData?: true
    _all?: true
  }

  export type SettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Setting to aggregate.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Settings
    **/
    _count?: true | SettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SettingMaxAggregateInputType
  }

  export type GetSettingAggregateType<T extends SettingAggregateArgs> = {
        [P in keyof T & keyof AggregateSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSetting[P]>
      : GetScalarType<T[P], AggregateSetting[P]>
  }




  export type SettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SettingWhereInput
    orderBy?: SettingOrderByWithAggregationInput | SettingOrderByWithAggregationInput[]
    by: SettingScalarFieldEnum[] | SettingScalarFieldEnum
    having?: SettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SettingCountAggregateInputType | true
    _min?: SettingMinAggregateInputType
    _max?: SettingMaxAggregateInputType
  }

  export type SettingGroupByOutputType = {
    id: string
    currentSession: string | null
    adminPassword: string | null
    mainStoreData: JsonValue | null
    _count: SettingCountAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  type GetSettingGroupByPayload<T extends SettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SettingGroupByOutputType[P]>
            : GetScalarType<T[P], SettingGroupByOutputType[P]>
        }
      >
    >


  export type SettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    currentSession?: boolean
    adminPassword?: boolean
    mainStoreData?: boolean
  }, ExtArgs["result"]["setting"]>

  export type SettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    currentSession?: boolean
    adminPassword?: boolean
    mainStoreData?: boolean
  }, ExtArgs["result"]["setting"]>

  export type SettingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    currentSession?: boolean
    adminPassword?: boolean
    mainStoreData?: boolean
  }, ExtArgs["result"]["setting"]>

  export type SettingSelectScalar = {
    id?: boolean
    currentSession?: boolean
    adminPassword?: boolean
    mainStoreData?: boolean
  }

  export type SettingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "currentSession" | "adminPassword" | "mainStoreData", ExtArgs["result"]["setting"]>

  export type $SettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Setting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      currentSession: string | null
      adminPassword: string | null
      mainStoreData: Prisma.JsonValue | null
    }, ExtArgs["result"]["setting"]>
    composites: {}
  }

  type SettingGetPayload<S extends boolean | null | undefined | SettingDefaultArgs> = $Result.GetResult<Prisma.$SettingPayload, S>

  type SettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SettingCountAggregateInputType | true
    }

  export interface SettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Setting'], meta: { name: 'Setting' } }
    /**
     * Find zero or one Setting that matches the filter.
     * @param {SettingFindUniqueArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SettingFindUniqueArgs>(args: SelectSubset<T, SettingFindUniqueArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Setting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SettingFindUniqueOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SettingFindUniqueOrThrowArgs>(args: SelectSubset<T, SettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Setting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SettingFindFirstArgs>(args?: SelectSubset<T, SettingFindFirstArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Setting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SettingFindFirstOrThrowArgs>(args?: SelectSubset<T, SettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.setting.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.setting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const settingWithIdOnly = await prisma.setting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SettingFindManyArgs>(args?: SelectSubset<T, SettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Setting.
     * @param {SettingCreateArgs} args - Arguments to create a Setting.
     * @example
     * // Create one Setting
     * const Setting = await prisma.setting.create({
     *   data: {
     *     // ... data to create a Setting
     *   }
     * })
     * 
     */
    create<T extends SettingCreateArgs>(args: SelectSubset<T, SettingCreateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Settings.
     * @param {SettingCreateManyArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const setting = await prisma.setting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SettingCreateManyArgs>(args?: SelectSubset<T, SettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Settings and returns the data saved in the database.
     * @param {SettingCreateManyAndReturnArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const setting = await prisma.setting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Settings and only return the `id`
     * const settingWithIdOnly = await prisma.setting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SettingCreateManyAndReturnArgs>(args?: SelectSubset<T, SettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Setting.
     * @param {SettingDeleteArgs} args - Arguments to delete one Setting.
     * @example
     * // Delete one Setting
     * const Setting = await prisma.setting.delete({
     *   where: {
     *     // ... filter to delete one Setting
     *   }
     * })
     * 
     */
    delete<T extends SettingDeleteArgs>(args: SelectSubset<T, SettingDeleteArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Setting.
     * @param {SettingUpdateArgs} args - Arguments to update one Setting.
     * @example
     * // Update one Setting
     * const setting = await prisma.setting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SettingUpdateArgs>(args: SelectSubset<T, SettingUpdateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Settings.
     * @param {SettingDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.setting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SettingDeleteManyArgs>(args?: SelectSubset<T, SettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const setting = await prisma.setting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SettingUpdateManyArgs>(args: SelectSubset<T, SettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings and returns the data updated in the database.
     * @param {SettingUpdateManyAndReturnArgs} args - Arguments to update many Settings.
     * @example
     * // Update many Settings
     * const setting = await prisma.setting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Settings and only return the `id`
     * const settingWithIdOnly = await prisma.setting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SettingUpdateManyAndReturnArgs>(args: SelectSubset<T, SettingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Setting.
     * @param {SettingUpsertArgs} args - Arguments to update or create a Setting.
     * @example
     * // Update or create a Setting
     * const setting = await prisma.setting.upsert({
     *   create: {
     *     // ... data to create a Setting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Setting we want to update
     *   }
     * })
     */
    upsert<T extends SettingUpsertArgs>(args: SelectSubset<T, SettingUpsertArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.setting.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends SettingCountArgs>(
      args?: Subset<T, SettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingAggregateArgs>(args: Subset<T, SettingAggregateArgs>): Prisma.PrismaPromise<GetSettingAggregateType<T>>

    /**
     * Group by Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SettingGroupByArgs['orderBy'] }
        : { orderBy?: SettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Setting model
   */
  readonly fields: SettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Setting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Setting model
   */ 
  interface SettingFieldRefs {
    readonly id: FieldRef<"Setting", 'String'>
    readonly currentSession: FieldRef<"Setting", 'String'>
    readonly adminPassword: FieldRef<"Setting", 'String'>
    readonly mainStoreData: FieldRef<"Setting", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Setting findUnique
   */
  export type SettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findUniqueOrThrow
   */
  export type SettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findFirst
   */
  export type SettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findFirstOrThrow
   */
  export type SettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findMany
   */
  export type SettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting create
   */
  export type SettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * The data needed to create a Setting.
     */
    data: XOR<SettingCreateInput, SettingUncheckedCreateInput>
  }

  /**
   * Setting createMany
   */
  export type SettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Settings.
     */
    data: SettingCreateManyInput | SettingCreateManyInput[]
  }

  /**
   * Setting createManyAndReturn
   */
  export type SettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * The data used to create many Settings.
     */
    data: SettingCreateManyInput | SettingCreateManyInput[]
  }

  /**
   * Setting update
   */
  export type SettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * The data needed to update a Setting.
     */
    data: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
    /**
     * Choose, which Setting to update.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting updateMany
   */
  export type SettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingUpdateManyMutationInput, SettingUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingWhereInput
    /**
     * Limit how many Settings to update.
     */
    limit?: number
  }

  /**
   * Setting updateManyAndReturn
   */
  export type SettingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingUpdateManyMutationInput, SettingUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingWhereInput
    /**
     * Limit how many Settings to update.
     */
    limit?: number
  }

  /**
   * Setting upsert
   */
  export type SettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * The filter to search for the Setting to update in case it exists.
     */
    where: SettingWhereUniqueInput
    /**
     * In case the Setting found by the `where` argument doesn't exist, create a new Setting with this data.
     */
    create: XOR<SettingCreateInput, SettingUncheckedCreateInput>
    /**
     * In case the Setting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
  }

  /**
   * Setting delete
   */
  export type SettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
    /**
     * Filter which Setting to delete.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting deleteMany
   */
  export type SettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to delete
     */
    where?: SettingWhereInput
    /**
     * Limit how many Settings to delete.
     */
    limit?: number
  }

  /**
   * Setting without action
   */
  export type SettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Setting
     */
    omit?: SettingOmit<ExtArgs> | null
  }


  /**
   * Model PreOrder
   */

  export type AggregatePreOrder = {
    _count: PreOrderCountAggregateOutputType | null
    _avg: PreOrderAvgAggregateOutputType | null
    _sum: PreOrderSumAggregateOutputType | null
    _min: PreOrderMinAggregateOutputType | null
    _max: PreOrderMaxAggregateOutputType | null
  }

  export type PreOrderAvgAggregateOutputType = {
    total: number | null
  }

  export type PreOrderSumAggregateOutputType = {
    total: number | null
  }

  export type PreOrderMinAggregateOutputType = {
    id: string | null
    orderNumber: string | null
    fullName: string | null
    email: string | null
    phoneNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isCollected: boolean | null
    isPartiallyCollected: boolean | null
    purchasedAt: Date | null
    shippingZone: string | null
    orderStatus: string | null
    total: number | null
  }

  export type PreOrderMaxAggregateOutputType = {
    id: string | null
    orderNumber: string | null
    fullName: string | null
    email: string | null
    phoneNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isCollected: boolean | null
    isPartiallyCollected: boolean | null
    purchasedAt: Date | null
    shippingZone: string | null
    orderStatus: string | null
    total: number | null
  }

  export type PreOrderCountAggregateOutputType = {
    id: number
    orderNumber: number
    fullName: number
    email: number
    phoneNumber: number
    createdAt: number
    updatedAt: number
    isCollected: number
    isPartiallyCollected: number
    purchasedAt: number
    shippingZone: number
    orderStatus: number
    total: number
    _all: number
  }


  export type PreOrderAvgAggregateInputType = {
    total?: true
  }

  export type PreOrderSumAggregateInputType = {
    total?: true
  }

  export type PreOrderMinAggregateInputType = {
    id?: true
    orderNumber?: true
    fullName?: true
    email?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
    isCollected?: true
    isPartiallyCollected?: true
    purchasedAt?: true
    shippingZone?: true
    orderStatus?: true
    total?: true
  }

  export type PreOrderMaxAggregateInputType = {
    id?: true
    orderNumber?: true
    fullName?: true
    email?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
    isCollected?: true
    isPartiallyCollected?: true
    purchasedAt?: true
    shippingZone?: true
    orderStatus?: true
    total?: true
  }

  export type PreOrderCountAggregateInputType = {
    id?: true
    orderNumber?: true
    fullName?: true
    email?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
    isCollected?: true
    isPartiallyCollected?: true
    purchasedAt?: true
    shippingZone?: true
    orderStatus?: true
    total?: true
    _all?: true
  }

  export type PreOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreOrder to aggregate.
     */
    where?: PreOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreOrders to fetch.
     */
    orderBy?: PreOrderOrderByWithRelationInput | PreOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PreOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PreOrders
    **/
    _count?: true | PreOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PreOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PreOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PreOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PreOrderMaxAggregateInputType
  }

  export type GetPreOrderAggregateType<T extends PreOrderAggregateArgs> = {
        [P in keyof T & keyof AggregatePreOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePreOrder[P]>
      : GetScalarType<T[P], AggregatePreOrder[P]>
  }




  export type PreOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreOrderWhereInput
    orderBy?: PreOrderOrderByWithAggregationInput | PreOrderOrderByWithAggregationInput[]
    by: PreOrderScalarFieldEnum[] | PreOrderScalarFieldEnum
    having?: PreOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PreOrderCountAggregateInputType | true
    _avg?: PreOrderAvgAggregateInputType
    _sum?: PreOrderSumAggregateInputType
    _min?: PreOrderMinAggregateInputType
    _max?: PreOrderMaxAggregateInputType
  }

  export type PreOrderGroupByOutputType = {
    id: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber: string | null
    createdAt: Date
    updatedAt: Date
    isCollected: boolean
    isPartiallyCollected: boolean
    purchasedAt: Date | null
    shippingZone: string | null
    orderStatus: string
    total: number
    _count: PreOrderCountAggregateOutputType | null
    _avg: PreOrderAvgAggregateOutputType | null
    _sum: PreOrderSumAggregateOutputType | null
    _min: PreOrderMinAggregateOutputType | null
    _max: PreOrderMaxAggregateOutputType | null
  }

  type GetPreOrderGroupByPayload<T extends PreOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PreOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PreOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PreOrderGroupByOutputType[P]>
            : GetScalarType<T[P], PreOrderGroupByOutputType[P]>
        }
      >
    >


  export type PreOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    fullName?: boolean
    email?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isCollected?: boolean
    isPartiallyCollected?: boolean
    purchasedAt?: boolean
    shippingZone?: boolean
    orderStatus?: boolean
    total?: boolean
    items?: boolean | PreOrder$itemsArgs<ExtArgs>
    consolidations?: boolean | PreOrder$consolidationsArgs<ExtArgs>
    _count?: boolean | PreOrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preOrder"]>

  export type PreOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    fullName?: boolean
    email?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isCollected?: boolean
    isPartiallyCollected?: boolean
    purchasedAt?: boolean
    shippingZone?: boolean
    orderStatus?: boolean
    total?: boolean
  }, ExtArgs["result"]["preOrder"]>

  export type PreOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    fullName?: boolean
    email?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isCollected?: boolean
    isPartiallyCollected?: boolean
    purchasedAt?: boolean
    shippingZone?: boolean
    orderStatus?: boolean
    total?: boolean
  }, ExtArgs["result"]["preOrder"]>

  export type PreOrderSelectScalar = {
    id?: boolean
    orderNumber?: boolean
    fullName?: boolean
    email?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isCollected?: boolean
    isPartiallyCollected?: boolean
    purchasedAt?: boolean
    shippingZone?: boolean
    orderStatus?: boolean
    total?: boolean
  }

  export type PreOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderNumber" | "fullName" | "email" | "phoneNumber" | "createdAt" | "updatedAt" | "isCollected" | "isPartiallyCollected" | "purchasedAt" | "shippingZone" | "orderStatus" | "total", ExtArgs["result"]["preOrder"]>
  export type PreOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | PreOrder$itemsArgs<ExtArgs>
    consolidations?: boolean | PreOrder$consolidationsArgs<ExtArgs>
    _count?: boolean | PreOrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PreOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PreOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PreOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PreOrder"
    objects: {
      items: Prisma.$OrderItemPayload<ExtArgs>[]
      consolidations: Prisma.$ConsolidationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderNumber: string
      fullName: string
      email: string
      phoneNumber: string | null
      createdAt: Date
      updatedAt: Date
      isCollected: boolean
      isPartiallyCollected: boolean
      purchasedAt: Date | null
      shippingZone: string | null
      orderStatus: string
      total: number
    }, ExtArgs["result"]["preOrder"]>
    composites: {}
  }

  type PreOrderGetPayload<S extends boolean | null | undefined | PreOrderDefaultArgs> = $Result.GetResult<Prisma.$PreOrderPayload, S>

  type PreOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PreOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PreOrderCountAggregateInputType | true
    }

  export interface PreOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PreOrder'], meta: { name: 'PreOrder' } }
    /**
     * Find zero or one PreOrder that matches the filter.
     * @param {PreOrderFindUniqueArgs} args - Arguments to find a PreOrder
     * @example
     * // Get one PreOrder
     * const preOrder = await prisma.preOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PreOrderFindUniqueArgs>(args: SelectSubset<T, PreOrderFindUniqueArgs<ExtArgs>>): Prisma__PreOrderClient<$Result.GetResult<Prisma.$PreOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PreOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PreOrderFindUniqueOrThrowArgs} args - Arguments to find a PreOrder
     * @example
     * // Get one PreOrder
     * const preOrder = await prisma.preOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PreOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, PreOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PreOrderClient<$Result.GetResult<Prisma.$PreOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreOrderFindFirstArgs} args - Arguments to find a PreOrder
     * @example
     * // Get one PreOrder
     * const preOrder = await prisma.preOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PreOrderFindFirstArgs>(args?: SelectSubset<T, PreOrderFindFirstArgs<ExtArgs>>): Prisma__PreOrderClient<$Result.GetResult<Prisma.$PreOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreOrderFindFirstOrThrowArgs} args - Arguments to find a PreOrder
     * @example
     * // Get one PreOrder
     * const preOrder = await prisma.preOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PreOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, PreOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__PreOrderClient<$Result.GetResult<Prisma.$PreOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PreOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PreOrders
     * const preOrders = await prisma.preOrder.findMany()
     * 
     * // Get first 10 PreOrders
     * const preOrders = await prisma.preOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const preOrderWithIdOnly = await prisma.preOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PreOrderFindManyArgs>(args?: SelectSubset<T, PreOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PreOrder.
     * @param {PreOrderCreateArgs} args - Arguments to create a PreOrder.
     * @example
     * // Create one PreOrder
     * const PreOrder = await prisma.preOrder.create({
     *   data: {
     *     // ... data to create a PreOrder
     *   }
     * })
     * 
     */
    create<T extends PreOrderCreateArgs>(args: SelectSubset<T, PreOrderCreateArgs<ExtArgs>>): Prisma__PreOrderClient<$Result.GetResult<Prisma.$PreOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PreOrders.
     * @param {PreOrderCreateManyArgs} args - Arguments to create many PreOrders.
     * @example
     * // Create many PreOrders
     * const preOrder = await prisma.preOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PreOrderCreateManyArgs>(args?: SelectSubset<T, PreOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PreOrders and returns the data saved in the database.
     * @param {PreOrderCreateManyAndReturnArgs} args - Arguments to create many PreOrders.
     * @example
     * // Create many PreOrders
     * const preOrder = await prisma.preOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PreOrders and only return the `id`
     * const preOrderWithIdOnly = await prisma.preOrder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PreOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, PreOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PreOrder.
     * @param {PreOrderDeleteArgs} args - Arguments to delete one PreOrder.
     * @example
     * // Delete one PreOrder
     * const PreOrder = await prisma.preOrder.delete({
     *   where: {
     *     // ... filter to delete one PreOrder
     *   }
     * })
     * 
     */
    delete<T extends PreOrderDeleteArgs>(args: SelectSubset<T, PreOrderDeleteArgs<ExtArgs>>): Prisma__PreOrderClient<$Result.GetResult<Prisma.$PreOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PreOrder.
     * @param {PreOrderUpdateArgs} args - Arguments to update one PreOrder.
     * @example
     * // Update one PreOrder
     * const preOrder = await prisma.preOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PreOrderUpdateArgs>(args: SelectSubset<T, PreOrderUpdateArgs<ExtArgs>>): Prisma__PreOrderClient<$Result.GetResult<Prisma.$PreOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PreOrders.
     * @param {PreOrderDeleteManyArgs} args - Arguments to filter PreOrders to delete.
     * @example
     * // Delete a few PreOrders
     * const { count } = await prisma.preOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PreOrderDeleteManyArgs>(args?: SelectSubset<T, PreOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PreOrders
     * const preOrder = await prisma.preOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PreOrderUpdateManyArgs>(args: SelectSubset<T, PreOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreOrders and returns the data updated in the database.
     * @param {PreOrderUpdateManyAndReturnArgs} args - Arguments to update many PreOrders.
     * @example
     * // Update many PreOrders
     * const preOrder = await prisma.preOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PreOrders and only return the `id`
     * const preOrderWithIdOnly = await prisma.preOrder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PreOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, PreOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PreOrder.
     * @param {PreOrderUpsertArgs} args - Arguments to update or create a PreOrder.
     * @example
     * // Update or create a PreOrder
     * const preOrder = await prisma.preOrder.upsert({
     *   create: {
     *     // ... data to create a PreOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PreOrder we want to update
     *   }
     * })
     */
    upsert<T extends PreOrderUpsertArgs>(args: SelectSubset<T, PreOrderUpsertArgs<ExtArgs>>): Prisma__PreOrderClient<$Result.GetResult<Prisma.$PreOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PreOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreOrderCountArgs} args - Arguments to filter PreOrders to count.
     * @example
     * // Count the number of PreOrders
     * const count = await prisma.preOrder.count({
     *   where: {
     *     // ... the filter for the PreOrders we want to count
     *   }
     * })
    **/
    count<T extends PreOrderCountArgs>(
      args?: Subset<T, PreOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PreOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PreOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PreOrderAggregateArgs>(args: Subset<T, PreOrderAggregateArgs>): Prisma.PrismaPromise<GetPreOrderAggregateType<T>>

    /**
     * Group by PreOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PreOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PreOrderGroupByArgs['orderBy'] }
        : { orderBy?: PreOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PreOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPreOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PreOrder model
   */
  readonly fields: PreOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PreOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PreOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends PreOrder$itemsArgs<ExtArgs> = {}>(args?: Subset<T, PreOrder$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    consolidations<T extends PreOrder$consolidationsArgs<ExtArgs> = {}>(args?: Subset<T, PreOrder$consolidationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsolidationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PreOrder model
   */ 
  interface PreOrderFieldRefs {
    readonly id: FieldRef<"PreOrder", 'String'>
    readonly orderNumber: FieldRef<"PreOrder", 'String'>
    readonly fullName: FieldRef<"PreOrder", 'String'>
    readonly email: FieldRef<"PreOrder", 'String'>
    readonly phoneNumber: FieldRef<"PreOrder", 'String'>
    readonly createdAt: FieldRef<"PreOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"PreOrder", 'DateTime'>
    readonly isCollected: FieldRef<"PreOrder", 'Boolean'>
    readonly isPartiallyCollected: FieldRef<"PreOrder", 'Boolean'>
    readonly purchasedAt: FieldRef<"PreOrder", 'DateTime'>
    readonly shippingZone: FieldRef<"PreOrder", 'String'>
    readonly orderStatus: FieldRef<"PreOrder", 'String'>
    readonly total: FieldRef<"PreOrder", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * PreOrder findUnique
   */
  export type PreOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreOrder
     */
    select?: PreOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreOrder
     */
    omit?: PreOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreOrderInclude<ExtArgs> | null
    /**
     * Filter, which PreOrder to fetch.
     */
    where: PreOrderWhereUniqueInput
  }

  /**
   * PreOrder findUniqueOrThrow
   */
  export type PreOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreOrder
     */
    select?: PreOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreOrder
     */
    omit?: PreOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreOrderInclude<ExtArgs> | null
    /**
     * Filter, which PreOrder to fetch.
     */
    where: PreOrderWhereUniqueInput
  }

  /**
   * PreOrder findFirst
   */
  export type PreOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreOrder
     */
    select?: PreOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreOrder
     */
    omit?: PreOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreOrderInclude<ExtArgs> | null
    /**
     * Filter, which PreOrder to fetch.
     */
    where?: PreOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreOrders to fetch.
     */
    orderBy?: PreOrderOrderByWithRelationInput | PreOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreOrders.
     */
    cursor?: PreOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreOrders.
     */
    distinct?: PreOrderScalarFieldEnum | PreOrderScalarFieldEnum[]
  }

  /**
   * PreOrder findFirstOrThrow
   */
  export type PreOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreOrder
     */
    select?: PreOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreOrder
     */
    omit?: PreOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreOrderInclude<ExtArgs> | null
    /**
     * Filter, which PreOrder to fetch.
     */
    where?: PreOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreOrders to fetch.
     */
    orderBy?: PreOrderOrderByWithRelationInput | PreOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreOrders.
     */
    cursor?: PreOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreOrders.
     */
    distinct?: PreOrderScalarFieldEnum | PreOrderScalarFieldEnum[]
  }

  /**
   * PreOrder findMany
   */
  export type PreOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreOrder
     */
    select?: PreOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreOrder
     */
    omit?: PreOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreOrderInclude<ExtArgs> | null
    /**
     * Filter, which PreOrders to fetch.
     */
    where?: PreOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreOrders to fetch.
     */
    orderBy?: PreOrderOrderByWithRelationInput | PreOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PreOrders.
     */
    cursor?: PreOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreOrders.
     */
    skip?: number
    distinct?: PreOrderScalarFieldEnum | PreOrderScalarFieldEnum[]
  }

  /**
   * PreOrder create
   */
  export type PreOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreOrder
     */
    select?: PreOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreOrder
     */
    omit?: PreOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a PreOrder.
     */
    data: XOR<PreOrderCreateInput, PreOrderUncheckedCreateInput>
  }

  /**
   * PreOrder createMany
   */
  export type PreOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PreOrders.
     */
    data: PreOrderCreateManyInput | PreOrderCreateManyInput[]
  }

  /**
   * PreOrder createManyAndReturn
   */
  export type PreOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreOrder
     */
    select?: PreOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreOrder
     */
    omit?: PreOrderOmit<ExtArgs> | null
    /**
     * The data used to create many PreOrders.
     */
    data: PreOrderCreateManyInput | PreOrderCreateManyInput[]
  }

  /**
   * PreOrder update
   */
  export type PreOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreOrder
     */
    select?: PreOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreOrder
     */
    omit?: PreOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a PreOrder.
     */
    data: XOR<PreOrderUpdateInput, PreOrderUncheckedUpdateInput>
    /**
     * Choose, which PreOrder to update.
     */
    where: PreOrderWhereUniqueInput
  }

  /**
   * PreOrder updateMany
   */
  export type PreOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PreOrders.
     */
    data: XOR<PreOrderUpdateManyMutationInput, PreOrderUncheckedUpdateManyInput>
    /**
     * Filter which PreOrders to update
     */
    where?: PreOrderWhereInput
    /**
     * Limit how many PreOrders to update.
     */
    limit?: number
  }

  /**
   * PreOrder updateManyAndReturn
   */
  export type PreOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreOrder
     */
    select?: PreOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreOrder
     */
    omit?: PreOrderOmit<ExtArgs> | null
    /**
     * The data used to update PreOrders.
     */
    data: XOR<PreOrderUpdateManyMutationInput, PreOrderUncheckedUpdateManyInput>
    /**
     * Filter which PreOrders to update
     */
    where?: PreOrderWhereInput
    /**
     * Limit how many PreOrders to update.
     */
    limit?: number
  }

  /**
   * PreOrder upsert
   */
  export type PreOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreOrder
     */
    select?: PreOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreOrder
     */
    omit?: PreOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the PreOrder to update in case it exists.
     */
    where: PreOrderWhereUniqueInput
    /**
     * In case the PreOrder found by the `where` argument doesn't exist, create a new PreOrder with this data.
     */
    create: XOR<PreOrderCreateInput, PreOrderUncheckedCreateInput>
    /**
     * In case the PreOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PreOrderUpdateInput, PreOrderUncheckedUpdateInput>
  }

  /**
   * PreOrder delete
   */
  export type PreOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreOrder
     */
    select?: PreOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreOrder
     */
    omit?: PreOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreOrderInclude<ExtArgs> | null
    /**
     * Filter which PreOrder to delete.
     */
    where: PreOrderWhereUniqueInput
  }

  /**
   * PreOrder deleteMany
   */
  export type PreOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreOrders to delete
     */
    where?: PreOrderWhereInput
    /**
     * Limit how many PreOrders to delete.
     */
    limit?: number
  }

  /**
   * PreOrder.items
   */
  export type PreOrder$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * PreOrder.consolidations
   */
  export type PreOrder$consolidationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consolidation
     */
    select?: ConsolidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consolidation
     */
    omit?: ConsolidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsolidationInclude<ExtArgs> | null
    where?: ConsolidationWhereInput
    orderBy?: ConsolidationOrderByWithRelationInput | ConsolidationOrderByWithRelationInput[]
    cursor?: ConsolidationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsolidationScalarFieldEnum | ConsolidationScalarFieldEnum[]
  }

  /**
   * PreOrder without action
   */
  export type PreOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreOrder
     */
    select?: PreOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreOrder
     */
    omit?: PreOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreOrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderItem
   */

  export type AggregateOrderItem = {
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  export type OrderItemAvgAggregateOutputType = {
    quantity: number | null
    price: number | null
    consolidationId: number | null
  }

  export type OrderItemSumAggregateOutputType = {
    quantity: number | null
    price: number | null
    consolidationId: number | null
  }

  export type OrderItemMinAggregateOutputType = {
    id: string | null
    orderId: string | null
    quantity: number | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isCollected: boolean | null
    productName: string | null
    bookId: string | null
    consolidationId: number | null
  }

  export type OrderItemMaxAggregateOutputType = {
    id: string | null
    orderId: string | null
    quantity: number | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isCollected: boolean | null
    productName: string | null
    bookId: string | null
    consolidationId: number | null
  }

  export type OrderItemCountAggregateOutputType = {
    id: number
    orderId: number
    quantity: number
    price: number
    createdAt: number
    updatedAt: number
    isCollected: number
    productName: number
    bookId: number
    consolidationId: number
    _all: number
  }


  export type OrderItemAvgAggregateInputType = {
    quantity?: true
    price?: true
    consolidationId?: true
  }

  export type OrderItemSumAggregateInputType = {
    quantity?: true
    price?: true
    consolidationId?: true
  }

  export type OrderItemMinAggregateInputType = {
    id?: true
    orderId?: true
    quantity?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    isCollected?: true
    productName?: true
    bookId?: true
    consolidationId?: true
  }

  export type OrderItemMaxAggregateInputType = {
    id?: true
    orderId?: true
    quantity?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    isCollected?: true
    productName?: true
    bookId?: true
    consolidationId?: true
  }

  export type OrderItemCountAggregateInputType = {
    id?: true
    orderId?: true
    quantity?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    isCollected?: true
    productName?: true
    bookId?: true
    consolidationId?: true
    _all?: true
  }

  export type OrderItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItem to aggregate.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderItems
    **/
    _count?: true | OrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderItemMaxAggregateInputType
  }

  export type GetOrderItemAggregateType<T extends OrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItem[P]>
      : GetScalarType<T[P], AggregateOrderItem[P]>
  }




  export type OrderItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithAggregationInput | OrderItemOrderByWithAggregationInput[]
    by: OrderItemScalarFieldEnum[] | OrderItemScalarFieldEnum
    having?: OrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderItemCountAggregateInputType | true
    _avg?: OrderItemAvgAggregateInputType
    _sum?: OrderItemSumAggregateInputType
    _min?: OrderItemMinAggregateInputType
    _max?: OrderItemMaxAggregateInputType
  }

  export type OrderItemGroupByOutputType = {
    id: string
    orderId: string
    quantity: number
    price: number
    createdAt: Date
    updatedAt: Date
    isCollected: boolean
    productName: string
    bookId: string | null
    consolidationId: number | null
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  type GetOrderItemGroupByPayload<T extends OrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
        }
      >
    >


  export type OrderItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    quantity?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isCollected?: boolean
    productName?: boolean
    bookId?: boolean
    consolidationId?: boolean
    order?: boolean | PreOrderDefaultArgs<ExtArgs>
    book?: boolean | OrderItem$bookArgs<ExtArgs>
    consolidation?: boolean | OrderItem$consolidationArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    quantity?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isCollected?: boolean
    productName?: boolean
    bookId?: boolean
    consolidationId?: boolean
    order?: boolean | PreOrderDefaultArgs<ExtArgs>
    book?: boolean | OrderItem$bookArgs<ExtArgs>
    consolidation?: boolean | OrderItem$consolidationArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    quantity?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isCollected?: boolean
    productName?: boolean
    bookId?: boolean
    consolidationId?: boolean
    order?: boolean | PreOrderDefaultArgs<ExtArgs>
    book?: boolean | OrderItem$bookArgs<ExtArgs>
    consolidation?: boolean | OrderItem$consolidationArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectScalar = {
    id?: boolean
    orderId?: boolean
    quantity?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isCollected?: boolean
    productName?: boolean
    bookId?: boolean
    consolidationId?: boolean
  }

  export type OrderItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "quantity" | "price" | "createdAt" | "updatedAt" | "isCollected" | "productName" | "bookId" | "consolidationId", ExtArgs["result"]["orderItem"]>
  export type OrderItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | PreOrderDefaultArgs<ExtArgs>
    book?: boolean | OrderItem$bookArgs<ExtArgs>
    consolidation?: boolean | OrderItem$consolidationArgs<ExtArgs>
  }
  export type OrderItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | PreOrderDefaultArgs<ExtArgs>
    book?: boolean | OrderItem$bookArgs<ExtArgs>
    consolidation?: boolean | OrderItem$consolidationArgs<ExtArgs>
  }
  export type OrderItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | PreOrderDefaultArgs<ExtArgs>
    book?: boolean | OrderItem$bookArgs<ExtArgs>
    consolidation?: boolean | OrderItem$consolidationArgs<ExtArgs>
  }

  export type $OrderItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderItem"
    objects: {
      order: Prisma.$PreOrderPayload<ExtArgs>
      book: Prisma.$BookPayload<ExtArgs> | null
      consolidation: Prisma.$ConsolidationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderId: string
      quantity: number
      price: number
      createdAt: Date
      updatedAt: Date
      isCollected: boolean
      productName: string
      bookId: string | null
      consolidationId: number | null
    }, ExtArgs["result"]["orderItem"]>
    composites: {}
  }

  type OrderItemGetPayload<S extends boolean | null | undefined | OrderItemDefaultArgs> = $Result.GetResult<Prisma.$OrderItemPayload, S>

  type OrderItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderItemCountAggregateInputType | true
    }

  export interface OrderItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderItem'], meta: { name: 'OrderItem' } }
    /**
     * Find zero or one OrderItem that matches the filter.
     * @param {OrderItemFindUniqueArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderItemFindUniqueArgs>(args: SelectSubset<T, OrderItemFindUniqueArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderItemFindUniqueOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderItemFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderItemFindFirstArgs>(args?: SelectSubset<T, OrderItemFindFirstArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderItemFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItems
     * const orderItems = await prisma.orderItem.findMany()
     * 
     * // Get first 10 OrderItems
     * const orderItems = await prisma.orderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderItemFindManyArgs>(args?: SelectSubset<T, OrderItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderItem.
     * @param {OrderItemCreateArgs} args - Arguments to create a OrderItem.
     * @example
     * // Create one OrderItem
     * const OrderItem = await prisma.orderItem.create({
     *   data: {
     *     // ... data to create a OrderItem
     *   }
     * })
     * 
     */
    create<T extends OrderItemCreateArgs>(args: SelectSubset<T, OrderItemCreateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderItems.
     * @param {OrderItemCreateManyArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderItemCreateManyArgs>(args?: SelectSubset<T, OrderItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderItems and returns the data saved in the database.
     * @param {OrderItemCreateManyAndReturnArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderItems and only return the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderItemCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrderItem.
     * @param {OrderItemDeleteArgs} args - Arguments to delete one OrderItem.
     * @example
     * // Delete one OrderItem
     * const OrderItem = await prisma.orderItem.delete({
     *   where: {
     *     // ... filter to delete one OrderItem
     *   }
     * })
     * 
     */
    delete<T extends OrderItemDeleteArgs>(args: SelectSubset<T, OrderItemDeleteArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderItem.
     * @param {OrderItemUpdateArgs} args - Arguments to update one OrderItem.
     * @example
     * // Update one OrderItem
     * const orderItem = await prisma.orderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderItemUpdateArgs>(args: SelectSubset<T, OrderItemUpdateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderItems.
     * @param {OrderItemDeleteManyArgs} args - Arguments to filter OrderItems to delete.
     * @example
     * // Delete a few OrderItems
     * const { count } = await prisma.orderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderItemDeleteManyArgs>(args?: SelectSubset<T, OrderItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderItemUpdateManyArgs>(args: SelectSubset<T, OrderItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems and returns the data updated in the database.
     * @param {OrderItemUpdateManyAndReturnArgs} args - Arguments to update many OrderItems.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderItems and only return the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderItemUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrderItem.
     * @param {OrderItemUpsertArgs} args - Arguments to update or create a OrderItem.
     * @example
     * // Update or create a OrderItem
     * const orderItem = await prisma.orderItem.upsert({
     *   create: {
     *     // ... data to create a OrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItem we want to update
     *   }
     * })
     */
    upsert<T extends OrderItemUpsertArgs>(args: SelectSubset<T, OrderItemUpsertArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemCountArgs} args - Arguments to filter OrderItems to count.
     * @example
     * // Count the number of OrderItems
     * const count = await prisma.orderItem.count({
     *   where: {
     *     // ... the filter for the OrderItems we want to count
     *   }
     * })
    **/
    count<T extends OrderItemCountArgs>(
      args?: Subset<T, OrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemAggregateArgs>(args: Subset<T, OrderItemAggregateArgs>): Prisma.PrismaPromise<GetOrderItemAggregateType<T>>

    /**
     * Group by OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderItemGroupByArgs['orderBy'] }
        : { orderBy?: OrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderItem model
   */
  readonly fields: OrderItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends PreOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PreOrderDefaultArgs<ExtArgs>>): Prisma__PreOrderClient<$Result.GetResult<Prisma.$PreOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    book<T extends OrderItem$bookArgs<ExtArgs> = {}>(args?: Subset<T, OrderItem$bookArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    consolidation<T extends OrderItem$consolidationArgs<ExtArgs> = {}>(args?: Subset<T, OrderItem$consolidationArgs<ExtArgs>>): Prisma__ConsolidationClient<$Result.GetResult<Prisma.$ConsolidationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderItem model
   */ 
  interface OrderItemFieldRefs {
    readonly id: FieldRef<"OrderItem", 'String'>
    readonly orderId: FieldRef<"OrderItem", 'String'>
    readonly quantity: FieldRef<"OrderItem", 'Int'>
    readonly price: FieldRef<"OrderItem", 'Float'>
    readonly createdAt: FieldRef<"OrderItem", 'DateTime'>
    readonly updatedAt: FieldRef<"OrderItem", 'DateTime'>
    readonly isCollected: FieldRef<"OrderItem", 'Boolean'>
    readonly productName: FieldRef<"OrderItem", 'String'>
    readonly bookId: FieldRef<"OrderItem", 'String'>
    readonly consolidationId: FieldRef<"OrderItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * OrderItem findUnique
   */
  export type OrderItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findUniqueOrThrow
   */
  export type OrderItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findFirst
   */
  export type OrderItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findFirstOrThrow
   */
  export type OrderItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findMany
   */
  export type OrderItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem create
   */
  export type OrderItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderItem.
     */
    data: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
  }

  /**
   * OrderItem createMany
   */
  export type OrderItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
  }

  /**
   * OrderItem createManyAndReturn
   */
  export type OrderItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem update
   */
  export type OrderItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderItem.
     */
    data: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
    /**
     * Choose, which OrderItem to update.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem updateMany
   */
  export type OrderItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
  }

  /**
   * OrderItem updateManyAndReturn
   */
  export type OrderItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem upsert
   */
  export type OrderItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderItem to update in case it exists.
     */
    where: OrderItemWhereUniqueInput
    /**
     * In case the OrderItem found by the `where` argument doesn't exist, create a new OrderItem with this data.
     */
    create: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
    /**
     * In case the OrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
  }

  /**
   * OrderItem delete
   */
  export type OrderItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter which OrderItem to delete.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem deleteMany
   */
  export type OrderItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItems to delete
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to delete.
     */
    limit?: number
  }

  /**
   * OrderItem.book
   */
  export type OrderItem$bookArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    where?: BookWhereInput
  }

  /**
   * OrderItem.consolidation
   */
  export type OrderItem$consolidationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consolidation
     */
    select?: ConsolidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consolidation
     */
    omit?: ConsolidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsolidationInclude<ExtArgs> | null
    where?: ConsolidationWhereInput
  }

  /**
   * OrderItem without action
   */
  export type OrderItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
  }


  /**
   * Model Consolidation
   */

  export type AggregateConsolidation = {
    _count: ConsolidationCountAggregateOutputType | null
    _avg: ConsolidationAvgAggregateOutputType | null
    _sum: ConsolidationSumAggregateOutputType | null
    _min: ConsolidationMinAggregateOutputType | null
    _max: ConsolidationMaxAggregateOutputType | null
  }

  export type ConsolidationAvgAggregateOutputType = {
    id: number | null
  }

  export type ConsolidationSumAggregateOutputType = {
    id: number | null
  }

  export type ConsolidationMinAggregateOutputType = {
    id: number | null
    date: Date | null
    session: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    orderId: string | null
  }

  export type ConsolidationMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    session: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    orderId: string | null
  }

  export type ConsolidationCountAggregateOutputType = {
    id: number
    date: number
    session: number
    userId: number
    createdAt: number
    updatedAt: number
    orderId: number
    _all: number
  }


  export type ConsolidationAvgAggregateInputType = {
    id?: true
  }

  export type ConsolidationSumAggregateInputType = {
    id?: true
  }

  export type ConsolidationMinAggregateInputType = {
    id?: true
    date?: true
    session?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    orderId?: true
  }

  export type ConsolidationMaxAggregateInputType = {
    id?: true
    date?: true
    session?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    orderId?: true
  }

  export type ConsolidationCountAggregateInputType = {
    id?: true
    date?: true
    session?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    orderId?: true
    _all?: true
  }

  export type ConsolidationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consolidation to aggregate.
     */
    where?: ConsolidationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consolidations to fetch.
     */
    orderBy?: ConsolidationOrderByWithRelationInput | ConsolidationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsolidationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consolidations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consolidations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Consolidations
    **/
    _count?: true | ConsolidationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsolidationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsolidationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsolidationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsolidationMaxAggregateInputType
  }

  export type GetConsolidationAggregateType<T extends ConsolidationAggregateArgs> = {
        [P in keyof T & keyof AggregateConsolidation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsolidation[P]>
      : GetScalarType<T[P], AggregateConsolidation[P]>
  }




  export type ConsolidationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsolidationWhereInput
    orderBy?: ConsolidationOrderByWithAggregationInput | ConsolidationOrderByWithAggregationInput[]
    by: ConsolidationScalarFieldEnum[] | ConsolidationScalarFieldEnum
    having?: ConsolidationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsolidationCountAggregateInputType | true
    _avg?: ConsolidationAvgAggregateInputType
    _sum?: ConsolidationSumAggregateInputType
    _min?: ConsolidationMinAggregateInputType
    _max?: ConsolidationMaxAggregateInputType
  }

  export type ConsolidationGroupByOutputType = {
    id: number
    date: Date
    session: string
    userId: string
    createdAt: Date
    updatedAt: Date
    orderId: string | null
    _count: ConsolidationCountAggregateOutputType | null
    _avg: ConsolidationAvgAggregateOutputType | null
    _sum: ConsolidationSumAggregateOutputType | null
    _min: ConsolidationMinAggregateOutputType | null
    _max: ConsolidationMaxAggregateOutputType | null
  }

  type GetConsolidationGroupByPayload<T extends ConsolidationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsolidationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsolidationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsolidationGroupByOutputType[P]>
            : GetScalarType<T[P], ConsolidationGroupByOutputType[P]>
        }
      >
    >


  export type ConsolidationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    session?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | Consolidation$orderArgs<ExtArgs>
    items?: boolean | Consolidation$itemsArgs<ExtArgs>
    _count?: boolean | ConsolidationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consolidation"]>

  export type ConsolidationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    session?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | Consolidation$orderArgs<ExtArgs>
  }, ExtArgs["result"]["consolidation"]>

  export type ConsolidationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    session?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | Consolidation$orderArgs<ExtArgs>
  }, ExtArgs["result"]["consolidation"]>

  export type ConsolidationSelectScalar = {
    id?: boolean
    date?: boolean
    session?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderId?: boolean
  }

  export type ConsolidationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "session" | "userId" | "createdAt" | "updatedAt" | "orderId", ExtArgs["result"]["consolidation"]>
  export type ConsolidationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | Consolidation$orderArgs<ExtArgs>
    items?: boolean | Consolidation$itemsArgs<ExtArgs>
    _count?: boolean | ConsolidationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConsolidationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | Consolidation$orderArgs<ExtArgs>
  }
  export type ConsolidationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | Consolidation$orderArgs<ExtArgs>
  }

  export type $ConsolidationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Consolidation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      order: Prisma.$PreOrderPayload<ExtArgs> | null
      items: Prisma.$OrderItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      session: string
      userId: string
      createdAt: Date
      updatedAt: Date
      orderId: string | null
    }, ExtArgs["result"]["consolidation"]>
    composites: {}
  }

  type ConsolidationGetPayload<S extends boolean | null | undefined | ConsolidationDefaultArgs> = $Result.GetResult<Prisma.$ConsolidationPayload, S>

  type ConsolidationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConsolidationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConsolidationCountAggregateInputType | true
    }

  export interface ConsolidationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Consolidation'], meta: { name: 'Consolidation' } }
    /**
     * Find zero or one Consolidation that matches the filter.
     * @param {ConsolidationFindUniqueArgs} args - Arguments to find a Consolidation
     * @example
     * // Get one Consolidation
     * const consolidation = await prisma.consolidation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsolidationFindUniqueArgs>(args: SelectSubset<T, ConsolidationFindUniqueArgs<ExtArgs>>): Prisma__ConsolidationClient<$Result.GetResult<Prisma.$ConsolidationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Consolidation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConsolidationFindUniqueOrThrowArgs} args - Arguments to find a Consolidation
     * @example
     * // Get one Consolidation
     * const consolidation = await prisma.consolidation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsolidationFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsolidationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsolidationClient<$Result.GetResult<Prisma.$ConsolidationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consolidation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsolidationFindFirstArgs} args - Arguments to find a Consolidation
     * @example
     * // Get one Consolidation
     * const consolidation = await prisma.consolidation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsolidationFindFirstArgs>(args?: SelectSubset<T, ConsolidationFindFirstArgs<ExtArgs>>): Prisma__ConsolidationClient<$Result.GetResult<Prisma.$ConsolidationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consolidation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsolidationFindFirstOrThrowArgs} args - Arguments to find a Consolidation
     * @example
     * // Get one Consolidation
     * const consolidation = await prisma.consolidation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsolidationFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsolidationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsolidationClient<$Result.GetResult<Prisma.$ConsolidationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Consolidations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsolidationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consolidations
     * const consolidations = await prisma.consolidation.findMany()
     * 
     * // Get first 10 Consolidations
     * const consolidations = await prisma.consolidation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consolidationWithIdOnly = await prisma.consolidation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsolidationFindManyArgs>(args?: SelectSubset<T, ConsolidationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsolidationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Consolidation.
     * @param {ConsolidationCreateArgs} args - Arguments to create a Consolidation.
     * @example
     * // Create one Consolidation
     * const Consolidation = await prisma.consolidation.create({
     *   data: {
     *     // ... data to create a Consolidation
     *   }
     * })
     * 
     */
    create<T extends ConsolidationCreateArgs>(args: SelectSubset<T, ConsolidationCreateArgs<ExtArgs>>): Prisma__ConsolidationClient<$Result.GetResult<Prisma.$ConsolidationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Consolidations.
     * @param {ConsolidationCreateManyArgs} args - Arguments to create many Consolidations.
     * @example
     * // Create many Consolidations
     * const consolidation = await prisma.consolidation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsolidationCreateManyArgs>(args?: SelectSubset<T, ConsolidationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Consolidations and returns the data saved in the database.
     * @param {ConsolidationCreateManyAndReturnArgs} args - Arguments to create many Consolidations.
     * @example
     * // Create many Consolidations
     * const consolidation = await prisma.consolidation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Consolidations and only return the `id`
     * const consolidationWithIdOnly = await prisma.consolidation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsolidationCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsolidationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsolidationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Consolidation.
     * @param {ConsolidationDeleteArgs} args - Arguments to delete one Consolidation.
     * @example
     * // Delete one Consolidation
     * const Consolidation = await prisma.consolidation.delete({
     *   where: {
     *     // ... filter to delete one Consolidation
     *   }
     * })
     * 
     */
    delete<T extends ConsolidationDeleteArgs>(args: SelectSubset<T, ConsolidationDeleteArgs<ExtArgs>>): Prisma__ConsolidationClient<$Result.GetResult<Prisma.$ConsolidationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Consolidation.
     * @param {ConsolidationUpdateArgs} args - Arguments to update one Consolidation.
     * @example
     * // Update one Consolidation
     * const consolidation = await prisma.consolidation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsolidationUpdateArgs>(args: SelectSubset<T, ConsolidationUpdateArgs<ExtArgs>>): Prisma__ConsolidationClient<$Result.GetResult<Prisma.$ConsolidationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Consolidations.
     * @param {ConsolidationDeleteManyArgs} args - Arguments to filter Consolidations to delete.
     * @example
     * // Delete a few Consolidations
     * const { count } = await prisma.consolidation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsolidationDeleteManyArgs>(args?: SelectSubset<T, ConsolidationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consolidations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsolidationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consolidations
     * const consolidation = await prisma.consolidation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsolidationUpdateManyArgs>(args: SelectSubset<T, ConsolidationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consolidations and returns the data updated in the database.
     * @param {ConsolidationUpdateManyAndReturnArgs} args - Arguments to update many Consolidations.
     * @example
     * // Update many Consolidations
     * const consolidation = await prisma.consolidation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Consolidations and only return the `id`
     * const consolidationWithIdOnly = await prisma.consolidation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConsolidationUpdateManyAndReturnArgs>(args: SelectSubset<T, ConsolidationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsolidationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Consolidation.
     * @param {ConsolidationUpsertArgs} args - Arguments to update or create a Consolidation.
     * @example
     * // Update or create a Consolidation
     * const consolidation = await prisma.consolidation.upsert({
     *   create: {
     *     // ... data to create a Consolidation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consolidation we want to update
     *   }
     * })
     */
    upsert<T extends ConsolidationUpsertArgs>(args: SelectSubset<T, ConsolidationUpsertArgs<ExtArgs>>): Prisma__ConsolidationClient<$Result.GetResult<Prisma.$ConsolidationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Consolidations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsolidationCountArgs} args - Arguments to filter Consolidations to count.
     * @example
     * // Count the number of Consolidations
     * const count = await prisma.consolidation.count({
     *   where: {
     *     // ... the filter for the Consolidations we want to count
     *   }
     * })
    **/
    count<T extends ConsolidationCountArgs>(
      args?: Subset<T, ConsolidationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsolidationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consolidation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsolidationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsolidationAggregateArgs>(args: Subset<T, ConsolidationAggregateArgs>): Prisma.PrismaPromise<GetConsolidationAggregateType<T>>

    /**
     * Group by Consolidation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsolidationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsolidationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsolidationGroupByArgs['orderBy'] }
        : { orderBy?: ConsolidationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsolidationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsolidationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Consolidation model
   */
  readonly fields: ConsolidationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Consolidation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsolidationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    order<T extends Consolidation$orderArgs<ExtArgs> = {}>(args?: Subset<T, Consolidation$orderArgs<ExtArgs>>): Prisma__PreOrderClient<$Result.GetResult<Prisma.$PreOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    items<T extends Consolidation$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Consolidation$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Consolidation model
   */ 
  interface ConsolidationFieldRefs {
    readonly id: FieldRef<"Consolidation", 'Int'>
    readonly date: FieldRef<"Consolidation", 'DateTime'>
    readonly session: FieldRef<"Consolidation", 'String'>
    readonly userId: FieldRef<"Consolidation", 'String'>
    readonly createdAt: FieldRef<"Consolidation", 'DateTime'>
    readonly updatedAt: FieldRef<"Consolidation", 'DateTime'>
    readonly orderId: FieldRef<"Consolidation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Consolidation findUnique
   */
  export type ConsolidationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consolidation
     */
    select?: ConsolidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consolidation
     */
    omit?: ConsolidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsolidationInclude<ExtArgs> | null
    /**
     * Filter, which Consolidation to fetch.
     */
    where: ConsolidationWhereUniqueInput
  }

  /**
   * Consolidation findUniqueOrThrow
   */
  export type ConsolidationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consolidation
     */
    select?: ConsolidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consolidation
     */
    omit?: ConsolidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsolidationInclude<ExtArgs> | null
    /**
     * Filter, which Consolidation to fetch.
     */
    where: ConsolidationWhereUniqueInput
  }

  /**
   * Consolidation findFirst
   */
  export type ConsolidationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consolidation
     */
    select?: ConsolidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consolidation
     */
    omit?: ConsolidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsolidationInclude<ExtArgs> | null
    /**
     * Filter, which Consolidation to fetch.
     */
    where?: ConsolidationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consolidations to fetch.
     */
    orderBy?: ConsolidationOrderByWithRelationInput | ConsolidationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consolidations.
     */
    cursor?: ConsolidationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consolidations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consolidations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consolidations.
     */
    distinct?: ConsolidationScalarFieldEnum | ConsolidationScalarFieldEnum[]
  }

  /**
   * Consolidation findFirstOrThrow
   */
  export type ConsolidationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consolidation
     */
    select?: ConsolidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consolidation
     */
    omit?: ConsolidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsolidationInclude<ExtArgs> | null
    /**
     * Filter, which Consolidation to fetch.
     */
    where?: ConsolidationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consolidations to fetch.
     */
    orderBy?: ConsolidationOrderByWithRelationInput | ConsolidationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consolidations.
     */
    cursor?: ConsolidationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consolidations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consolidations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consolidations.
     */
    distinct?: ConsolidationScalarFieldEnum | ConsolidationScalarFieldEnum[]
  }

  /**
   * Consolidation findMany
   */
  export type ConsolidationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consolidation
     */
    select?: ConsolidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consolidation
     */
    omit?: ConsolidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsolidationInclude<ExtArgs> | null
    /**
     * Filter, which Consolidations to fetch.
     */
    where?: ConsolidationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consolidations to fetch.
     */
    orderBy?: ConsolidationOrderByWithRelationInput | ConsolidationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Consolidations.
     */
    cursor?: ConsolidationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consolidations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consolidations.
     */
    skip?: number
    distinct?: ConsolidationScalarFieldEnum | ConsolidationScalarFieldEnum[]
  }

  /**
   * Consolidation create
   */
  export type ConsolidationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consolidation
     */
    select?: ConsolidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consolidation
     */
    omit?: ConsolidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsolidationInclude<ExtArgs> | null
    /**
     * The data needed to create a Consolidation.
     */
    data: XOR<ConsolidationCreateInput, ConsolidationUncheckedCreateInput>
  }

  /**
   * Consolidation createMany
   */
  export type ConsolidationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Consolidations.
     */
    data: ConsolidationCreateManyInput | ConsolidationCreateManyInput[]
  }

  /**
   * Consolidation createManyAndReturn
   */
  export type ConsolidationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consolidation
     */
    select?: ConsolidationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Consolidation
     */
    omit?: ConsolidationOmit<ExtArgs> | null
    /**
     * The data used to create many Consolidations.
     */
    data: ConsolidationCreateManyInput | ConsolidationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsolidationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Consolidation update
   */
  export type ConsolidationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consolidation
     */
    select?: ConsolidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consolidation
     */
    omit?: ConsolidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsolidationInclude<ExtArgs> | null
    /**
     * The data needed to update a Consolidation.
     */
    data: XOR<ConsolidationUpdateInput, ConsolidationUncheckedUpdateInput>
    /**
     * Choose, which Consolidation to update.
     */
    where: ConsolidationWhereUniqueInput
  }

  /**
   * Consolidation updateMany
   */
  export type ConsolidationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Consolidations.
     */
    data: XOR<ConsolidationUpdateManyMutationInput, ConsolidationUncheckedUpdateManyInput>
    /**
     * Filter which Consolidations to update
     */
    where?: ConsolidationWhereInput
    /**
     * Limit how many Consolidations to update.
     */
    limit?: number
  }

  /**
   * Consolidation updateManyAndReturn
   */
  export type ConsolidationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consolidation
     */
    select?: ConsolidationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Consolidation
     */
    omit?: ConsolidationOmit<ExtArgs> | null
    /**
     * The data used to update Consolidations.
     */
    data: XOR<ConsolidationUpdateManyMutationInput, ConsolidationUncheckedUpdateManyInput>
    /**
     * Filter which Consolidations to update
     */
    where?: ConsolidationWhereInput
    /**
     * Limit how many Consolidations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsolidationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Consolidation upsert
   */
  export type ConsolidationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consolidation
     */
    select?: ConsolidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consolidation
     */
    omit?: ConsolidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsolidationInclude<ExtArgs> | null
    /**
     * The filter to search for the Consolidation to update in case it exists.
     */
    where: ConsolidationWhereUniqueInput
    /**
     * In case the Consolidation found by the `where` argument doesn't exist, create a new Consolidation with this data.
     */
    create: XOR<ConsolidationCreateInput, ConsolidationUncheckedCreateInput>
    /**
     * In case the Consolidation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsolidationUpdateInput, ConsolidationUncheckedUpdateInput>
  }

  /**
   * Consolidation delete
   */
  export type ConsolidationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consolidation
     */
    select?: ConsolidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consolidation
     */
    omit?: ConsolidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsolidationInclude<ExtArgs> | null
    /**
     * Filter which Consolidation to delete.
     */
    where: ConsolidationWhereUniqueInput
  }

  /**
   * Consolidation deleteMany
   */
  export type ConsolidationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consolidations to delete
     */
    where?: ConsolidationWhereInput
    /**
     * Limit how many Consolidations to delete.
     */
    limit?: number
  }

  /**
   * Consolidation.order
   */
  export type Consolidation$orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreOrder
     */
    select?: PreOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreOrder
     */
    omit?: PreOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreOrderInclude<ExtArgs> | null
    where?: PreOrderWhereInput
  }

  /**
   * Consolidation.items
   */
  export type Consolidation$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Consolidation without action
   */
  export type ConsolidationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consolidation
     */
    select?: ConsolidationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consolidation
     */
    omit?: ConsolidationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsolidationInclude<ExtArgs> | null
  }


  /**
   * Model PreorderSession
   */

  export type AggregatePreorderSession = {
    _count: PreorderSessionCountAggregateOutputType | null
    _min: PreorderSessionMinAggregateOutputType | null
    _max: PreorderSessionMaxAggregateOutputType | null
  }

  export type PreorderSessionMinAggregateOutputType = {
    id: string | null
    session: string | null
    userId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PreorderSessionMaxAggregateOutputType = {
    id: string | null
    session: string | null
    userId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PreorderSessionCountAggregateOutputType = {
    id: number
    session: number
    userId: number
    data: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PreorderSessionMinAggregateInputType = {
    id?: true
    session?: true
    userId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PreorderSessionMaxAggregateInputType = {
    id?: true
    session?: true
    userId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PreorderSessionCountAggregateInputType = {
    id?: true
    session?: true
    userId?: true
    data?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PreorderSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreorderSession to aggregate.
     */
    where?: PreorderSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreorderSessions to fetch.
     */
    orderBy?: PreorderSessionOrderByWithRelationInput | PreorderSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PreorderSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreorderSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreorderSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PreorderSessions
    **/
    _count?: true | PreorderSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PreorderSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PreorderSessionMaxAggregateInputType
  }

  export type GetPreorderSessionAggregateType<T extends PreorderSessionAggregateArgs> = {
        [P in keyof T & keyof AggregatePreorderSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePreorderSession[P]>
      : GetScalarType<T[P], AggregatePreorderSession[P]>
  }




  export type PreorderSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreorderSessionWhereInput
    orderBy?: PreorderSessionOrderByWithAggregationInput | PreorderSessionOrderByWithAggregationInput[]
    by: PreorderSessionScalarFieldEnum[] | PreorderSessionScalarFieldEnum
    having?: PreorderSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PreorderSessionCountAggregateInputType | true
    _min?: PreorderSessionMinAggregateInputType
    _max?: PreorderSessionMaxAggregateInputType
  }

  export type PreorderSessionGroupByOutputType = {
    id: string
    session: string
    userId: string
    data: JsonValue
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: PreorderSessionCountAggregateOutputType | null
    _min: PreorderSessionMinAggregateOutputType | null
    _max: PreorderSessionMaxAggregateOutputType | null
  }

  type GetPreorderSessionGroupByPayload<T extends PreorderSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PreorderSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PreorderSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PreorderSessionGroupByOutputType[P]>
            : GetScalarType<T[P], PreorderSessionGroupByOutputType[P]>
        }
      >
    >


  export type PreorderSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session?: boolean
    userId?: boolean
    data?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mySessions?: boolean | PreorderSession$mySessionsArgs<ExtArgs>
    _count?: boolean | PreorderSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preorderSession"]>

  export type PreorderSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session?: boolean
    userId?: boolean
    data?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["preorderSession"]>

  export type PreorderSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session?: boolean
    userId?: boolean
    data?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["preorderSession"]>

  export type PreorderSessionSelectScalar = {
    id?: boolean
    session?: boolean
    userId?: boolean
    data?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PreorderSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "session" | "userId" | "data" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["preorderSession"]>
  export type PreorderSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mySessions?: boolean | PreorderSession$mySessionsArgs<ExtArgs>
    _count?: boolean | PreorderSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PreorderSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PreorderSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PreorderSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PreorderSession"
    objects: {
      mySessions: Prisma.$MySessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      session: string
      userId: string
      data: Prisma.JsonValue
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["preorderSession"]>
    composites: {}
  }

  type PreorderSessionGetPayload<S extends boolean | null | undefined | PreorderSessionDefaultArgs> = $Result.GetResult<Prisma.$PreorderSessionPayload, S>

  type PreorderSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PreorderSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PreorderSessionCountAggregateInputType | true
    }

  export interface PreorderSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PreorderSession'], meta: { name: 'PreorderSession' } }
    /**
     * Find zero or one PreorderSession that matches the filter.
     * @param {PreorderSessionFindUniqueArgs} args - Arguments to find a PreorderSession
     * @example
     * // Get one PreorderSession
     * const preorderSession = await prisma.preorderSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PreorderSessionFindUniqueArgs>(args: SelectSubset<T, PreorderSessionFindUniqueArgs<ExtArgs>>): Prisma__PreorderSessionClient<$Result.GetResult<Prisma.$PreorderSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PreorderSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PreorderSessionFindUniqueOrThrowArgs} args - Arguments to find a PreorderSession
     * @example
     * // Get one PreorderSession
     * const preorderSession = await prisma.preorderSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PreorderSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, PreorderSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PreorderSessionClient<$Result.GetResult<Prisma.$PreorderSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreorderSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreorderSessionFindFirstArgs} args - Arguments to find a PreorderSession
     * @example
     * // Get one PreorderSession
     * const preorderSession = await prisma.preorderSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PreorderSessionFindFirstArgs>(args?: SelectSubset<T, PreorderSessionFindFirstArgs<ExtArgs>>): Prisma__PreorderSessionClient<$Result.GetResult<Prisma.$PreorderSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreorderSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreorderSessionFindFirstOrThrowArgs} args - Arguments to find a PreorderSession
     * @example
     * // Get one PreorderSession
     * const preorderSession = await prisma.preorderSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PreorderSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, PreorderSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PreorderSessionClient<$Result.GetResult<Prisma.$PreorderSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PreorderSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreorderSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PreorderSessions
     * const preorderSessions = await prisma.preorderSession.findMany()
     * 
     * // Get first 10 PreorderSessions
     * const preorderSessions = await prisma.preorderSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const preorderSessionWithIdOnly = await prisma.preorderSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PreorderSessionFindManyArgs>(args?: SelectSubset<T, PreorderSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreorderSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PreorderSession.
     * @param {PreorderSessionCreateArgs} args - Arguments to create a PreorderSession.
     * @example
     * // Create one PreorderSession
     * const PreorderSession = await prisma.preorderSession.create({
     *   data: {
     *     // ... data to create a PreorderSession
     *   }
     * })
     * 
     */
    create<T extends PreorderSessionCreateArgs>(args: SelectSubset<T, PreorderSessionCreateArgs<ExtArgs>>): Prisma__PreorderSessionClient<$Result.GetResult<Prisma.$PreorderSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PreorderSessions.
     * @param {PreorderSessionCreateManyArgs} args - Arguments to create many PreorderSessions.
     * @example
     * // Create many PreorderSessions
     * const preorderSession = await prisma.preorderSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PreorderSessionCreateManyArgs>(args?: SelectSubset<T, PreorderSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PreorderSessions and returns the data saved in the database.
     * @param {PreorderSessionCreateManyAndReturnArgs} args - Arguments to create many PreorderSessions.
     * @example
     * // Create many PreorderSessions
     * const preorderSession = await prisma.preorderSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PreorderSessions and only return the `id`
     * const preorderSessionWithIdOnly = await prisma.preorderSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PreorderSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, PreorderSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreorderSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PreorderSession.
     * @param {PreorderSessionDeleteArgs} args - Arguments to delete one PreorderSession.
     * @example
     * // Delete one PreorderSession
     * const PreorderSession = await prisma.preorderSession.delete({
     *   where: {
     *     // ... filter to delete one PreorderSession
     *   }
     * })
     * 
     */
    delete<T extends PreorderSessionDeleteArgs>(args: SelectSubset<T, PreorderSessionDeleteArgs<ExtArgs>>): Prisma__PreorderSessionClient<$Result.GetResult<Prisma.$PreorderSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PreorderSession.
     * @param {PreorderSessionUpdateArgs} args - Arguments to update one PreorderSession.
     * @example
     * // Update one PreorderSession
     * const preorderSession = await prisma.preorderSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PreorderSessionUpdateArgs>(args: SelectSubset<T, PreorderSessionUpdateArgs<ExtArgs>>): Prisma__PreorderSessionClient<$Result.GetResult<Prisma.$PreorderSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PreorderSessions.
     * @param {PreorderSessionDeleteManyArgs} args - Arguments to filter PreorderSessions to delete.
     * @example
     * // Delete a few PreorderSessions
     * const { count } = await prisma.preorderSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PreorderSessionDeleteManyArgs>(args?: SelectSubset<T, PreorderSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreorderSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreorderSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PreorderSessions
     * const preorderSession = await prisma.preorderSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PreorderSessionUpdateManyArgs>(args: SelectSubset<T, PreorderSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreorderSessions and returns the data updated in the database.
     * @param {PreorderSessionUpdateManyAndReturnArgs} args - Arguments to update many PreorderSessions.
     * @example
     * // Update many PreorderSessions
     * const preorderSession = await prisma.preorderSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PreorderSessions and only return the `id`
     * const preorderSessionWithIdOnly = await prisma.preorderSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PreorderSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, PreorderSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreorderSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PreorderSession.
     * @param {PreorderSessionUpsertArgs} args - Arguments to update or create a PreorderSession.
     * @example
     * // Update or create a PreorderSession
     * const preorderSession = await prisma.preorderSession.upsert({
     *   create: {
     *     // ... data to create a PreorderSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PreorderSession we want to update
     *   }
     * })
     */
    upsert<T extends PreorderSessionUpsertArgs>(args: SelectSubset<T, PreorderSessionUpsertArgs<ExtArgs>>): Prisma__PreorderSessionClient<$Result.GetResult<Prisma.$PreorderSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PreorderSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreorderSessionCountArgs} args - Arguments to filter PreorderSessions to count.
     * @example
     * // Count the number of PreorderSessions
     * const count = await prisma.preorderSession.count({
     *   where: {
     *     // ... the filter for the PreorderSessions we want to count
     *   }
     * })
    **/
    count<T extends PreorderSessionCountArgs>(
      args?: Subset<T, PreorderSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PreorderSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PreorderSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreorderSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PreorderSessionAggregateArgs>(args: Subset<T, PreorderSessionAggregateArgs>): Prisma.PrismaPromise<GetPreorderSessionAggregateType<T>>

    /**
     * Group by PreorderSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreorderSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PreorderSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PreorderSessionGroupByArgs['orderBy'] }
        : { orderBy?: PreorderSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PreorderSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPreorderSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PreorderSession model
   */
  readonly fields: PreorderSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PreorderSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PreorderSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mySessions<T extends PreorderSession$mySessionsArgs<ExtArgs> = {}>(args?: Subset<T, PreorderSession$mySessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MySessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PreorderSession model
   */ 
  interface PreorderSessionFieldRefs {
    readonly id: FieldRef<"PreorderSession", 'String'>
    readonly session: FieldRef<"PreorderSession", 'String'>
    readonly userId: FieldRef<"PreorderSession", 'String'>
    readonly data: FieldRef<"PreorderSession", 'Json'>
    readonly isActive: FieldRef<"PreorderSession", 'Boolean'>
    readonly createdAt: FieldRef<"PreorderSession", 'DateTime'>
    readonly updatedAt: FieldRef<"PreorderSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PreorderSession findUnique
   */
  export type PreorderSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreorderSession
     */
    select?: PreorderSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreorderSession
     */
    omit?: PreorderSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderSessionInclude<ExtArgs> | null
    /**
     * Filter, which PreorderSession to fetch.
     */
    where: PreorderSessionWhereUniqueInput
  }

  /**
   * PreorderSession findUniqueOrThrow
   */
  export type PreorderSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreorderSession
     */
    select?: PreorderSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreorderSession
     */
    omit?: PreorderSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderSessionInclude<ExtArgs> | null
    /**
     * Filter, which PreorderSession to fetch.
     */
    where: PreorderSessionWhereUniqueInput
  }

  /**
   * PreorderSession findFirst
   */
  export type PreorderSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreorderSession
     */
    select?: PreorderSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreorderSession
     */
    omit?: PreorderSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderSessionInclude<ExtArgs> | null
    /**
     * Filter, which PreorderSession to fetch.
     */
    where?: PreorderSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreorderSessions to fetch.
     */
    orderBy?: PreorderSessionOrderByWithRelationInput | PreorderSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreorderSessions.
     */
    cursor?: PreorderSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreorderSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreorderSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreorderSessions.
     */
    distinct?: PreorderSessionScalarFieldEnum | PreorderSessionScalarFieldEnum[]
  }

  /**
   * PreorderSession findFirstOrThrow
   */
  export type PreorderSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreorderSession
     */
    select?: PreorderSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreorderSession
     */
    omit?: PreorderSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderSessionInclude<ExtArgs> | null
    /**
     * Filter, which PreorderSession to fetch.
     */
    where?: PreorderSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreorderSessions to fetch.
     */
    orderBy?: PreorderSessionOrderByWithRelationInput | PreorderSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreorderSessions.
     */
    cursor?: PreorderSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreorderSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreorderSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreorderSessions.
     */
    distinct?: PreorderSessionScalarFieldEnum | PreorderSessionScalarFieldEnum[]
  }

  /**
   * PreorderSession findMany
   */
  export type PreorderSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreorderSession
     */
    select?: PreorderSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreorderSession
     */
    omit?: PreorderSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderSessionInclude<ExtArgs> | null
    /**
     * Filter, which PreorderSessions to fetch.
     */
    where?: PreorderSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreorderSessions to fetch.
     */
    orderBy?: PreorderSessionOrderByWithRelationInput | PreorderSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PreorderSessions.
     */
    cursor?: PreorderSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreorderSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreorderSessions.
     */
    skip?: number
    distinct?: PreorderSessionScalarFieldEnum | PreorderSessionScalarFieldEnum[]
  }

  /**
   * PreorderSession create
   */
  export type PreorderSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreorderSession
     */
    select?: PreorderSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreorderSession
     */
    omit?: PreorderSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a PreorderSession.
     */
    data: XOR<PreorderSessionCreateInput, PreorderSessionUncheckedCreateInput>
  }

  /**
   * PreorderSession createMany
   */
  export type PreorderSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PreorderSessions.
     */
    data: PreorderSessionCreateManyInput | PreorderSessionCreateManyInput[]
  }

  /**
   * PreorderSession createManyAndReturn
   */
  export type PreorderSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreorderSession
     */
    select?: PreorderSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreorderSession
     */
    omit?: PreorderSessionOmit<ExtArgs> | null
    /**
     * The data used to create many PreorderSessions.
     */
    data: PreorderSessionCreateManyInput | PreorderSessionCreateManyInput[]
  }

  /**
   * PreorderSession update
   */
  export type PreorderSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreorderSession
     */
    select?: PreorderSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreorderSession
     */
    omit?: PreorderSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a PreorderSession.
     */
    data: XOR<PreorderSessionUpdateInput, PreorderSessionUncheckedUpdateInput>
    /**
     * Choose, which PreorderSession to update.
     */
    where: PreorderSessionWhereUniqueInput
  }

  /**
   * PreorderSession updateMany
   */
  export type PreorderSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PreorderSessions.
     */
    data: XOR<PreorderSessionUpdateManyMutationInput, PreorderSessionUncheckedUpdateManyInput>
    /**
     * Filter which PreorderSessions to update
     */
    where?: PreorderSessionWhereInput
    /**
     * Limit how many PreorderSessions to update.
     */
    limit?: number
  }

  /**
   * PreorderSession updateManyAndReturn
   */
  export type PreorderSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreorderSession
     */
    select?: PreorderSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreorderSession
     */
    omit?: PreorderSessionOmit<ExtArgs> | null
    /**
     * The data used to update PreorderSessions.
     */
    data: XOR<PreorderSessionUpdateManyMutationInput, PreorderSessionUncheckedUpdateManyInput>
    /**
     * Filter which PreorderSessions to update
     */
    where?: PreorderSessionWhereInput
    /**
     * Limit how many PreorderSessions to update.
     */
    limit?: number
  }

  /**
   * PreorderSession upsert
   */
  export type PreorderSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreorderSession
     */
    select?: PreorderSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreorderSession
     */
    omit?: PreorderSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the PreorderSession to update in case it exists.
     */
    where: PreorderSessionWhereUniqueInput
    /**
     * In case the PreorderSession found by the `where` argument doesn't exist, create a new PreorderSession with this data.
     */
    create: XOR<PreorderSessionCreateInput, PreorderSessionUncheckedCreateInput>
    /**
     * In case the PreorderSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PreorderSessionUpdateInput, PreorderSessionUncheckedUpdateInput>
  }

  /**
   * PreorderSession delete
   */
  export type PreorderSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreorderSession
     */
    select?: PreorderSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreorderSession
     */
    omit?: PreorderSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderSessionInclude<ExtArgs> | null
    /**
     * Filter which PreorderSession to delete.
     */
    where: PreorderSessionWhereUniqueInput
  }

  /**
   * PreorderSession deleteMany
   */
  export type PreorderSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreorderSessions to delete
     */
    where?: PreorderSessionWhereInput
    /**
     * Limit how many PreorderSessions to delete.
     */
    limit?: number
  }

  /**
   * PreorderSession.mySessions
   */
  export type PreorderSession$mySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionInclude<ExtArgs> | null
    where?: MySessionWhereInput
    orderBy?: MySessionOrderByWithRelationInput | MySessionOrderByWithRelationInput[]
    cursor?: MySessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MySessionScalarFieldEnum | MySessionScalarFieldEnum[]
  }

  /**
   * PreorderSession without action
   */
  export type PreorderSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreorderSession
     */
    select?: PreorderSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreorderSession
     */
    omit?: PreorderSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderSessionInclude<ExtArgs> | null
  }


  /**
   * Model TableSaleSession
   */

  export type AggregateTableSaleSession = {
    _count: TableSaleSessionCountAggregateOutputType | null
    _min: TableSaleSessionMinAggregateOutputType | null
    _max: TableSaleSessionMaxAggregateOutputType | null
  }

  export type TableSaleSessionMinAggregateOutputType = {
    id: string | null
    name: string | null
    tableId: string | null
    session: string | null
    managerId: string | null
    salesPersonId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TableSaleSessionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    tableId: string | null
    session: string | null
    managerId: string | null
    salesPersonId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TableSaleSessionCountAggregateOutputType = {
    id: number
    name: number
    tableId: number
    session: number
    managerId: number
    salesPersonId: number
    data: number
    soldData: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TableSaleSessionMinAggregateInputType = {
    id?: true
    name?: true
    tableId?: true
    session?: true
    managerId?: true
    salesPersonId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TableSaleSessionMaxAggregateInputType = {
    id?: true
    name?: true
    tableId?: true
    session?: true
    managerId?: true
    salesPersonId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TableSaleSessionCountAggregateInputType = {
    id?: true
    name?: true
    tableId?: true
    session?: true
    managerId?: true
    salesPersonId?: true
    data?: true
    soldData?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TableSaleSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TableSaleSession to aggregate.
     */
    where?: TableSaleSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TableSaleSessions to fetch.
     */
    orderBy?: TableSaleSessionOrderByWithRelationInput | TableSaleSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TableSaleSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TableSaleSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TableSaleSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TableSaleSessions
    **/
    _count?: true | TableSaleSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TableSaleSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TableSaleSessionMaxAggregateInputType
  }

  export type GetTableSaleSessionAggregateType<T extends TableSaleSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateTableSaleSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTableSaleSession[P]>
      : GetScalarType<T[P], AggregateTableSaleSession[P]>
  }




  export type TableSaleSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TableSaleSessionWhereInput
    orderBy?: TableSaleSessionOrderByWithAggregationInput | TableSaleSessionOrderByWithAggregationInput[]
    by: TableSaleSessionScalarFieldEnum[] | TableSaleSessionScalarFieldEnum
    having?: TableSaleSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TableSaleSessionCountAggregateInputType | true
    _min?: TableSaleSessionMinAggregateInputType
    _max?: TableSaleSessionMaxAggregateInputType
  }

  export type TableSaleSessionGroupByOutputType = {
    id: string
    name: string
    tableId: string
    session: string
    managerId: string | null
    salesPersonId: string | null
    data: JsonValue | null
    soldData: JsonValue | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: TableSaleSessionCountAggregateOutputType | null
    _min: TableSaleSessionMinAggregateOutputType | null
    _max: TableSaleSessionMaxAggregateOutputType | null
  }

  type GetTableSaleSessionGroupByPayload<T extends TableSaleSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TableSaleSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TableSaleSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TableSaleSessionGroupByOutputType[P]>
            : GetScalarType<T[P], TableSaleSessionGroupByOutputType[P]>
        }
      >
    >


  export type TableSaleSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tableId?: boolean
    session?: boolean
    managerId?: boolean
    salesPersonId?: boolean
    data?: boolean
    soldData?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bookSales?: boolean | TableSaleSession$bookSalesArgs<ExtArgs>
    mySessions?: boolean | TableSaleSession$mySessionsArgs<ExtArgs>
    _count?: boolean | TableSaleSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tableSaleSession"]>

  export type TableSaleSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tableId?: boolean
    session?: boolean
    managerId?: boolean
    salesPersonId?: boolean
    data?: boolean
    soldData?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tableSaleSession"]>

  export type TableSaleSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tableId?: boolean
    session?: boolean
    managerId?: boolean
    salesPersonId?: boolean
    data?: boolean
    soldData?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tableSaleSession"]>

  export type TableSaleSessionSelectScalar = {
    id?: boolean
    name?: boolean
    tableId?: boolean
    session?: boolean
    managerId?: boolean
    salesPersonId?: boolean
    data?: boolean
    soldData?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TableSaleSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "tableId" | "session" | "managerId" | "salesPersonId" | "data" | "soldData" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["tableSaleSession"]>
  export type TableSaleSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookSales?: boolean | TableSaleSession$bookSalesArgs<ExtArgs>
    mySessions?: boolean | TableSaleSession$mySessionsArgs<ExtArgs>
    _count?: boolean | TableSaleSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TableSaleSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TableSaleSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TableSaleSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TableSaleSession"
    objects: {
      bookSales: Prisma.$BookSalePayload<ExtArgs>[]
      mySessions: Prisma.$MySessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      tableId: string
      session: string
      managerId: string | null
      salesPersonId: string | null
      data: Prisma.JsonValue | null
      soldData: Prisma.JsonValue | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tableSaleSession"]>
    composites: {}
  }

  type TableSaleSessionGetPayload<S extends boolean | null | undefined | TableSaleSessionDefaultArgs> = $Result.GetResult<Prisma.$TableSaleSessionPayload, S>

  type TableSaleSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TableSaleSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TableSaleSessionCountAggregateInputType | true
    }

  export interface TableSaleSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TableSaleSession'], meta: { name: 'TableSaleSession' } }
    /**
     * Find zero or one TableSaleSession that matches the filter.
     * @param {TableSaleSessionFindUniqueArgs} args - Arguments to find a TableSaleSession
     * @example
     * // Get one TableSaleSession
     * const tableSaleSession = await prisma.tableSaleSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TableSaleSessionFindUniqueArgs>(args: SelectSubset<T, TableSaleSessionFindUniqueArgs<ExtArgs>>): Prisma__TableSaleSessionClient<$Result.GetResult<Prisma.$TableSaleSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TableSaleSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TableSaleSessionFindUniqueOrThrowArgs} args - Arguments to find a TableSaleSession
     * @example
     * // Get one TableSaleSession
     * const tableSaleSession = await prisma.tableSaleSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TableSaleSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, TableSaleSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TableSaleSessionClient<$Result.GetResult<Prisma.$TableSaleSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TableSaleSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableSaleSessionFindFirstArgs} args - Arguments to find a TableSaleSession
     * @example
     * // Get one TableSaleSession
     * const tableSaleSession = await prisma.tableSaleSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TableSaleSessionFindFirstArgs>(args?: SelectSubset<T, TableSaleSessionFindFirstArgs<ExtArgs>>): Prisma__TableSaleSessionClient<$Result.GetResult<Prisma.$TableSaleSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TableSaleSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableSaleSessionFindFirstOrThrowArgs} args - Arguments to find a TableSaleSession
     * @example
     * // Get one TableSaleSession
     * const tableSaleSession = await prisma.tableSaleSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TableSaleSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, TableSaleSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TableSaleSessionClient<$Result.GetResult<Prisma.$TableSaleSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TableSaleSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableSaleSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TableSaleSessions
     * const tableSaleSessions = await prisma.tableSaleSession.findMany()
     * 
     * // Get first 10 TableSaleSessions
     * const tableSaleSessions = await prisma.tableSaleSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tableSaleSessionWithIdOnly = await prisma.tableSaleSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TableSaleSessionFindManyArgs>(args?: SelectSubset<T, TableSaleSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TableSaleSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TableSaleSession.
     * @param {TableSaleSessionCreateArgs} args - Arguments to create a TableSaleSession.
     * @example
     * // Create one TableSaleSession
     * const TableSaleSession = await prisma.tableSaleSession.create({
     *   data: {
     *     // ... data to create a TableSaleSession
     *   }
     * })
     * 
     */
    create<T extends TableSaleSessionCreateArgs>(args: SelectSubset<T, TableSaleSessionCreateArgs<ExtArgs>>): Prisma__TableSaleSessionClient<$Result.GetResult<Prisma.$TableSaleSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TableSaleSessions.
     * @param {TableSaleSessionCreateManyArgs} args - Arguments to create many TableSaleSessions.
     * @example
     * // Create many TableSaleSessions
     * const tableSaleSession = await prisma.tableSaleSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TableSaleSessionCreateManyArgs>(args?: SelectSubset<T, TableSaleSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TableSaleSessions and returns the data saved in the database.
     * @param {TableSaleSessionCreateManyAndReturnArgs} args - Arguments to create many TableSaleSessions.
     * @example
     * // Create many TableSaleSessions
     * const tableSaleSession = await prisma.tableSaleSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TableSaleSessions and only return the `id`
     * const tableSaleSessionWithIdOnly = await prisma.tableSaleSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TableSaleSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, TableSaleSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TableSaleSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TableSaleSession.
     * @param {TableSaleSessionDeleteArgs} args - Arguments to delete one TableSaleSession.
     * @example
     * // Delete one TableSaleSession
     * const TableSaleSession = await prisma.tableSaleSession.delete({
     *   where: {
     *     // ... filter to delete one TableSaleSession
     *   }
     * })
     * 
     */
    delete<T extends TableSaleSessionDeleteArgs>(args: SelectSubset<T, TableSaleSessionDeleteArgs<ExtArgs>>): Prisma__TableSaleSessionClient<$Result.GetResult<Prisma.$TableSaleSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TableSaleSession.
     * @param {TableSaleSessionUpdateArgs} args - Arguments to update one TableSaleSession.
     * @example
     * // Update one TableSaleSession
     * const tableSaleSession = await prisma.tableSaleSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TableSaleSessionUpdateArgs>(args: SelectSubset<T, TableSaleSessionUpdateArgs<ExtArgs>>): Prisma__TableSaleSessionClient<$Result.GetResult<Prisma.$TableSaleSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TableSaleSessions.
     * @param {TableSaleSessionDeleteManyArgs} args - Arguments to filter TableSaleSessions to delete.
     * @example
     * // Delete a few TableSaleSessions
     * const { count } = await prisma.tableSaleSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TableSaleSessionDeleteManyArgs>(args?: SelectSubset<T, TableSaleSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TableSaleSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableSaleSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TableSaleSessions
     * const tableSaleSession = await prisma.tableSaleSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TableSaleSessionUpdateManyArgs>(args: SelectSubset<T, TableSaleSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TableSaleSessions and returns the data updated in the database.
     * @param {TableSaleSessionUpdateManyAndReturnArgs} args - Arguments to update many TableSaleSessions.
     * @example
     * // Update many TableSaleSessions
     * const tableSaleSession = await prisma.tableSaleSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TableSaleSessions and only return the `id`
     * const tableSaleSessionWithIdOnly = await prisma.tableSaleSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TableSaleSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, TableSaleSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TableSaleSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TableSaleSession.
     * @param {TableSaleSessionUpsertArgs} args - Arguments to update or create a TableSaleSession.
     * @example
     * // Update or create a TableSaleSession
     * const tableSaleSession = await prisma.tableSaleSession.upsert({
     *   create: {
     *     // ... data to create a TableSaleSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TableSaleSession we want to update
     *   }
     * })
     */
    upsert<T extends TableSaleSessionUpsertArgs>(args: SelectSubset<T, TableSaleSessionUpsertArgs<ExtArgs>>): Prisma__TableSaleSessionClient<$Result.GetResult<Prisma.$TableSaleSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TableSaleSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableSaleSessionCountArgs} args - Arguments to filter TableSaleSessions to count.
     * @example
     * // Count the number of TableSaleSessions
     * const count = await prisma.tableSaleSession.count({
     *   where: {
     *     // ... the filter for the TableSaleSessions we want to count
     *   }
     * })
    **/
    count<T extends TableSaleSessionCountArgs>(
      args?: Subset<T, TableSaleSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TableSaleSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TableSaleSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableSaleSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TableSaleSessionAggregateArgs>(args: Subset<T, TableSaleSessionAggregateArgs>): Prisma.PrismaPromise<GetTableSaleSessionAggregateType<T>>

    /**
     * Group by TableSaleSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableSaleSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TableSaleSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TableSaleSessionGroupByArgs['orderBy'] }
        : { orderBy?: TableSaleSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TableSaleSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTableSaleSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TableSaleSession model
   */
  readonly fields: TableSaleSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TableSaleSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TableSaleSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bookSales<T extends TableSaleSession$bookSalesArgs<ExtArgs> = {}>(args?: Subset<T, TableSaleSession$bookSalesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookSalePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mySessions<T extends TableSaleSession$mySessionsArgs<ExtArgs> = {}>(args?: Subset<T, TableSaleSession$mySessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MySessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TableSaleSession model
   */ 
  interface TableSaleSessionFieldRefs {
    readonly id: FieldRef<"TableSaleSession", 'String'>
    readonly name: FieldRef<"TableSaleSession", 'String'>
    readonly tableId: FieldRef<"TableSaleSession", 'String'>
    readonly session: FieldRef<"TableSaleSession", 'String'>
    readonly managerId: FieldRef<"TableSaleSession", 'String'>
    readonly salesPersonId: FieldRef<"TableSaleSession", 'String'>
    readonly data: FieldRef<"TableSaleSession", 'Json'>
    readonly soldData: FieldRef<"TableSaleSession", 'Json'>
    readonly isActive: FieldRef<"TableSaleSession", 'Boolean'>
    readonly createdAt: FieldRef<"TableSaleSession", 'DateTime'>
    readonly updatedAt: FieldRef<"TableSaleSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TableSaleSession findUnique
   */
  export type TableSaleSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableSaleSession
     */
    select?: TableSaleSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableSaleSession
     */
    omit?: TableSaleSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableSaleSessionInclude<ExtArgs> | null
    /**
     * Filter, which TableSaleSession to fetch.
     */
    where: TableSaleSessionWhereUniqueInput
  }

  /**
   * TableSaleSession findUniqueOrThrow
   */
  export type TableSaleSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableSaleSession
     */
    select?: TableSaleSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableSaleSession
     */
    omit?: TableSaleSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableSaleSessionInclude<ExtArgs> | null
    /**
     * Filter, which TableSaleSession to fetch.
     */
    where: TableSaleSessionWhereUniqueInput
  }

  /**
   * TableSaleSession findFirst
   */
  export type TableSaleSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableSaleSession
     */
    select?: TableSaleSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableSaleSession
     */
    omit?: TableSaleSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableSaleSessionInclude<ExtArgs> | null
    /**
     * Filter, which TableSaleSession to fetch.
     */
    where?: TableSaleSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TableSaleSessions to fetch.
     */
    orderBy?: TableSaleSessionOrderByWithRelationInput | TableSaleSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TableSaleSessions.
     */
    cursor?: TableSaleSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TableSaleSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TableSaleSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TableSaleSessions.
     */
    distinct?: TableSaleSessionScalarFieldEnum | TableSaleSessionScalarFieldEnum[]
  }

  /**
   * TableSaleSession findFirstOrThrow
   */
  export type TableSaleSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableSaleSession
     */
    select?: TableSaleSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableSaleSession
     */
    omit?: TableSaleSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableSaleSessionInclude<ExtArgs> | null
    /**
     * Filter, which TableSaleSession to fetch.
     */
    where?: TableSaleSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TableSaleSessions to fetch.
     */
    orderBy?: TableSaleSessionOrderByWithRelationInput | TableSaleSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TableSaleSessions.
     */
    cursor?: TableSaleSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TableSaleSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TableSaleSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TableSaleSessions.
     */
    distinct?: TableSaleSessionScalarFieldEnum | TableSaleSessionScalarFieldEnum[]
  }

  /**
   * TableSaleSession findMany
   */
  export type TableSaleSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableSaleSession
     */
    select?: TableSaleSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableSaleSession
     */
    omit?: TableSaleSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableSaleSessionInclude<ExtArgs> | null
    /**
     * Filter, which TableSaleSessions to fetch.
     */
    where?: TableSaleSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TableSaleSessions to fetch.
     */
    orderBy?: TableSaleSessionOrderByWithRelationInput | TableSaleSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TableSaleSessions.
     */
    cursor?: TableSaleSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TableSaleSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TableSaleSessions.
     */
    skip?: number
    distinct?: TableSaleSessionScalarFieldEnum | TableSaleSessionScalarFieldEnum[]
  }

  /**
   * TableSaleSession create
   */
  export type TableSaleSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableSaleSession
     */
    select?: TableSaleSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableSaleSession
     */
    omit?: TableSaleSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableSaleSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a TableSaleSession.
     */
    data: XOR<TableSaleSessionCreateInput, TableSaleSessionUncheckedCreateInput>
  }

  /**
   * TableSaleSession createMany
   */
  export type TableSaleSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TableSaleSessions.
     */
    data: TableSaleSessionCreateManyInput | TableSaleSessionCreateManyInput[]
  }

  /**
   * TableSaleSession createManyAndReturn
   */
  export type TableSaleSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableSaleSession
     */
    select?: TableSaleSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TableSaleSession
     */
    omit?: TableSaleSessionOmit<ExtArgs> | null
    /**
     * The data used to create many TableSaleSessions.
     */
    data: TableSaleSessionCreateManyInput | TableSaleSessionCreateManyInput[]
  }

  /**
   * TableSaleSession update
   */
  export type TableSaleSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableSaleSession
     */
    select?: TableSaleSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableSaleSession
     */
    omit?: TableSaleSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableSaleSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a TableSaleSession.
     */
    data: XOR<TableSaleSessionUpdateInput, TableSaleSessionUncheckedUpdateInput>
    /**
     * Choose, which TableSaleSession to update.
     */
    where: TableSaleSessionWhereUniqueInput
  }

  /**
   * TableSaleSession updateMany
   */
  export type TableSaleSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TableSaleSessions.
     */
    data: XOR<TableSaleSessionUpdateManyMutationInput, TableSaleSessionUncheckedUpdateManyInput>
    /**
     * Filter which TableSaleSessions to update
     */
    where?: TableSaleSessionWhereInput
    /**
     * Limit how many TableSaleSessions to update.
     */
    limit?: number
  }

  /**
   * TableSaleSession updateManyAndReturn
   */
  export type TableSaleSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableSaleSession
     */
    select?: TableSaleSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TableSaleSession
     */
    omit?: TableSaleSessionOmit<ExtArgs> | null
    /**
     * The data used to update TableSaleSessions.
     */
    data: XOR<TableSaleSessionUpdateManyMutationInput, TableSaleSessionUncheckedUpdateManyInput>
    /**
     * Filter which TableSaleSessions to update
     */
    where?: TableSaleSessionWhereInput
    /**
     * Limit how many TableSaleSessions to update.
     */
    limit?: number
  }

  /**
   * TableSaleSession upsert
   */
  export type TableSaleSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableSaleSession
     */
    select?: TableSaleSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableSaleSession
     */
    omit?: TableSaleSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableSaleSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the TableSaleSession to update in case it exists.
     */
    where: TableSaleSessionWhereUniqueInput
    /**
     * In case the TableSaleSession found by the `where` argument doesn't exist, create a new TableSaleSession with this data.
     */
    create: XOR<TableSaleSessionCreateInput, TableSaleSessionUncheckedCreateInput>
    /**
     * In case the TableSaleSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TableSaleSessionUpdateInput, TableSaleSessionUncheckedUpdateInput>
  }

  /**
   * TableSaleSession delete
   */
  export type TableSaleSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableSaleSession
     */
    select?: TableSaleSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableSaleSession
     */
    omit?: TableSaleSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableSaleSessionInclude<ExtArgs> | null
    /**
     * Filter which TableSaleSession to delete.
     */
    where: TableSaleSessionWhereUniqueInput
  }

  /**
   * TableSaleSession deleteMany
   */
  export type TableSaleSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TableSaleSessions to delete
     */
    where?: TableSaleSessionWhereInput
    /**
     * Limit how many TableSaleSessions to delete.
     */
    limit?: number
  }

  /**
   * TableSaleSession.bookSales
   */
  export type TableSaleSession$bookSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSale
     */
    select?: BookSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSale
     */
    omit?: BookSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleInclude<ExtArgs> | null
    where?: BookSaleWhereInput
    orderBy?: BookSaleOrderByWithRelationInput | BookSaleOrderByWithRelationInput[]
    cursor?: BookSaleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookSaleScalarFieldEnum | BookSaleScalarFieldEnum[]
  }

  /**
   * TableSaleSession.mySessions
   */
  export type TableSaleSession$mySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionInclude<ExtArgs> | null
    where?: MySessionWhereInput
    orderBy?: MySessionOrderByWithRelationInput | MySessionOrderByWithRelationInput[]
    cursor?: MySessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MySessionScalarFieldEnum | MySessionScalarFieldEnum[]
  }

  /**
   * TableSaleSession without action
   */
  export type TableSaleSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableSaleSession
     */
    select?: TableSaleSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableSaleSession
     */
    omit?: TableSaleSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableSaleSessionInclude<ExtArgs> | null
  }


  /**
   * Model MySession
   */

  export type AggregateMySession = {
    _count: MySessionCountAggregateOutputType | null
    _min: MySessionMinAggregateOutputType | null
    _max: MySessionMaxAggregateOutputType | null
  }

  export type MySessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    session: string | null
    workspace: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    tableSaleSessionId: string | null
    miniStoreSessionId: string | null
    mainStoreSessionId: string | null
    preorderSessionId: string | null
  }

  export type MySessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    session: string | null
    workspace: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    tableSaleSessionId: string | null
    miniStoreSessionId: string | null
    mainStoreSessionId: string | null
    preorderSessionId: string | null
  }

  export type MySessionCountAggregateOutputType = {
    id: number
    userId: number
    session: number
    workspace: number
    data: number
    isActive: number
    createdAt: number
    updatedAt: number
    tableSaleSessionId: number
    miniStoreSessionId: number
    mainStoreSessionId: number
    preorderSessionId: number
    _all: number
  }


  export type MySessionMinAggregateInputType = {
    id?: true
    userId?: true
    session?: true
    workspace?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    tableSaleSessionId?: true
    miniStoreSessionId?: true
    mainStoreSessionId?: true
    preorderSessionId?: true
  }

  export type MySessionMaxAggregateInputType = {
    id?: true
    userId?: true
    session?: true
    workspace?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    tableSaleSessionId?: true
    miniStoreSessionId?: true
    mainStoreSessionId?: true
    preorderSessionId?: true
  }

  export type MySessionCountAggregateInputType = {
    id?: true
    userId?: true
    session?: true
    workspace?: true
    data?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    tableSaleSessionId?: true
    miniStoreSessionId?: true
    mainStoreSessionId?: true
    preorderSessionId?: true
    _all?: true
  }

  export type MySessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MySession to aggregate.
     */
    where?: MySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MySessions to fetch.
     */
    orderBy?: MySessionOrderByWithRelationInput | MySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MySessions
    **/
    _count?: true | MySessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MySessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MySessionMaxAggregateInputType
  }

  export type GetMySessionAggregateType<T extends MySessionAggregateArgs> = {
        [P in keyof T & keyof AggregateMySession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMySession[P]>
      : GetScalarType<T[P], AggregateMySession[P]>
  }




  export type MySessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MySessionWhereInput
    orderBy?: MySessionOrderByWithAggregationInput | MySessionOrderByWithAggregationInput[]
    by: MySessionScalarFieldEnum[] | MySessionScalarFieldEnum
    having?: MySessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MySessionCountAggregateInputType | true
    _min?: MySessionMinAggregateInputType
    _max?: MySessionMaxAggregateInputType
  }

  export type MySessionGroupByOutputType = {
    id: string
    userId: string
    session: string
    workspace: string
    data: JsonValue | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    tableSaleSessionId: string | null
    miniStoreSessionId: string | null
    mainStoreSessionId: string | null
    preorderSessionId: string | null
    _count: MySessionCountAggregateOutputType | null
    _min: MySessionMinAggregateOutputType | null
    _max: MySessionMaxAggregateOutputType | null
  }

  type GetMySessionGroupByPayload<T extends MySessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MySessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MySessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MySessionGroupByOutputType[P]>
            : GetScalarType<T[P], MySessionGroupByOutputType[P]>
        }
      >
    >


  export type MySessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    session?: boolean
    workspace?: boolean
    data?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tableSaleSessionId?: boolean
    miniStoreSessionId?: boolean
    mainStoreSessionId?: boolean
    preorderSessionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tableSaleSession?: boolean | MySession$tableSaleSessionArgs<ExtArgs>
    miniStoreSession?: boolean | MySession$miniStoreSessionArgs<ExtArgs>
    mainStoreSession?: boolean | MySession$mainStoreSessionArgs<ExtArgs>
    preorderSession?: boolean | MySession$preorderSessionArgs<ExtArgs>
  }, ExtArgs["result"]["mySession"]>

  export type MySessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    session?: boolean
    workspace?: boolean
    data?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tableSaleSessionId?: boolean
    miniStoreSessionId?: boolean
    mainStoreSessionId?: boolean
    preorderSessionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tableSaleSession?: boolean | MySession$tableSaleSessionArgs<ExtArgs>
    miniStoreSession?: boolean | MySession$miniStoreSessionArgs<ExtArgs>
    mainStoreSession?: boolean | MySession$mainStoreSessionArgs<ExtArgs>
    preorderSession?: boolean | MySession$preorderSessionArgs<ExtArgs>
  }, ExtArgs["result"]["mySession"]>

  export type MySessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    session?: boolean
    workspace?: boolean
    data?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tableSaleSessionId?: boolean
    miniStoreSessionId?: boolean
    mainStoreSessionId?: boolean
    preorderSessionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tableSaleSession?: boolean | MySession$tableSaleSessionArgs<ExtArgs>
    miniStoreSession?: boolean | MySession$miniStoreSessionArgs<ExtArgs>
    mainStoreSession?: boolean | MySession$mainStoreSessionArgs<ExtArgs>
    preorderSession?: boolean | MySession$preorderSessionArgs<ExtArgs>
  }, ExtArgs["result"]["mySession"]>

  export type MySessionSelectScalar = {
    id?: boolean
    userId?: boolean
    session?: boolean
    workspace?: boolean
    data?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tableSaleSessionId?: boolean
    miniStoreSessionId?: boolean
    mainStoreSessionId?: boolean
    preorderSessionId?: boolean
  }

  export type MySessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "session" | "workspace" | "data" | "isActive" | "createdAt" | "updatedAt" | "tableSaleSessionId" | "miniStoreSessionId" | "mainStoreSessionId" | "preorderSessionId", ExtArgs["result"]["mySession"]>
  export type MySessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tableSaleSession?: boolean | MySession$tableSaleSessionArgs<ExtArgs>
    miniStoreSession?: boolean | MySession$miniStoreSessionArgs<ExtArgs>
    mainStoreSession?: boolean | MySession$mainStoreSessionArgs<ExtArgs>
    preorderSession?: boolean | MySession$preorderSessionArgs<ExtArgs>
  }
  export type MySessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tableSaleSession?: boolean | MySession$tableSaleSessionArgs<ExtArgs>
    miniStoreSession?: boolean | MySession$miniStoreSessionArgs<ExtArgs>
    mainStoreSession?: boolean | MySession$mainStoreSessionArgs<ExtArgs>
    preorderSession?: boolean | MySession$preorderSessionArgs<ExtArgs>
  }
  export type MySessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tableSaleSession?: boolean | MySession$tableSaleSessionArgs<ExtArgs>
    miniStoreSession?: boolean | MySession$miniStoreSessionArgs<ExtArgs>
    mainStoreSession?: boolean | MySession$mainStoreSessionArgs<ExtArgs>
    preorderSession?: boolean | MySession$preorderSessionArgs<ExtArgs>
  }

  export type $MySessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MySession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      tableSaleSession: Prisma.$TableSaleSessionPayload<ExtArgs> | null
      miniStoreSession: Prisma.$MiniStoreSessionPayload<ExtArgs> | null
      mainStoreSession: Prisma.$MainStoreSessionPayload<ExtArgs> | null
      preorderSession: Prisma.$PreorderSessionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      session: string
      workspace: string
      data: Prisma.JsonValue | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      tableSaleSessionId: string | null
      miniStoreSessionId: string | null
      mainStoreSessionId: string | null
      preorderSessionId: string | null
    }, ExtArgs["result"]["mySession"]>
    composites: {}
  }

  type MySessionGetPayload<S extends boolean | null | undefined | MySessionDefaultArgs> = $Result.GetResult<Prisma.$MySessionPayload, S>

  type MySessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MySessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MySessionCountAggregateInputType | true
    }

  export interface MySessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MySession'], meta: { name: 'MySession' } }
    /**
     * Find zero or one MySession that matches the filter.
     * @param {MySessionFindUniqueArgs} args - Arguments to find a MySession
     * @example
     * // Get one MySession
     * const mySession = await prisma.mySession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MySessionFindUniqueArgs>(args: SelectSubset<T, MySessionFindUniqueArgs<ExtArgs>>): Prisma__MySessionClient<$Result.GetResult<Prisma.$MySessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MySession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MySessionFindUniqueOrThrowArgs} args - Arguments to find a MySession
     * @example
     * // Get one MySession
     * const mySession = await prisma.mySession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MySessionFindUniqueOrThrowArgs>(args: SelectSubset<T, MySessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MySessionClient<$Result.GetResult<Prisma.$MySessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MySession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MySessionFindFirstArgs} args - Arguments to find a MySession
     * @example
     * // Get one MySession
     * const mySession = await prisma.mySession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MySessionFindFirstArgs>(args?: SelectSubset<T, MySessionFindFirstArgs<ExtArgs>>): Prisma__MySessionClient<$Result.GetResult<Prisma.$MySessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MySession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MySessionFindFirstOrThrowArgs} args - Arguments to find a MySession
     * @example
     * // Get one MySession
     * const mySession = await prisma.mySession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MySessionFindFirstOrThrowArgs>(args?: SelectSubset<T, MySessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MySessionClient<$Result.GetResult<Prisma.$MySessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MySessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MySessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MySessions
     * const mySessions = await prisma.mySession.findMany()
     * 
     * // Get first 10 MySessions
     * const mySessions = await prisma.mySession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mySessionWithIdOnly = await prisma.mySession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MySessionFindManyArgs>(args?: SelectSubset<T, MySessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MySessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MySession.
     * @param {MySessionCreateArgs} args - Arguments to create a MySession.
     * @example
     * // Create one MySession
     * const MySession = await prisma.mySession.create({
     *   data: {
     *     // ... data to create a MySession
     *   }
     * })
     * 
     */
    create<T extends MySessionCreateArgs>(args: SelectSubset<T, MySessionCreateArgs<ExtArgs>>): Prisma__MySessionClient<$Result.GetResult<Prisma.$MySessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MySessions.
     * @param {MySessionCreateManyArgs} args - Arguments to create many MySessions.
     * @example
     * // Create many MySessions
     * const mySession = await prisma.mySession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MySessionCreateManyArgs>(args?: SelectSubset<T, MySessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MySessions and returns the data saved in the database.
     * @param {MySessionCreateManyAndReturnArgs} args - Arguments to create many MySessions.
     * @example
     * // Create many MySessions
     * const mySession = await prisma.mySession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MySessions and only return the `id`
     * const mySessionWithIdOnly = await prisma.mySession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MySessionCreateManyAndReturnArgs>(args?: SelectSubset<T, MySessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MySessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MySession.
     * @param {MySessionDeleteArgs} args - Arguments to delete one MySession.
     * @example
     * // Delete one MySession
     * const MySession = await prisma.mySession.delete({
     *   where: {
     *     // ... filter to delete one MySession
     *   }
     * })
     * 
     */
    delete<T extends MySessionDeleteArgs>(args: SelectSubset<T, MySessionDeleteArgs<ExtArgs>>): Prisma__MySessionClient<$Result.GetResult<Prisma.$MySessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MySession.
     * @param {MySessionUpdateArgs} args - Arguments to update one MySession.
     * @example
     * // Update one MySession
     * const mySession = await prisma.mySession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MySessionUpdateArgs>(args: SelectSubset<T, MySessionUpdateArgs<ExtArgs>>): Prisma__MySessionClient<$Result.GetResult<Prisma.$MySessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MySessions.
     * @param {MySessionDeleteManyArgs} args - Arguments to filter MySessions to delete.
     * @example
     * // Delete a few MySessions
     * const { count } = await prisma.mySession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MySessionDeleteManyArgs>(args?: SelectSubset<T, MySessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MySessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MySessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MySessions
     * const mySession = await prisma.mySession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MySessionUpdateManyArgs>(args: SelectSubset<T, MySessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MySessions and returns the data updated in the database.
     * @param {MySessionUpdateManyAndReturnArgs} args - Arguments to update many MySessions.
     * @example
     * // Update many MySessions
     * const mySession = await prisma.mySession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MySessions and only return the `id`
     * const mySessionWithIdOnly = await prisma.mySession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MySessionUpdateManyAndReturnArgs>(args: SelectSubset<T, MySessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MySessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MySession.
     * @param {MySessionUpsertArgs} args - Arguments to update or create a MySession.
     * @example
     * // Update or create a MySession
     * const mySession = await prisma.mySession.upsert({
     *   create: {
     *     // ... data to create a MySession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MySession we want to update
     *   }
     * })
     */
    upsert<T extends MySessionUpsertArgs>(args: SelectSubset<T, MySessionUpsertArgs<ExtArgs>>): Prisma__MySessionClient<$Result.GetResult<Prisma.$MySessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MySessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MySessionCountArgs} args - Arguments to filter MySessions to count.
     * @example
     * // Count the number of MySessions
     * const count = await prisma.mySession.count({
     *   where: {
     *     // ... the filter for the MySessions we want to count
     *   }
     * })
    **/
    count<T extends MySessionCountArgs>(
      args?: Subset<T, MySessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MySessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MySession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MySessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MySessionAggregateArgs>(args: Subset<T, MySessionAggregateArgs>): Prisma.PrismaPromise<GetMySessionAggregateType<T>>

    /**
     * Group by MySession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MySessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MySessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MySessionGroupByArgs['orderBy'] }
        : { orderBy?: MySessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MySessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMySessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MySession model
   */
  readonly fields: MySessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MySession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MySessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tableSaleSession<T extends MySession$tableSaleSessionArgs<ExtArgs> = {}>(args?: Subset<T, MySession$tableSaleSessionArgs<ExtArgs>>): Prisma__TableSaleSessionClient<$Result.GetResult<Prisma.$TableSaleSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    miniStoreSession<T extends MySession$miniStoreSessionArgs<ExtArgs> = {}>(args?: Subset<T, MySession$miniStoreSessionArgs<ExtArgs>>): Prisma__MiniStoreSessionClient<$Result.GetResult<Prisma.$MiniStoreSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    mainStoreSession<T extends MySession$mainStoreSessionArgs<ExtArgs> = {}>(args?: Subset<T, MySession$mainStoreSessionArgs<ExtArgs>>): Prisma__MainStoreSessionClient<$Result.GetResult<Prisma.$MainStoreSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    preorderSession<T extends MySession$preorderSessionArgs<ExtArgs> = {}>(args?: Subset<T, MySession$preorderSessionArgs<ExtArgs>>): Prisma__PreorderSessionClient<$Result.GetResult<Prisma.$PreorderSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MySession model
   */ 
  interface MySessionFieldRefs {
    readonly id: FieldRef<"MySession", 'String'>
    readonly userId: FieldRef<"MySession", 'String'>
    readonly session: FieldRef<"MySession", 'String'>
    readonly workspace: FieldRef<"MySession", 'String'>
    readonly data: FieldRef<"MySession", 'Json'>
    readonly isActive: FieldRef<"MySession", 'Boolean'>
    readonly createdAt: FieldRef<"MySession", 'DateTime'>
    readonly updatedAt: FieldRef<"MySession", 'DateTime'>
    readonly tableSaleSessionId: FieldRef<"MySession", 'String'>
    readonly miniStoreSessionId: FieldRef<"MySession", 'String'>
    readonly mainStoreSessionId: FieldRef<"MySession", 'String'>
    readonly preorderSessionId: FieldRef<"MySession", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MySession findUnique
   */
  export type MySessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionInclude<ExtArgs> | null
    /**
     * Filter, which MySession to fetch.
     */
    where: MySessionWhereUniqueInput
  }

  /**
   * MySession findUniqueOrThrow
   */
  export type MySessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionInclude<ExtArgs> | null
    /**
     * Filter, which MySession to fetch.
     */
    where: MySessionWhereUniqueInput
  }

  /**
   * MySession findFirst
   */
  export type MySessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionInclude<ExtArgs> | null
    /**
     * Filter, which MySession to fetch.
     */
    where?: MySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MySessions to fetch.
     */
    orderBy?: MySessionOrderByWithRelationInput | MySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MySessions.
     */
    cursor?: MySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MySessions.
     */
    distinct?: MySessionScalarFieldEnum | MySessionScalarFieldEnum[]
  }

  /**
   * MySession findFirstOrThrow
   */
  export type MySessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionInclude<ExtArgs> | null
    /**
     * Filter, which MySession to fetch.
     */
    where?: MySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MySessions to fetch.
     */
    orderBy?: MySessionOrderByWithRelationInput | MySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MySessions.
     */
    cursor?: MySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MySessions.
     */
    distinct?: MySessionScalarFieldEnum | MySessionScalarFieldEnum[]
  }

  /**
   * MySession findMany
   */
  export type MySessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionInclude<ExtArgs> | null
    /**
     * Filter, which MySessions to fetch.
     */
    where?: MySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MySessions to fetch.
     */
    orderBy?: MySessionOrderByWithRelationInput | MySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MySessions.
     */
    cursor?: MySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MySessions.
     */
    skip?: number
    distinct?: MySessionScalarFieldEnum | MySessionScalarFieldEnum[]
  }

  /**
   * MySession create
   */
  export type MySessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionInclude<ExtArgs> | null
    /**
     * The data needed to create a MySession.
     */
    data: XOR<MySessionCreateInput, MySessionUncheckedCreateInput>
  }

  /**
   * MySession createMany
   */
  export type MySessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MySessions.
     */
    data: MySessionCreateManyInput | MySessionCreateManyInput[]
  }

  /**
   * MySession createManyAndReturn
   */
  export type MySessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * The data used to create many MySessions.
     */
    data: MySessionCreateManyInput | MySessionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MySession update
   */
  export type MySessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionInclude<ExtArgs> | null
    /**
     * The data needed to update a MySession.
     */
    data: XOR<MySessionUpdateInput, MySessionUncheckedUpdateInput>
    /**
     * Choose, which MySession to update.
     */
    where: MySessionWhereUniqueInput
  }

  /**
   * MySession updateMany
   */
  export type MySessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MySessions.
     */
    data: XOR<MySessionUpdateManyMutationInput, MySessionUncheckedUpdateManyInput>
    /**
     * Filter which MySessions to update
     */
    where?: MySessionWhereInput
    /**
     * Limit how many MySessions to update.
     */
    limit?: number
  }

  /**
   * MySession updateManyAndReturn
   */
  export type MySessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * The data used to update MySessions.
     */
    data: XOR<MySessionUpdateManyMutationInput, MySessionUncheckedUpdateManyInput>
    /**
     * Filter which MySessions to update
     */
    where?: MySessionWhereInput
    /**
     * Limit how many MySessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MySession upsert
   */
  export type MySessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionInclude<ExtArgs> | null
    /**
     * The filter to search for the MySession to update in case it exists.
     */
    where: MySessionWhereUniqueInput
    /**
     * In case the MySession found by the `where` argument doesn't exist, create a new MySession with this data.
     */
    create: XOR<MySessionCreateInput, MySessionUncheckedCreateInput>
    /**
     * In case the MySession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MySessionUpdateInput, MySessionUncheckedUpdateInput>
  }

  /**
   * MySession delete
   */
  export type MySessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionInclude<ExtArgs> | null
    /**
     * Filter which MySession to delete.
     */
    where: MySessionWhereUniqueInput
  }

  /**
   * MySession deleteMany
   */
  export type MySessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MySessions to delete
     */
    where?: MySessionWhereInput
    /**
     * Limit how many MySessions to delete.
     */
    limit?: number
  }

  /**
   * MySession.tableSaleSession
   */
  export type MySession$tableSaleSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableSaleSession
     */
    select?: TableSaleSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableSaleSession
     */
    omit?: TableSaleSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableSaleSessionInclude<ExtArgs> | null
    where?: TableSaleSessionWhereInput
  }

  /**
   * MySession.miniStoreSession
   */
  export type MySession$miniStoreSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MiniStoreSession
     */
    select?: MiniStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MiniStoreSession
     */
    omit?: MiniStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MiniStoreSessionInclude<ExtArgs> | null
    where?: MiniStoreSessionWhereInput
  }

  /**
   * MySession.mainStoreSession
   */
  export type MySession$mainStoreSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainStoreSession
     */
    select?: MainStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainStoreSession
     */
    omit?: MainStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainStoreSessionInclude<ExtArgs> | null
    where?: MainStoreSessionWhereInput
  }

  /**
   * MySession.preorderSession
   */
  export type MySession$preorderSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreorderSession
     */
    select?: PreorderSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreorderSession
     */
    omit?: PreorderSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderSessionInclude<ExtArgs> | null
    where?: PreorderSessionWhereInput
  }

  /**
   * MySession without action
   */
  export type MySessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionInclude<ExtArgs> | null
  }


  /**
   * Model MiniStoreSession
   */

  export type AggregateMiniStoreSession = {
    _count: MiniStoreSessionCountAggregateOutputType | null
    _min: MiniStoreSessionMinAggregateOutputType | null
    _max: MiniStoreSessionMaxAggregateOutputType | null
  }

  export type MiniStoreSessionMinAggregateOutputType = {
    id: string | null
    session: string | null
    managerId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MiniStoreSessionMaxAggregateOutputType = {
    id: string | null
    session: string | null
    managerId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MiniStoreSessionCountAggregateOutputType = {
    id: number
    session: number
    managerId: number
    collectedData: number
    distributedData: number
    data: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MiniStoreSessionMinAggregateInputType = {
    id?: true
    session?: true
    managerId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MiniStoreSessionMaxAggregateInputType = {
    id?: true
    session?: true
    managerId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MiniStoreSessionCountAggregateInputType = {
    id?: true
    session?: true
    managerId?: true
    collectedData?: true
    distributedData?: true
    data?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MiniStoreSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MiniStoreSession to aggregate.
     */
    where?: MiniStoreSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MiniStoreSessions to fetch.
     */
    orderBy?: MiniStoreSessionOrderByWithRelationInput | MiniStoreSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MiniStoreSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MiniStoreSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MiniStoreSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MiniStoreSessions
    **/
    _count?: true | MiniStoreSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MiniStoreSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MiniStoreSessionMaxAggregateInputType
  }

  export type GetMiniStoreSessionAggregateType<T extends MiniStoreSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateMiniStoreSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMiniStoreSession[P]>
      : GetScalarType<T[P], AggregateMiniStoreSession[P]>
  }




  export type MiniStoreSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MiniStoreSessionWhereInput
    orderBy?: MiniStoreSessionOrderByWithAggregationInput | MiniStoreSessionOrderByWithAggregationInput[]
    by: MiniStoreSessionScalarFieldEnum[] | MiniStoreSessionScalarFieldEnum
    having?: MiniStoreSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MiniStoreSessionCountAggregateInputType | true
    _min?: MiniStoreSessionMinAggregateInputType
    _max?: MiniStoreSessionMaxAggregateInputType
  }

  export type MiniStoreSessionGroupByOutputType = {
    id: string
    session: string
    managerId: string | null
    collectedData: JsonValue | null
    distributedData: JsonValue | null
    data: JsonValue | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: MiniStoreSessionCountAggregateOutputType | null
    _min: MiniStoreSessionMinAggregateOutputType | null
    _max: MiniStoreSessionMaxAggregateOutputType | null
  }

  type GetMiniStoreSessionGroupByPayload<T extends MiniStoreSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MiniStoreSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MiniStoreSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MiniStoreSessionGroupByOutputType[P]>
            : GetScalarType<T[P], MiniStoreSessionGroupByOutputType[P]>
        }
      >
    >


  export type MiniStoreSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session?: boolean
    managerId?: boolean
    collectedData?: boolean
    distributedData?: boolean
    data?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mySessions?: boolean | MiniStoreSession$mySessionsArgs<ExtArgs>
    _count?: boolean | MiniStoreSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["miniStoreSession"]>

  export type MiniStoreSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session?: boolean
    managerId?: boolean
    collectedData?: boolean
    distributedData?: boolean
    data?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["miniStoreSession"]>

  export type MiniStoreSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session?: boolean
    managerId?: boolean
    collectedData?: boolean
    distributedData?: boolean
    data?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["miniStoreSession"]>

  export type MiniStoreSessionSelectScalar = {
    id?: boolean
    session?: boolean
    managerId?: boolean
    collectedData?: boolean
    distributedData?: boolean
    data?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MiniStoreSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "session" | "managerId" | "collectedData" | "distributedData" | "data" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["miniStoreSession"]>
  export type MiniStoreSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mySessions?: boolean | MiniStoreSession$mySessionsArgs<ExtArgs>
    _count?: boolean | MiniStoreSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MiniStoreSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MiniStoreSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MiniStoreSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MiniStoreSession"
    objects: {
      mySessions: Prisma.$MySessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      session: string
      managerId: string | null
      collectedData: Prisma.JsonValue | null
      distributedData: Prisma.JsonValue | null
      data: Prisma.JsonValue | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["miniStoreSession"]>
    composites: {}
  }

  type MiniStoreSessionGetPayload<S extends boolean | null | undefined | MiniStoreSessionDefaultArgs> = $Result.GetResult<Prisma.$MiniStoreSessionPayload, S>

  type MiniStoreSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MiniStoreSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MiniStoreSessionCountAggregateInputType | true
    }

  export interface MiniStoreSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MiniStoreSession'], meta: { name: 'MiniStoreSession' } }
    /**
     * Find zero or one MiniStoreSession that matches the filter.
     * @param {MiniStoreSessionFindUniqueArgs} args - Arguments to find a MiniStoreSession
     * @example
     * // Get one MiniStoreSession
     * const miniStoreSession = await prisma.miniStoreSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MiniStoreSessionFindUniqueArgs>(args: SelectSubset<T, MiniStoreSessionFindUniqueArgs<ExtArgs>>): Prisma__MiniStoreSessionClient<$Result.GetResult<Prisma.$MiniStoreSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MiniStoreSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MiniStoreSessionFindUniqueOrThrowArgs} args - Arguments to find a MiniStoreSession
     * @example
     * // Get one MiniStoreSession
     * const miniStoreSession = await prisma.miniStoreSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MiniStoreSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, MiniStoreSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MiniStoreSessionClient<$Result.GetResult<Prisma.$MiniStoreSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MiniStoreSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MiniStoreSessionFindFirstArgs} args - Arguments to find a MiniStoreSession
     * @example
     * // Get one MiniStoreSession
     * const miniStoreSession = await prisma.miniStoreSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MiniStoreSessionFindFirstArgs>(args?: SelectSubset<T, MiniStoreSessionFindFirstArgs<ExtArgs>>): Prisma__MiniStoreSessionClient<$Result.GetResult<Prisma.$MiniStoreSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MiniStoreSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MiniStoreSessionFindFirstOrThrowArgs} args - Arguments to find a MiniStoreSession
     * @example
     * // Get one MiniStoreSession
     * const miniStoreSession = await prisma.miniStoreSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MiniStoreSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, MiniStoreSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MiniStoreSessionClient<$Result.GetResult<Prisma.$MiniStoreSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MiniStoreSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MiniStoreSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MiniStoreSessions
     * const miniStoreSessions = await prisma.miniStoreSession.findMany()
     * 
     * // Get first 10 MiniStoreSessions
     * const miniStoreSessions = await prisma.miniStoreSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const miniStoreSessionWithIdOnly = await prisma.miniStoreSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MiniStoreSessionFindManyArgs>(args?: SelectSubset<T, MiniStoreSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MiniStoreSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MiniStoreSession.
     * @param {MiniStoreSessionCreateArgs} args - Arguments to create a MiniStoreSession.
     * @example
     * // Create one MiniStoreSession
     * const MiniStoreSession = await prisma.miniStoreSession.create({
     *   data: {
     *     // ... data to create a MiniStoreSession
     *   }
     * })
     * 
     */
    create<T extends MiniStoreSessionCreateArgs>(args: SelectSubset<T, MiniStoreSessionCreateArgs<ExtArgs>>): Prisma__MiniStoreSessionClient<$Result.GetResult<Prisma.$MiniStoreSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MiniStoreSessions.
     * @param {MiniStoreSessionCreateManyArgs} args - Arguments to create many MiniStoreSessions.
     * @example
     * // Create many MiniStoreSessions
     * const miniStoreSession = await prisma.miniStoreSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MiniStoreSessionCreateManyArgs>(args?: SelectSubset<T, MiniStoreSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MiniStoreSessions and returns the data saved in the database.
     * @param {MiniStoreSessionCreateManyAndReturnArgs} args - Arguments to create many MiniStoreSessions.
     * @example
     * // Create many MiniStoreSessions
     * const miniStoreSession = await prisma.miniStoreSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MiniStoreSessions and only return the `id`
     * const miniStoreSessionWithIdOnly = await prisma.miniStoreSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MiniStoreSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, MiniStoreSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MiniStoreSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MiniStoreSession.
     * @param {MiniStoreSessionDeleteArgs} args - Arguments to delete one MiniStoreSession.
     * @example
     * // Delete one MiniStoreSession
     * const MiniStoreSession = await prisma.miniStoreSession.delete({
     *   where: {
     *     // ... filter to delete one MiniStoreSession
     *   }
     * })
     * 
     */
    delete<T extends MiniStoreSessionDeleteArgs>(args: SelectSubset<T, MiniStoreSessionDeleteArgs<ExtArgs>>): Prisma__MiniStoreSessionClient<$Result.GetResult<Prisma.$MiniStoreSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MiniStoreSession.
     * @param {MiniStoreSessionUpdateArgs} args - Arguments to update one MiniStoreSession.
     * @example
     * // Update one MiniStoreSession
     * const miniStoreSession = await prisma.miniStoreSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MiniStoreSessionUpdateArgs>(args: SelectSubset<T, MiniStoreSessionUpdateArgs<ExtArgs>>): Prisma__MiniStoreSessionClient<$Result.GetResult<Prisma.$MiniStoreSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MiniStoreSessions.
     * @param {MiniStoreSessionDeleteManyArgs} args - Arguments to filter MiniStoreSessions to delete.
     * @example
     * // Delete a few MiniStoreSessions
     * const { count } = await prisma.miniStoreSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MiniStoreSessionDeleteManyArgs>(args?: SelectSubset<T, MiniStoreSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MiniStoreSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MiniStoreSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MiniStoreSessions
     * const miniStoreSession = await prisma.miniStoreSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MiniStoreSessionUpdateManyArgs>(args: SelectSubset<T, MiniStoreSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MiniStoreSessions and returns the data updated in the database.
     * @param {MiniStoreSessionUpdateManyAndReturnArgs} args - Arguments to update many MiniStoreSessions.
     * @example
     * // Update many MiniStoreSessions
     * const miniStoreSession = await prisma.miniStoreSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MiniStoreSessions and only return the `id`
     * const miniStoreSessionWithIdOnly = await prisma.miniStoreSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MiniStoreSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, MiniStoreSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MiniStoreSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MiniStoreSession.
     * @param {MiniStoreSessionUpsertArgs} args - Arguments to update or create a MiniStoreSession.
     * @example
     * // Update or create a MiniStoreSession
     * const miniStoreSession = await prisma.miniStoreSession.upsert({
     *   create: {
     *     // ... data to create a MiniStoreSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MiniStoreSession we want to update
     *   }
     * })
     */
    upsert<T extends MiniStoreSessionUpsertArgs>(args: SelectSubset<T, MiniStoreSessionUpsertArgs<ExtArgs>>): Prisma__MiniStoreSessionClient<$Result.GetResult<Prisma.$MiniStoreSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MiniStoreSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MiniStoreSessionCountArgs} args - Arguments to filter MiniStoreSessions to count.
     * @example
     * // Count the number of MiniStoreSessions
     * const count = await prisma.miniStoreSession.count({
     *   where: {
     *     // ... the filter for the MiniStoreSessions we want to count
     *   }
     * })
    **/
    count<T extends MiniStoreSessionCountArgs>(
      args?: Subset<T, MiniStoreSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MiniStoreSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MiniStoreSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MiniStoreSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MiniStoreSessionAggregateArgs>(args: Subset<T, MiniStoreSessionAggregateArgs>): Prisma.PrismaPromise<GetMiniStoreSessionAggregateType<T>>

    /**
     * Group by MiniStoreSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MiniStoreSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MiniStoreSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MiniStoreSessionGroupByArgs['orderBy'] }
        : { orderBy?: MiniStoreSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MiniStoreSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMiniStoreSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MiniStoreSession model
   */
  readonly fields: MiniStoreSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MiniStoreSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MiniStoreSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mySessions<T extends MiniStoreSession$mySessionsArgs<ExtArgs> = {}>(args?: Subset<T, MiniStoreSession$mySessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MySessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MiniStoreSession model
   */ 
  interface MiniStoreSessionFieldRefs {
    readonly id: FieldRef<"MiniStoreSession", 'String'>
    readonly session: FieldRef<"MiniStoreSession", 'String'>
    readonly managerId: FieldRef<"MiniStoreSession", 'String'>
    readonly collectedData: FieldRef<"MiniStoreSession", 'Json'>
    readonly distributedData: FieldRef<"MiniStoreSession", 'Json'>
    readonly data: FieldRef<"MiniStoreSession", 'Json'>
    readonly isActive: FieldRef<"MiniStoreSession", 'Boolean'>
    readonly createdAt: FieldRef<"MiniStoreSession", 'DateTime'>
    readonly updatedAt: FieldRef<"MiniStoreSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MiniStoreSession findUnique
   */
  export type MiniStoreSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MiniStoreSession
     */
    select?: MiniStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MiniStoreSession
     */
    omit?: MiniStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MiniStoreSessionInclude<ExtArgs> | null
    /**
     * Filter, which MiniStoreSession to fetch.
     */
    where: MiniStoreSessionWhereUniqueInput
  }

  /**
   * MiniStoreSession findUniqueOrThrow
   */
  export type MiniStoreSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MiniStoreSession
     */
    select?: MiniStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MiniStoreSession
     */
    omit?: MiniStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MiniStoreSessionInclude<ExtArgs> | null
    /**
     * Filter, which MiniStoreSession to fetch.
     */
    where: MiniStoreSessionWhereUniqueInput
  }

  /**
   * MiniStoreSession findFirst
   */
  export type MiniStoreSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MiniStoreSession
     */
    select?: MiniStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MiniStoreSession
     */
    omit?: MiniStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MiniStoreSessionInclude<ExtArgs> | null
    /**
     * Filter, which MiniStoreSession to fetch.
     */
    where?: MiniStoreSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MiniStoreSessions to fetch.
     */
    orderBy?: MiniStoreSessionOrderByWithRelationInput | MiniStoreSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MiniStoreSessions.
     */
    cursor?: MiniStoreSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MiniStoreSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MiniStoreSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MiniStoreSessions.
     */
    distinct?: MiniStoreSessionScalarFieldEnum | MiniStoreSessionScalarFieldEnum[]
  }

  /**
   * MiniStoreSession findFirstOrThrow
   */
  export type MiniStoreSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MiniStoreSession
     */
    select?: MiniStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MiniStoreSession
     */
    omit?: MiniStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MiniStoreSessionInclude<ExtArgs> | null
    /**
     * Filter, which MiniStoreSession to fetch.
     */
    where?: MiniStoreSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MiniStoreSessions to fetch.
     */
    orderBy?: MiniStoreSessionOrderByWithRelationInput | MiniStoreSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MiniStoreSessions.
     */
    cursor?: MiniStoreSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MiniStoreSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MiniStoreSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MiniStoreSessions.
     */
    distinct?: MiniStoreSessionScalarFieldEnum | MiniStoreSessionScalarFieldEnum[]
  }

  /**
   * MiniStoreSession findMany
   */
  export type MiniStoreSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MiniStoreSession
     */
    select?: MiniStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MiniStoreSession
     */
    omit?: MiniStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MiniStoreSessionInclude<ExtArgs> | null
    /**
     * Filter, which MiniStoreSessions to fetch.
     */
    where?: MiniStoreSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MiniStoreSessions to fetch.
     */
    orderBy?: MiniStoreSessionOrderByWithRelationInput | MiniStoreSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MiniStoreSessions.
     */
    cursor?: MiniStoreSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MiniStoreSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MiniStoreSessions.
     */
    skip?: number
    distinct?: MiniStoreSessionScalarFieldEnum | MiniStoreSessionScalarFieldEnum[]
  }

  /**
   * MiniStoreSession create
   */
  export type MiniStoreSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MiniStoreSession
     */
    select?: MiniStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MiniStoreSession
     */
    omit?: MiniStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MiniStoreSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a MiniStoreSession.
     */
    data: XOR<MiniStoreSessionCreateInput, MiniStoreSessionUncheckedCreateInput>
  }

  /**
   * MiniStoreSession createMany
   */
  export type MiniStoreSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MiniStoreSessions.
     */
    data: MiniStoreSessionCreateManyInput | MiniStoreSessionCreateManyInput[]
  }

  /**
   * MiniStoreSession createManyAndReturn
   */
  export type MiniStoreSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MiniStoreSession
     */
    select?: MiniStoreSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MiniStoreSession
     */
    omit?: MiniStoreSessionOmit<ExtArgs> | null
    /**
     * The data used to create many MiniStoreSessions.
     */
    data: MiniStoreSessionCreateManyInput | MiniStoreSessionCreateManyInput[]
  }

  /**
   * MiniStoreSession update
   */
  export type MiniStoreSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MiniStoreSession
     */
    select?: MiniStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MiniStoreSession
     */
    omit?: MiniStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MiniStoreSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a MiniStoreSession.
     */
    data: XOR<MiniStoreSessionUpdateInput, MiniStoreSessionUncheckedUpdateInput>
    /**
     * Choose, which MiniStoreSession to update.
     */
    where: MiniStoreSessionWhereUniqueInput
  }

  /**
   * MiniStoreSession updateMany
   */
  export type MiniStoreSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MiniStoreSessions.
     */
    data: XOR<MiniStoreSessionUpdateManyMutationInput, MiniStoreSessionUncheckedUpdateManyInput>
    /**
     * Filter which MiniStoreSessions to update
     */
    where?: MiniStoreSessionWhereInput
    /**
     * Limit how many MiniStoreSessions to update.
     */
    limit?: number
  }

  /**
   * MiniStoreSession updateManyAndReturn
   */
  export type MiniStoreSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MiniStoreSession
     */
    select?: MiniStoreSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MiniStoreSession
     */
    omit?: MiniStoreSessionOmit<ExtArgs> | null
    /**
     * The data used to update MiniStoreSessions.
     */
    data: XOR<MiniStoreSessionUpdateManyMutationInput, MiniStoreSessionUncheckedUpdateManyInput>
    /**
     * Filter which MiniStoreSessions to update
     */
    where?: MiniStoreSessionWhereInput
    /**
     * Limit how many MiniStoreSessions to update.
     */
    limit?: number
  }

  /**
   * MiniStoreSession upsert
   */
  export type MiniStoreSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MiniStoreSession
     */
    select?: MiniStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MiniStoreSession
     */
    omit?: MiniStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MiniStoreSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the MiniStoreSession to update in case it exists.
     */
    where: MiniStoreSessionWhereUniqueInput
    /**
     * In case the MiniStoreSession found by the `where` argument doesn't exist, create a new MiniStoreSession with this data.
     */
    create: XOR<MiniStoreSessionCreateInput, MiniStoreSessionUncheckedCreateInput>
    /**
     * In case the MiniStoreSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MiniStoreSessionUpdateInput, MiniStoreSessionUncheckedUpdateInput>
  }

  /**
   * MiniStoreSession delete
   */
  export type MiniStoreSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MiniStoreSession
     */
    select?: MiniStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MiniStoreSession
     */
    omit?: MiniStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MiniStoreSessionInclude<ExtArgs> | null
    /**
     * Filter which MiniStoreSession to delete.
     */
    where: MiniStoreSessionWhereUniqueInput
  }

  /**
   * MiniStoreSession deleteMany
   */
  export type MiniStoreSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MiniStoreSessions to delete
     */
    where?: MiniStoreSessionWhereInput
    /**
     * Limit how many MiniStoreSessions to delete.
     */
    limit?: number
  }

  /**
   * MiniStoreSession.mySessions
   */
  export type MiniStoreSession$mySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionInclude<ExtArgs> | null
    where?: MySessionWhereInput
    orderBy?: MySessionOrderByWithRelationInput | MySessionOrderByWithRelationInput[]
    cursor?: MySessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MySessionScalarFieldEnum | MySessionScalarFieldEnum[]
  }

  /**
   * MiniStoreSession without action
   */
  export type MiniStoreSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MiniStoreSession
     */
    select?: MiniStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MiniStoreSession
     */
    omit?: MiniStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MiniStoreSessionInclude<ExtArgs> | null
  }


  /**
   * Model MainStoreSession
   */

  export type AggregateMainStoreSession = {
    _count: MainStoreSessionCountAggregateOutputType | null
    _min: MainStoreSessionMinAggregateOutputType | null
    _max: MainStoreSessionMaxAggregateOutputType | null
  }

  export type MainStoreSessionMinAggregateOutputType = {
    id: string | null
    name: string | null
    session: string | null
    managerId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MainStoreSessionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    session: string | null
    managerId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MainStoreSessionCountAggregateOutputType = {
    id: number
    name: number
    session: number
    managerId: number
    collectedData: number
    distributedData: number
    data: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MainStoreSessionMinAggregateInputType = {
    id?: true
    name?: true
    session?: true
    managerId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MainStoreSessionMaxAggregateInputType = {
    id?: true
    name?: true
    session?: true
    managerId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MainStoreSessionCountAggregateInputType = {
    id?: true
    name?: true
    session?: true
    managerId?: true
    collectedData?: true
    distributedData?: true
    data?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MainStoreSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MainStoreSession to aggregate.
     */
    where?: MainStoreSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MainStoreSessions to fetch.
     */
    orderBy?: MainStoreSessionOrderByWithRelationInput | MainStoreSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MainStoreSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MainStoreSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MainStoreSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MainStoreSessions
    **/
    _count?: true | MainStoreSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MainStoreSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MainStoreSessionMaxAggregateInputType
  }

  export type GetMainStoreSessionAggregateType<T extends MainStoreSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateMainStoreSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMainStoreSession[P]>
      : GetScalarType<T[P], AggregateMainStoreSession[P]>
  }




  export type MainStoreSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MainStoreSessionWhereInput
    orderBy?: MainStoreSessionOrderByWithAggregationInput | MainStoreSessionOrderByWithAggregationInput[]
    by: MainStoreSessionScalarFieldEnum[] | MainStoreSessionScalarFieldEnum
    having?: MainStoreSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MainStoreSessionCountAggregateInputType | true
    _min?: MainStoreSessionMinAggregateInputType
    _max?: MainStoreSessionMaxAggregateInputType
  }

  export type MainStoreSessionGroupByOutputType = {
    id: string
    name: string
    session: string
    managerId: string | null
    collectedData: JsonValue | null
    distributedData: JsonValue | null
    data: JsonValue | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: MainStoreSessionCountAggregateOutputType | null
    _min: MainStoreSessionMinAggregateOutputType | null
    _max: MainStoreSessionMaxAggregateOutputType | null
  }

  type GetMainStoreSessionGroupByPayload<T extends MainStoreSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MainStoreSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MainStoreSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MainStoreSessionGroupByOutputType[P]>
            : GetScalarType<T[P], MainStoreSessionGroupByOutputType[P]>
        }
      >
    >


  export type MainStoreSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    session?: boolean
    managerId?: boolean
    collectedData?: boolean
    distributedData?: boolean
    data?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mySessions?: boolean | MainStoreSession$mySessionsArgs<ExtArgs>
    _count?: boolean | MainStoreSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mainStoreSession"]>

  export type MainStoreSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    session?: boolean
    managerId?: boolean
    collectedData?: boolean
    distributedData?: boolean
    data?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["mainStoreSession"]>

  export type MainStoreSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    session?: boolean
    managerId?: boolean
    collectedData?: boolean
    distributedData?: boolean
    data?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["mainStoreSession"]>

  export type MainStoreSessionSelectScalar = {
    id?: boolean
    name?: boolean
    session?: boolean
    managerId?: boolean
    collectedData?: boolean
    distributedData?: boolean
    data?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MainStoreSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "session" | "managerId" | "collectedData" | "distributedData" | "data" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["mainStoreSession"]>
  export type MainStoreSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mySessions?: boolean | MainStoreSession$mySessionsArgs<ExtArgs>
    _count?: boolean | MainStoreSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MainStoreSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MainStoreSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MainStoreSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MainStoreSession"
    objects: {
      mySessions: Prisma.$MySessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      session: string
      managerId: string | null
      collectedData: Prisma.JsonValue | null
      distributedData: Prisma.JsonValue | null
      data: Prisma.JsonValue | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mainStoreSession"]>
    composites: {}
  }

  type MainStoreSessionGetPayload<S extends boolean | null | undefined | MainStoreSessionDefaultArgs> = $Result.GetResult<Prisma.$MainStoreSessionPayload, S>

  type MainStoreSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MainStoreSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MainStoreSessionCountAggregateInputType | true
    }

  export interface MainStoreSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MainStoreSession'], meta: { name: 'MainStoreSession' } }
    /**
     * Find zero or one MainStoreSession that matches the filter.
     * @param {MainStoreSessionFindUniqueArgs} args - Arguments to find a MainStoreSession
     * @example
     * // Get one MainStoreSession
     * const mainStoreSession = await prisma.mainStoreSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MainStoreSessionFindUniqueArgs>(args: SelectSubset<T, MainStoreSessionFindUniqueArgs<ExtArgs>>): Prisma__MainStoreSessionClient<$Result.GetResult<Prisma.$MainStoreSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MainStoreSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MainStoreSessionFindUniqueOrThrowArgs} args - Arguments to find a MainStoreSession
     * @example
     * // Get one MainStoreSession
     * const mainStoreSession = await prisma.mainStoreSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MainStoreSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, MainStoreSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MainStoreSessionClient<$Result.GetResult<Prisma.$MainStoreSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MainStoreSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MainStoreSessionFindFirstArgs} args - Arguments to find a MainStoreSession
     * @example
     * // Get one MainStoreSession
     * const mainStoreSession = await prisma.mainStoreSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MainStoreSessionFindFirstArgs>(args?: SelectSubset<T, MainStoreSessionFindFirstArgs<ExtArgs>>): Prisma__MainStoreSessionClient<$Result.GetResult<Prisma.$MainStoreSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MainStoreSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MainStoreSessionFindFirstOrThrowArgs} args - Arguments to find a MainStoreSession
     * @example
     * // Get one MainStoreSession
     * const mainStoreSession = await prisma.mainStoreSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MainStoreSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, MainStoreSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MainStoreSessionClient<$Result.GetResult<Prisma.$MainStoreSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MainStoreSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MainStoreSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MainStoreSessions
     * const mainStoreSessions = await prisma.mainStoreSession.findMany()
     * 
     * // Get first 10 MainStoreSessions
     * const mainStoreSessions = await prisma.mainStoreSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mainStoreSessionWithIdOnly = await prisma.mainStoreSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MainStoreSessionFindManyArgs>(args?: SelectSubset<T, MainStoreSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MainStoreSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MainStoreSession.
     * @param {MainStoreSessionCreateArgs} args - Arguments to create a MainStoreSession.
     * @example
     * // Create one MainStoreSession
     * const MainStoreSession = await prisma.mainStoreSession.create({
     *   data: {
     *     // ... data to create a MainStoreSession
     *   }
     * })
     * 
     */
    create<T extends MainStoreSessionCreateArgs>(args: SelectSubset<T, MainStoreSessionCreateArgs<ExtArgs>>): Prisma__MainStoreSessionClient<$Result.GetResult<Prisma.$MainStoreSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MainStoreSessions.
     * @param {MainStoreSessionCreateManyArgs} args - Arguments to create many MainStoreSessions.
     * @example
     * // Create many MainStoreSessions
     * const mainStoreSession = await prisma.mainStoreSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MainStoreSessionCreateManyArgs>(args?: SelectSubset<T, MainStoreSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MainStoreSessions and returns the data saved in the database.
     * @param {MainStoreSessionCreateManyAndReturnArgs} args - Arguments to create many MainStoreSessions.
     * @example
     * // Create many MainStoreSessions
     * const mainStoreSession = await prisma.mainStoreSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MainStoreSessions and only return the `id`
     * const mainStoreSessionWithIdOnly = await prisma.mainStoreSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MainStoreSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, MainStoreSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MainStoreSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MainStoreSession.
     * @param {MainStoreSessionDeleteArgs} args - Arguments to delete one MainStoreSession.
     * @example
     * // Delete one MainStoreSession
     * const MainStoreSession = await prisma.mainStoreSession.delete({
     *   where: {
     *     // ... filter to delete one MainStoreSession
     *   }
     * })
     * 
     */
    delete<T extends MainStoreSessionDeleteArgs>(args: SelectSubset<T, MainStoreSessionDeleteArgs<ExtArgs>>): Prisma__MainStoreSessionClient<$Result.GetResult<Prisma.$MainStoreSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MainStoreSession.
     * @param {MainStoreSessionUpdateArgs} args - Arguments to update one MainStoreSession.
     * @example
     * // Update one MainStoreSession
     * const mainStoreSession = await prisma.mainStoreSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MainStoreSessionUpdateArgs>(args: SelectSubset<T, MainStoreSessionUpdateArgs<ExtArgs>>): Prisma__MainStoreSessionClient<$Result.GetResult<Prisma.$MainStoreSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MainStoreSessions.
     * @param {MainStoreSessionDeleteManyArgs} args - Arguments to filter MainStoreSessions to delete.
     * @example
     * // Delete a few MainStoreSessions
     * const { count } = await prisma.mainStoreSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MainStoreSessionDeleteManyArgs>(args?: SelectSubset<T, MainStoreSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MainStoreSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MainStoreSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MainStoreSessions
     * const mainStoreSession = await prisma.mainStoreSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MainStoreSessionUpdateManyArgs>(args: SelectSubset<T, MainStoreSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MainStoreSessions and returns the data updated in the database.
     * @param {MainStoreSessionUpdateManyAndReturnArgs} args - Arguments to update many MainStoreSessions.
     * @example
     * // Update many MainStoreSessions
     * const mainStoreSession = await prisma.mainStoreSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MainStoreSessions and only return the `id`
     * const mainStoreSessionWithIdOnly = await prisma.mainStoreSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MainStoreSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, MainStoreSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MainStoreSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MainStoreSession.
     * @param {MainStoreSessionUpsertArgs} args - Arguments to update or create a MainStoreSession.
     * @example
     * // Update or create a MainStoreSession
     * const mainStoreSession = await prisma.mainStoreSession.upsert({
     *   create: {
     *     // ... data to create a MainStoreSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MainStoreSession we want to update
     *   }
     * })
     */
    upsert<T extends MainStoreSessionUpsertArgs>(args: SelectSubset<T, MainStoreSessionUpsertArgs<ExtArgs>>): Prisma__MainStoreSessionClient<$Result.GetResult<Prisma.$MainStoreSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MainStoreSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MainStoreSessionCountArgs} args - Arguments to filter MainStoreSessions to count.
     * @example
     * // Count the number of MainStoreSessions
     * const count = await prisma.mainStoreSession.count({
     *   where: {
     *     // ... the filter for the MainStoreSessions we want to count
     *   }
     * })
    **/
    count<T extends MainStoreSessionCountArgs>(
      args?: Subset<T, MainStoreSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MainStoreSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MainStoreSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MainStoreSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MainStoreSessionAggregateArgs>(args: Subset<T, MainStoreSessionAggregateArgs>): Prisma.PrismaPromise<GetMainStoreSessionAggregateType<T>>

    /**
     * Group by MainStoreSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MainStoreSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MainStoreSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MainStoreSessionGroupByArgs['orderBy'] }
        : { orderBy?: MainStoreSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MainStoreSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMainStoreSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MainStoreSession model
   */
  readonly fields: MainStoreSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MainStoreSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MainStoreSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mySessions<T extends MainStoreSession$mySessionsArgs<ExtArgs> = {}>(args?: Subset<T, MainStoreSession$mySessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MySessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MainStoreSession model
   */ 
  interface MainStoreSessionFieldRefs {
    readonly id: FieldRef<"MainStoreSession", 'String'>
    readonly name: FieldRef<"MainStoreSession", 'String'>
    readonly session: FieldRef<"MainStoreSession", 'String'>
    readonly managerId: FieldRef<"MainStoreSession", 'String'>
    readonly collectedData: FieldRef<"MainStoreSession", 'Json'>
    readonly distributedData: FieldRef<"MainStoreSession", 'Json'>
    readonly data: FieldRef<"MainStoreSession", 'Json'>
    readonly isActive: FieldRef<"MainStoreSession", 'Boolean'>
    readonly createdAt: FieldRef<"MainStoreSession", 'DateTime'>
    readonly updatedAt: FieldRef<"MainStoreSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MainStoreSession findUnique
   */
  export type MainStoreSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainStoreSession
     */
    select?: MainStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainStoreSession
     */
    omit?: MainStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainStoreSessionInclude<ExtArgs> | null
    /**
     * Filter, which MainStoreSession to fetch.
     */
    where: MainStoreSessionWhereUniqueInput
  }

  /**
   * MainStoreSession findUniqueOrThrow
   */
  export type MainStoreSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainStoreSession
     */
    select?: MainStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainStoreSession
     */
    omit?: MainStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainStoreSessionInclude<ExtArgs> | null
    /**
     * Filter, which MainStoreSession to fetch.
     */
    where: MainStoreSessionWhereUniqueInput
  }

  /**
   * MainStoreSession findFirst
   */
  export type MainStoreSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainStoreSession
     */
    select?: MainStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainStoreSession
     */
    omit?: MainStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainStoreSessionInclude<ExtArgs> | null
    /**
     * Filter, which MainStoreSession to fetch.
     */
    where?: MainStoreSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MainStoreSessions to fetch.
     */
    orderBy?: MainStoreSessionOrderByWithRelationInput | MainStoreSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MainStoreSessions.
     */
    cursor?: MainStoreSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MainStoreSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MainStoreSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MainStoreSessions.
     */
    distinct?: MainStoreSessionScalarFieldEnum | MainStoreSessionScalarFieldEnum[]
  }

  /**
   * MainStoreSession findFirstOrThrow
   */
  export type MainStoreSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainStoreSession
     */
    select?: MainStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainStoreSession
     */
    omit?: MainStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainStoreSessionInclude<ExtArgs> | null
    /**
     * Filter, which MainStoreSession to fetch.
     */
    where?: MainStoreSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MainStoreSessions to fetch.
     */
    orderBy?: MainStoreSessionOrderByWithRelationInput | MainStoreSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MainStoreSessions.
     */
    cursor?: MainStoreSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MainStoreSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MainStoreSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MainStoreSessions.
     */
    distinct?: MainStoreSessionScalarFieldEnum | MainStoreSessionScalarFieldEnum[]
  }

  /**
   * MainStoreSession findMany
   */
  export type MainStoreSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainStoreSession
     */
    select?: MainStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainStoreSession
     */
    omit?: MainStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainStoreSessionInclude<ExtArgs> | null
    /**
     * Filter, which MainStoreSessions to fetch.
     */
    where?: MainStoreSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MainStoreSessions to fetch.
     */
    orderBy?: MainStoreSessionOrderByWithRelationInput | MainStoreSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MainStoreSessions.
     */
    cursor?: MainStoreSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MainStoreSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MainStoreSessions.
     */
    skip?: number
    distinct?: MainStoreSessionScalarFieldEnum | MainStoreSessionScalarFieldEnum[]
  }

  /**
   * MainStoreSession create
   */
  export type MainStoreSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainStoreSession
     */
    select?: MainStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainStoreSession
     */
    omit?: MainStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainStoreSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a MainStoreSession.
     */
    data: XOR<MainStoreSessionCreateInput, MainStoreSessionUncheckedCreateInput>
  }

  /**
   * MainStoreSession createMany
   */
  export type MainStoreSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MainStoreSessions.
     */
    data: MainStoreSessionCreateManyInput | MainStoreSessionCreateManyInput[]
  }

  /**
   * MainStoreSession createManyAndReturn
   */
  export type MainStoreSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainStoreSession
     */
    select?: MainStoreSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MainStoreSession
     */
    omit?: MainStoreSessionOmit<ExtArgs> | null
    /**
     * The data used to create many MainStoreSessions.
     */
    data: MainStoreSessionCreateManyInput | MainStoreSessionCreateManyInput[]
  }

  /**
   * MainStoreSession update
   */
  export type MainStoreSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainStoreSession
     */
    select?: MainStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainStoreSession
     */
    omit?: MainStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainStoreSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a MainStoreSession.
     */
    data: XOR<MainStoreSessionUpdateInput, MainStoreSessionUncheckedUpdateInput>
    /**
     * Choose, which MainStoreSession to update.
     */
    where: MainStoreSessionWhereUniqueInput
  }

  /**
   * MainStoreSession updateMany
   */
  export type MainStoreSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MainStoreSessions.
     */
    data: XOR<MainStoreSessionUpdateManyMutationInput, MainStoreSessionUncheckedUpdateManyInput>
    /**
     * Filter which MainStoreSessions to update
     */
    where?: MainStoreSessionWhereInput
    /**
     * Limit how many MainStoreSessions to update.
     */
    limit?: number
  }

  /**
   * MainStoreSession updateManyAndReturn
   */
  export type MainStoreSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainStoreSession
     */
    select?: MainStoreSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MainStoreSession
     */
    omit?: MainStoreSessionOmit<ExtArgs> | null
    /**
     * The data used to update MainStoreSessions.
     */
    data: XOR<MainStoreSessionUpdateManyMutationInput, MainStoreSessionUncheckedUpdateManyInput>
    /**
     * Filter which MainStoreSessions to update
     */
    where?: MainStoreSessionWhereInput
    /**
     * Limit how many MainStoreSessions to update.
     */
    limit?: number
  }

  /**
   * MainStoreSession upsert
   */
  export type MainStoreSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainStoreSession
     */
    select?: MainStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainStoreSession
     */
    omit?: MainStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainStoreSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the MainStoreSession to update in case it exists.
     */
    where: MainStoreSessionWhereUniqueInput
    /**
     * In case the MainStoreSession found by the `where` argument doesn't exist, create a new MainStoreSession with this data.
     */
    create: XOR<MainStoreSessionCreateInput, MainStoreSessionUncheckedCreateInput>
    /**
     * In case the MainStoreSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MainStoreSessionUpdateInput, MainStoreSessionUncheckedUpdateInput>
  }

  /**
   * MainStoreSession delete
   */
  export type MainStoreSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainStoreSession
     */
    select?: MainStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainStoreSession
     */
    omit?: MainStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainStoreSessionInclude<ExtArgs> | null
    /**
     * Filter which MainStoreSession to delete.
     */
    where: MainStoreSessionWhereUniqueInput
  }

  /**
   * MainStoreSession deleteMany
   */
  export type MainStoreSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MainStoreSessions to delete
     */
    where?: MainStoreSessionWhereInput
    /**
     * Limit how many MainStoreSessions to delete.
     */
    limit?: number
  }

  /**
   * MainStoreSession.mySessions
   */
  export type MainStoreSession$mySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MySession
     */
    select?: MySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MySession
     */
    omit?: MySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MySessionInclude<ExtArgs> | null
    where?: MySessionWhereInput
    orderBy?: MySessionOrderByWithRelationInput | MySessionOrderByWithRelationInput[]
    cursor?: MySessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MySessionScalarFieldEnum | MySessionScalarFieldEnum[]
  }

  /**
   * MainStoreSession without action
   */
  export type MainStoreSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MainStoreSession
     */
    select?: MainStoreSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MainStoreSession
     */
    omit?: MainStoreSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MainStoreSessionInclude<ExtArgs> | null
  }


  /**
   * Model Book
   */

  export type AggregateBook = {
    _count: BookCountAggregateOutputType | null
    _avg: BookAvgAggregateOutputType | null
    _sum: BookSumAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  export type BookAvgAggregateOutputType = {
    total: number | null
    available: number | null
    preorderTotal: number | null
    preorderAvailable: number | null
    salesTotal: number | null
    salesAvailable: number | null
    price: number | null
  }

  export type BookSumAggregateOutputType = {
    total: number | null
    available: number | null
    preorderTotal: number | null
    preorderAvailable: number | null
    salesTotal: number | null
    salesAvailable: number | null
    price: number | null
  }

  export type BookMinAggregateOutputType = {
    id: string | null
    title: string | null
    total: number | null
    available: number | null
    preorderTotal: number | null
    preorderAvailable: number | null
    salesTotal: number | null
    salesAvailable: number | null
    price: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookMaxAggregateOutputType = {
    id: string | null
    title: string | null
    total: number | null
    available: number | null
    preorderTotal: number | null
    preorderAvailable: number | null
    salesTotal: number | null
    salesAvailable: number | null
    price: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookCountAggregateOutputType = {
    id: number
    title: number
    total: number
    available: number
    preorderTotal: number
    preorderAvailable: number
    salesTotal: number
    salesAvailable: number
    price: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookAvgAggregateInputType = {
    total?: true
    available?: true
    preorderTotal?: true
    preorderAvailable?: true
    salesTotal?: true
    salesAvailable?: true
    price?: true
  }

  export type BookSumAggregateInputType = {
    total?: true
    available?: true
    preorderTotal?: true
    preorderAvailable?: true
    salesTotal?: true
    salesAvailable?: true
    price?: true
  }

  export type BookMinAggregateInputType = {
    id?: true
    title?: true
    total?: true
    available?: true
    preorderTotal?: true
    preorderAvailable?: true
    salesTotal?: true
    salesAvailable?: true
    price?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookMaxAggregateInputType = {
    id?: true
    title?: true
    total?: true
    available?: true
    preorderTotal?: true
    preorderAvailable?: true
    salesTotal?: true
    salesAvailable?: true
    price?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookCountAggregateInputType = {
    id?: true
    title?: true
    total?: true
    available?: true
    preorderTotal?: true
    preorderAvailable?: true
    salesTotal?: true
    salesAvailable?: true
    price?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Book to aggregate.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Books
    **/
    _count?: true | BookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookMaxAggregateInputType
  }

  export type GetBookAggregateType<T extends BookAggregateArgs> = {
        [P in keyof T & keyof AggregateBook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBook[P]>
      : GetScalarType<T[P], AggregateBook[P]>
  }




  export type BookGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookWhereInput
    orderBy?: BookOrderByWithAggregationInput | BookOrderByWithAggregationInput[]
    by: BookScalarFieldEnum[] | BookScalarFieldEnum
    having?: BookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookCountAggregateInputType | true
    _avg?: BookAvgAggregateInputType
    _sum?: BookSumAggregateInputType
    _min?: BookMinAggregateInputType
    _max?: BookMaxAggregateInputType
  }

  export type BookGroupByOutputType = {
    id: string
    title: string
    total: number
    available: number
    preorderTotal: number
    preorderAvailable: number
    salesTotal: number
    salesAvailable: number
    price: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: BookCountAggregateOutputType | null
    _avg: BookAvgAggregateOutputType | null
    _sum: BookSumAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  type GetBookGroupByPayload<T extends BookGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookGroupByOutputType[P]>
            : GetScalarType<T[P], BookGroupByOutputType[P]>
        }
      >
    >


  export type BookSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    total?: boolean
    available?: boolean
    preorderTotal?: boolean
    preorderAvailable?: boolean
    salesTotal?: boolean
    salesAvailable?: boolean
    price?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sales?: boolean | Book$salesArgs<ExtArgs>
    preorders?: boolean | Book$preordersArgs<ExtArgs>
    _count?: boolean | BookCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["book"]>

  export type BookSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    total?: boolean
    available?: boolean
    preorderTotal?: boolean
    preorderAvailable?: boolean
    salesTotal?: boolean
    salesAvailable?: boolean
    price?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["book"]>

  export type BookSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    total?: boolean
    available?: boolean
    preorderTotal?: boolean
    preorderAvailable?: boolean
    salesTotal?: boolean
    salesAvailable?: boolean
    price?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["book"]>

  export type BookSelectScalar = {
    id?: boolean
    title?: boolean
    total?: boolean
    available?: boolean
    preorderTotal?: boolean
    preorderAvailable?: boolean
    salesTotal?: boolean
    salesAvailable?: boolean
    price?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BookOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "total" | "available" | "preorderTotal" | "preorderAvailable" | "salesTotal" | "salesAvailable" | "price" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["book"]>
  export type BookInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sales?: boolean | Book$salesArgs<ExtArgs>
    preorders?: boolean | Book$preordersArgs<ExtArgs>
    _count?: boolean | BookCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BookIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BookIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BookPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Book"
    objects: {
      sales: Prisma.$BookSaleItemPayload<ExtArgs>[]
      preorders: Prisma.$OrderItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      total: number
      available: number
      preorderTotal: number
      preorderAvailable: number
      salesTotal: number
      salesAvailable: number
      price: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["book"]>
    composites: {}
  }

  type BookGetPayload<S extends boolean | null | undefined | BookDefaultArgs> = $Result.GetResult<Prisma.$BookPayload, S>

  type BookCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookCountAggregateInputType | true
    }

  export interface BookDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Book'], meta: { name: 'Book' } }
    /**
     * Find zero or one Book that matches the filter.
     * @param {BookFindUniqueArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookFindUniqueArgs>(args: SelectSubset<T, BookFindUniqueArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Book that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookFindUniqueOrThrowArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookFindUniqueOrThrowArgs>(args: SelectSubset<T, BookFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Book that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookFindFirstArgs>(args?: SelectSubset<T, BookFindFirstArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Book that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstOrThrowArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookFindFirstOrThrowArgs>(args?: SelectSubset<T, BookFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Books
     * const books = await prisma.book.findMany()
     * 
     * // Get first 10 Books
     * const books = await prisma.book.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookWithIdOnly = await prisma.book.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookFindManyArgs>(args?: SelectSubset<T, BookFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Book.
     * @param {BookCreateArgs} args - Arguments to create a Book.
     * @example
     * // Create one Book
     * const Book = await prisma.book.create({
     *   data: {
     *     // ... data to create a Book
     *   }
     * })
     * 
     */
    create<T extends BookCreateArgs>(args: SelectSubset<T, BookCreateArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Books.
     * @param {BookCreateManyArgs} args - Arguments to create many Books.
     * @example
     * // Create many Books
     * const book = await prisma.book.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookCreateManyArgs>(args?: SelectSubset<T, BookCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Books and returns the data saved in the database.
     * @param {BookCreateManyAndReturnArgs} args - Arguments to create many Books.
     * @example
     * // Create many Books
     * const book = await prisma.book.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Books and only return the `id`
     * const bookWithIdOnly = await prisma.book.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookCreateManyAndReturnArgs>(args?: SelectSubset<T, BookCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Book.
     * @param {BookDeleteArgs} args - Arguments to delete one Book.
     * @example
     * // Delete one Book
     * const Book = await prisma.book.delete({
     *   where: {
     *     // ... filter to delete one Book
     *   }
     * })
     * 
     */
    delete<T extends BookDeleteArgs>(args: SelectSubset<T, BookDeleteArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Book.
     * @param {BookUpdateArgs} args - Arguments to update one Book.
     * @example
     * // Update one Book
     * const book = await prisma.book.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookUpdateArgs>(args: SelectSubset<T, BookUpdateArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Books.
     * @param {BookDeleteManyArgs} args - Arguments to filter Books to delete.
     * @example
     * // Delete a few Books
     * const { count } = await prisma.book.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookDeleteManyArgs>(args?: SelectSubset<T, BookDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Books
     * const book = await prisma.book.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookUpdateManyArgs>(args: SelectSubset<T, BookUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books and returns the data updated in the database.
     * @param {BookUpdateManyAndReturnArgs} args - Arguments to update many Books.
     * @example
     * // Update many Books
     * const book = await prisma.book.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Books and only return the `id`
     * const bookWithIdOnly = await prisma.book.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookUpdateManyAndReturnArgs>(args: SelectSubset<T, BookUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Book.
     * @param {BookUpsertArgs} args - Arguments to update or create a Book.
     * @example
     * // Update or create a Book
     * const book = await prisma.book.upsert({
     *   create: {
     *     // ... data to create a Book
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Book we want to update
     *   }
     * })
     */
    upsert<T extends BookUpsertArgs>(args: SelectSubset<T, BookUpsertArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookCountArgs} args - Arguments to filter Books to count.
     * @example
     * // Count the number of Books
     * const count = await prisma.book.count({
     *   where: {
     *     // ... the filter for the Books we want to count
     *   }
     * })
    **/
    count<T extends BookCountArgs>(
      args?: Subset<T, BookCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookAggregateArgs>(args: Subset<T, BookAggregateArgs>): Prisma.PrismaPromise<GetBookAggregateType<T>>

    /**
     * Group by Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookGroupByArgs['orderBy'] }
        : { orderBy?: BookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Book model
   */
  readonly fields: BookFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Book.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sales<T extends Book$salesArgs<ExtArgs> = {}>(args?: Subset<T, Book$salesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookSaleItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    preorders<T extends Book$preordersArgs<ExtArgs> = {}>(args?: Subset<T, Book$preordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Book model
   */ 
  interface BookFieldRefs {
    readonly id: FieldRef<"Book", 'String'>
    readonly title: FieldRef<"Book", 'String'>
    readonly total: FieldRef<"Book", 'Int'>
    readonly available: FieldRef<"Book", 'Int'>
    readonly preorderTotal: FieldRef<"Book", 'Int'>
    readonly preorderAvailable: FieldRef<"Book", 'Int'>
    readonly salesTotal: FieldRef<"Book", 'Int'>
    readonly salesAvailable: FieldRef<"Book", 'Int'>
    readonly price: FieldRef<"Book", 'Float'>
    readonly isActive: FieldRef<"Book", 'Boolean'>
    readonly createdAt: FieldRef<"Book", 'DateTime'>
    readonly updatedAt: FieldRef<"Book", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Book findUnique
   */
  export type BookFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book findUniqueOrThrow
   */
  export type BookFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book findFirst
   */
  export type BookFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Books.
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Books.
     */
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Book findFirstOrThrow
   */
  export type BookFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Books.
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Books.
     */
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Book findMany
   */
  export type BookFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Books to fetch.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Books.
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Book create
   */
  export type BookCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * The data needed to create a Book.
     */
    data: XOR<BookCreateInput, BookUncheckedCreateInput>
  }

  /**
   * Book createMany
   */
  export type BookCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Books.
     */
    data: BookCreateManyInput | BookCreateManyInput[]
  }

  /**
   * Book createManyAndReturn
   */
  export type BookCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * The data used to create many Books.
     */
    data: BookCreateManyInput | BookCreateManyInput[]
  }

  /**
   * Book update
   */
  export type BookUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * The data needed to update a Book.
     */
    data: XOR<BookUpdateInput, BookUncheckedUpdateInput>
    /**
     * Choose, which Book to update.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book updateMany
   */
  export type BookUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Books.
     */
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyInput>
    /**
     * Filter which Books to update
     */
    where?: BookWhereInput
    /**
     * Limit how many Books to update.
     */
    limit?: number
  }

  /**
   * Book updateManyAndReturn
   */
  export type BookUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * The data used to update Books.
     */
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyInput>
    /**
     * Filter which Books to update
     */
    where?: BookWhereInput
    /**
     * Limit how many Books to update.
     */
    limit?: number
  }

  /**
   * Book upsert
   */
  export type BookUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * The filter to search for the Book to update in case it exists.
     */
    where: BookWhereUniqueInput
    /**
     * In case the Book found by the `where` argument doesn't exist, create a new Book with this data.
     */
    create: XOR<BookCreateInput, BookUncheckedCreateInput>
    /**
     * In case the Book was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookUpdateInput, BookUncheckedUpdateInput>
  }

  /**
   * Book delete
   */
  export type BookDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter which Book to delete.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book deleteMany
   */
  export type BookDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Books to delete
     */
    where?: BookWhereInput
    /**
     * Limit how many Books to delete.
     */
    limit?: number
  }

  /**
   * Book.sales
   */
  export type Book$salesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSaleItem
     */
    select?: BookSaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSaleItem
     */
    omit?: BookSaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleItemInclude<ExtArgs> | null
    where?: BookSaleItemWhereInput
    orderBy?: BookSaleItemOrderByWithRelationInput | BookSaleItemOrderByWithRelationInput[]
    cursor?: BookSaleItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookSaleItemScalarFieldEnum | BookSaleItemScalarFieldEnum[]
  }

  /**
   * Book.preorders
   */
  export type Book$preordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Book without action
   */
  export type BookDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
  }


  /**
   * Model BookSale
   */

  export type AggregateBookSale = {
    _count: BookSaleCountAggregateOutputType | null
    _avg: BookSaleAvgAggregateOutputType | null
    _sum: BookSaleSumAggregateOutputType | null
    _min: BookSaleMinAggregateOutputType | null
    _max: BookSaleMaxAggregateOutputType | null
  }

  export type BookSaleAvgAggregateOutputType = {
    total: number | null
  }

  export type BookSaleSumAggregateOutputType = {
    total: number | null
  }

  export type BookSaleMinAggregateOutputType = {
    id: string | null
    orderNumber: string | null
    fullName: string | null
    email: string | null
    phoneNumber: string | null
    isPaid: boolean | null
    purchasedAt: Date | null
    orderStatus: string | null
    total: number | null
    sessionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookSaleMaxAggregateOutputType = {
    id: string | null
    orderNumber: string | null
    fullName: string | null
    email: string | null
    phoneNumber: string | null
    isPaid: boolean | null
    purchasedAt: Date | null
    orderStatus: string | null
    total: number | null
    sessionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookSaleCountAggregateOutputType = {
    id: number
    orderNumber: number
    fullName: number
    email: number
    phoneNumber: number
    isPaid: number
    purchasedAt: number
    orderStatus: number
    total: number
    sessionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookSaleAvgAggregateInputType = {
    total?: true
  }

  export type BookSaleSumAggregateInputType = {
    total?: true
  }

  export type BookSaleMinAggregateInputType = {
    id?: true
    orderNumber?: true
    fullName?: true
    email?: true
    phoneNumber?: true
    isPaid?: true
    purchasedAt?: true
    orderStatus?: true
    total?: true
    sessionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookSaleMaxAggregateInputType = {
    id?: true
    orderNumber?: true
    fullName?: true
    email?: true
    phoneNumber?: true
    isPaid?: true
    purchasedAt?: true
    orderStatus?: true
    total?: true
    sessionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookSaleCountAggregateInputType = {
    id?: true
    orderNumber?: true
    fullName?: true
    email?: true
    phoneNumber?: true
    isPaid?: true
    purchasedAt?: true
    orderStatus?: true
    total?: true
    sessionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookSaleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookSale to aggregate.
     */
    where?: BookSaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookSales to fetch.
     */
    orderBy?: BookSaleOrderByWithRelationInput | BookSaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookSaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookSales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookSales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookSales
    **/
    _count?: true | BookSaleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookSaleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookSaleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookSaleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookSaleMaxAggregateInputType
  }

  export type GetBookSaleAggregateType<T extends BookSaleAggregateArgs> = {
        [P in keyof T & keyof AggregateBookSale]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookSale[P]>
      : GetScalarType<T[P], AggregateBookSale[P]>
  }




  export type BookSaleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookSaleWhereInput
    orderBy?: BookSaleOrderByWithAggregationInput | BookSaleOrderByWithAggregationInput[]
    by: BookSaleScalarFieldEnum[] | BookSaleScalarFieldEnum
    having?: BookSaleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookSaleCountAggregateInputType | true
    _avg?: BookSaleAvgAggregateInputType
    _sum?: BookSaleSumAggregateInputType
    _min?: BookSaleMinAggregateInputType
    _max?: BookSaleMaxAggregateInputType
  }

  export type BookSaleGroupByOutputType = {
    id: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber: string | null
    isPaid: boolean
    purchasedAt: Date | null
    orderStatus: string
    total: number
    sessionId: string
    createdAt: Date
    updatedAt: Date
    _count: BookSaleCountAggregateOutputType | null
    _avg: BookSaleAvgAggregateOutputType | null
    _sum: BookSaleSumAggregateOutputType | null
    _min: BookSaleMinAggregateOutputType | null
    _max: BookSaleMaxAggregateOutputType | null
  }

  type GetBookSaleGroupByPayload<T extends BookSaleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookSaleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookSaleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookSaleGroupByOutputType[P]>
            : GetScalarType<T[P], BookSaleGroupByOutputType[P]>
        }
      >
    >


  export type BookSaleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    fullName?: boolean
    email?: boolean
    phoneNumber?: boolean
    isPaid?: boolean
    purchasedAt?: boolean
    orderStatus?: boolean
    total?: boolean
    sessionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    items?: boolean | BookSale$itemsArgs<ExtArgs>
    session?: boolean | TableSaleSessionDefaultArgs<ExtArgs>
    _count?: boolean | BookSaleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookSale"]>

  export type BookSaleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    fullName?: boolean
    email?: boolean
    phoneNumber?: boolean
    isPaid?: boolean
    purchasedAt?: boolean
    orderStatus?: boolean
    total?: boolean
    sessionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    session?: boolean | TableSaleSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookSale"]>

  export type BookSaleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    fullName?: boolean
    email?: boolean
    phoneNumber?: boolean
    isPaid?: boolean
    purchasedAt?: boolean
    orderStatus?: boolean
    total?: boolean
    sessionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    session?: boolean | TableSaleSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookSale"]>

  export type BookSaleSelectScalar = {
    id?: boolean
    orderNumber?: boolean
    fullName?: boolean
    email?: boolean
    phoneNumber?: boolean
    isPaid?: boolean
    purchasedAt?: boolean
    orderStatus?: boolean
    total?: boolean
    sessionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BookSaleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderNumber" | "fullName" | "email" | "phoneNumber" | "isPaid" | "purchasedAt" | "orderStatus" | "total" | "sessionId" | "createdAt" | "updatedAt", ExtArgs["result"]["bookSale"]>
  export type BookSaleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | BookSale$itemsArgs<ExtArgs>
    session?: boolean | TableSaleSessionDefaultArgs<ExtArgs>
    _count?: boolean | BookSaleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BookSaleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | TableSaleSessionDefaultArgs<ExtArgs>
  }
  export type BookSaleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | TableSaleSessionDefaultArgs<ExtArgs>
  }

  export type $BookSalePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookSale"
    objects: {
      items: Prisma.$BookSaleItemPayload<ExtArgs>[]
      session: Prisma.$TableSaleSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderNumber: string
      fullName: string
      email: string
      phoneNumber: string | null
      isPaid: boolean
      purchasedAt: Date | null
      orderStatus: string
      total: number
      sessionId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bookSale"]>
    composites: {}
  }

  type BookSaleGetPayload<S extends boolean | null | undefined | BookSaleDefaultArgs> = $Result.GetResult<Prisma.$BookSalePayload, S>

  type BookSaleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookSaleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookSaleCountAggregateInputType | true
    }

  export interface BookSaleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookSale'], meta: { name: 'BookSale' } }
    /**
     * Find zero or one BookSale that matches the filter.
     * @param {BookSaleFindUniqueArgs} args - Arguments to find a BookSale
     * @example
     * // Get one BookSale
     * const bookSale = await prisma.bookSale.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookSaleFindUniqueArgs>(args: SelectSubset<T, BookSaleFindUniqueArgs<ExtArgs>>): Prisma__BookSaleClient<$Result.GetResult<Prisma.$BookSalePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BookSale that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookSaleFindUniqueOrThrowArgs} args - Arguments to find a BookSale
     * @example
     * // Get one BookSale
     * const bookSale = await prisma.bookSale.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookSaleFindUniqueOrThrowArgs>(args: SelectSubset<T, BookSaleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookSaleClient<$Result.GetResult<Prisma.$BookSalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookSale that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookSaleFindFirstArgs} args - Arguments to find a BookSale
     * @example
     * // Get one BookSale
     * const bookSale = await prisma.bookSale.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookSaleFindFirstArgs>(args?: SelectSubset<T, BookSaleFindFirstArgs<ExtArgs>>): Prisma__BookSaleClient<$Result.GetResult<Prisma.$BookSalePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookSale that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookSaleFindFirstOrThrowArgs} args - Arguments to find a BookSale
     * @example
     * // Get one BookSale
     * const bookSale = await prisma.bookSale.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookSaleFindFirstOrThrowArgs>(args?: SelectSubset<T, BookSaleFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookSaleClient<$Result.GetResult<Prisma.$BookSalePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BookSales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookSaleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookSales
     * const bookSales = await prisma.bookSale.findMany()
     * 
     * // Get first 10 BookSales
     * const bookSales = await prisma.bookSale.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookSaleWithIdOnly = await prisma.bookSale.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookSaleFindManyArgs>(args?: SelectSubset<T, BookSaleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookSalePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BookSale.
     * @param {BookSaleCreateArgs} args - Arguments to create a BookSale.
     * @example
     * // Create one BookSale
     * const BookSale = await prisma.bookSale.create({
     *   data: {
     *     // ... data to create a BookSale
     *   }
     * })
     * 
     */
    create<T extends BookSaleCreateArgs>(args: SelectSubset<T, BookSaleCreateArgs<ExtArgs>>): Prisma__BookSaleClient<$Result.GetResult<Prisma.$BookSalePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BookSales.
     * @param {BookSaleCreateManyArgs} args - Arguments to create many BookSales.
     * @example
     * // Create many BookSales
     * const bookSale = await prisma.bookSale.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookSaleCreateManyArgs>(args?: SelectSubset<T, BookSaleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BookSales and returns the data saved in the database.
     * @param {BookSaleCreateManyAndReturnArgs} args - Arguments to create many BookSales.
     * @example
     * // Create many BookSales
     * const bookSale = await prisma.bookSale.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BookSales and only return the `id`
     * const bookSaleWithIdOnly = await prisma.bookSale.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookSaleCreateManyAndReturnArgs>(args?: SelectSubset<T, BookSaleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookSalePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BookSale.
     * @param {BookSaleDeleteArgs} args - Arguments to delete one BookSale.
     * @example
     * // Delete one BookSale
     * const BookSale = await prisma.bookSale.delete({
     *   where: {
     *     // ... filter to delete one BookSale
     *   }
     * })
     * 
     */
    delete<T extends BookSaleDeleteArgs>(args: SelectSubset<T, BookSaleDeleteArgs<ExtArgs>>): Prisma__BookSaleClient<$Result.GetResult<Prisma.$BookSalePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BookSale.
     * @param {BookSaleUpdateArgs} args - Arguments to update one BookSale.
     * @example
     * // Update one BookSale
     * const bookSale = await prisma.bookSale.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookSaleUpdateArgs>(args: SelectSubset<T, BookSaleUpdateArgs<ExtArgs>>): Prisma__BookSaleClient<$Result.GetResult<Prisma.$BookSalePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BookSales.
     * @param {BookSaleDeleteManyArgs} args - Arguments to filter BookSales to delete.
     * @example
     * // Delete a few BookSales
     * const { count } = await prisma.bookSale.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookSaleDeleteManyArgs>(args?: SelectSubset<T, BookSaleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookSales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookSaleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookSales
     * const bookSale = await prisma.bookSale.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookSaleUpdateManyArgs>(args: SelectSubset<T, BookSaleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookSales and returns the data updated in the database.
     * @param {BookSaleUpdateManyAndReturnArgs} args - Arguments to update many BookSales.
     * @example
     * // Update many BookSales
     * const bookSale = await prisma.bookSale.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BookSales and only return the `id`
     * const bookSaleWithIdOnly = await prisma.bookSale.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookSaleUpdateManyAndReturnArgs>(args: SelectSubset<T, BookSaleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookSalePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BookSale.
     * @param {BookSaleUpsertArgs} args - Arguments to update or create a BookSale.
     * @example
     * // Update or create a BookSale
     * const bookSale = await prisma.bookSale.upsert({
     *   create: {
     *     // ... data to create a BookSale
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookSale we want to update
     *   }
     * })
     */
    upsert<T extends BookSaleUpsertArgs>(args: SelectSubset<T, BookSaleUpsertArgs<ExtArgs>>): Prisma__BookSaleClient<$Result.GetResult<Prisma.$BookSalePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BookSales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookSaleCountArgs} args - Arguments to filter BookSales to count.
     * @example
     * // Count the number of BookSales
     * const count = await prisma.bookSale.count({
     *   where: {
     *     // ... the filter for the BookSales we want to count
     *   }
     * })
    **/
    count<T extends BookSaleCountArgs>(
      args?: Subset<T, BookSaleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookSaleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookSale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookSaleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookSaleAggregateArgs>(args: Subset<T, BookSaleAggregateArgs>): Prisma.PrismaPromise<GetBookSaleAggregateType<T>>

    /**
     * Group by BookSale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookSaleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookSaleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookSaleGroupByArgs['orderBy'] }
        : { orderBy?: BookSaleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookSaleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookSaleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookSale model
   */
  readonly fields: BookSaleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookSale.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookSaleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends BookSale$itemsArgs<ExtArgs> = {}>(args?: Subset<T, BookSale$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookSaleItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    session<T extends TableSaleSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TableSaleSessionDefaultArgs<ExtArgs>>): Prisma__TableSaleSessionClient<$Result.GetResult<Prisma.$TableSaleSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BookSale model
   */ 
  interface BookSaleFieldRefs {
    readonly id: FieldRef<"BookSale", 'String'>
    readonly orderNumber: FieldRef<"BookSale", 'String'>
    readonly fullName: FieldRef<"BookSale", 'String'>
    readonly email: FieldRef<"BookSale", 'String'>
    readonly phoneNumber: FieldRef<"BookSale", 'String'>
    readonly isPaid: FieldRef<"BookSale", 'Boolean'>
    readonly purchasedAt: FieldRef<"BookSale", 'DateTime'>
    readonly orderStatus: FieldRef<"BookSale", 'String'>
    readonly total: FieldRef<"BookSale", 'Float'>
    readonly sessionId: FieldRef<"BookSale", 'String'>
    readonly createdAt: FieldRef<"BookSale", 'DateTime'>
    readonly updatedAt: FieldRef<"BookSale", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BookSale findUnique
   */
  export type BookSaleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSale
     */
    select?: BookSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSale
     */
    omit?: BookSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleInclude<ExtArgs> | null
    /**
     * Filter, which BookSale to fetch.
     */
    where: BookSaleWhereUniqueInput
  }

  /**
   * BookSale findUniqueOrThrow
   */
  export type BookSaleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSale
     */
    select?: BookSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSale
     */
    omit?: BookSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleInclude<ExtArgs> | null
    /**
     * Filter, which BookSale to fetch.
     */
    where: BookSaleWhereUniqueInput
  }

  /**
   * BookSale findFirst
   */
  export type BookSaleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSale
     */
    select?: BookSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSale
     */
    omit?: BookSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleInclude<ExtArgs> | null
    /**
     * Filter, which BookSale to fetch.
     */
    where?: BookSaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookSales to fetch.
     */
    orderBy?: BookSaleOrderByWithRelationInput | BookSaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookSales.
     */
    cursor?: BookSaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookSales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookSales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookSales.
     */
    distinct?: BookSaleScalarFieldEnum | BookSaleScalarFieldEnum[]
  }

  /**
   * BookSale findFirstOrThrow
   */
  export type BookSaleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSale
     */
    select?: BookSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSale
     */
    omit?: BookSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleInclude<ExtArgs> | null
    /**
     * Filter, which BookSale to fetch.
     */
    where?: BookSaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookSales to fetch.
     */
    orderBy?: BookSaleOrderByWithRelationInput | BookSaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookSales.
     */
    cursor?: BookSaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookSales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookSales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookSales.
     */
    distinct?: BookSaleScalarFieldEnum | BookSaleScalarFieldEnum[]
  }

  /**
   * BookSale findMany
   */
  export type BookSaleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSale
     */
    select?: BookSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSale
     */
    omit?: BookSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleInclude<ExtArgs> | null
    /**
     * Filter, which BookSales to fetch.
     */
    where?: BookSaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookSales to fetch.
     */
    orderBy?: BookSaleOrderByWithRelationInput | BookSaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookSales.
     */
    cursor?: BookSaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookSales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookSales.
     */
    skip?: number
    distinct?: BookSaleScalarFieldEnum | BookSaleScalarFieldEnum[]
  }

  /**
   * BookSale create
   */
  export type BookSaleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSale
     */
    select?: BookSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSale
     */
    omit?: BookSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleInclude<ExtArgs> | null
    /**
     * The data needed to create a BookSale.
     */
    data: XOR<BookSaleCreateInput, BookSaleUncheckedCreateInput>
  }

  /**
   * BookSale createMany
   */
  export type BookSaleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookSales.
     */
    data: BookSaleCreateManyInput | BookSaleCreateManyInput[]
  }

  /**
   * BookSale createManyAndReturn
   */
  export type BookSaleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSale
     */
    select?: BookSaleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookSale
     */
    omit?: BookSaleOmit<ExtArgs> | null
    /**
     * The data used to create many BookSales.
     */
    data: BookSaleCreateManyInput | BookSaleCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookSale update
   */
  export type BookSaleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSale
     */
    select?: BookSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSale
     */
    omit?: BookSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleInclude<ExtArgs> | null
    /**
     * The data needed to update a BookSale.
     */
    data: XOR<BookSaleUpdateInput, BookSaleUncheckedUpdateInput>
    /**
     * Choose, which BookSale to update.
     */
    where: BookSaleWhereUniqueInput
  }

  /**
   * BookSale updateMany
   */
  export type BookSaleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookSales.
     */
    data: XOR<BookSaleUpdateManyMutationInput, BookSaleUncheckedUpdateManyInput>
    /**
     * Filter which BookSales to update
     */
    where?: BookSaleWhereInput
    /**
     * Limit how many BookSales to update.
     */
    limit?: number
  }

  /**
   * BookSale updateManyAndReturn
   */
  export type BookSaleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSale
     */
    select?: BookSaleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookSale
     */
    omit?: BookSaleOmit<ExtArgs> | null
    /**
     * The data used to update BookSales.
     */
    data: XOR<BookSaleUpdateManyMutationInput, BookSaleUncheckedUpdateManyInput>
    /**
     * Filter which BookSales to update
     */
    where?: BookSaleWhereInput
    /**
     * Limit how many BookSales to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookSale upsert
   */
  export type BookSaleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSale
     */
    select?: BookSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSale
     */
    omit?: BookSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleInclude<ExtArgs> | null
    /**
     * The filter to search for the BookSale to update in case it exists.
     */
    where: BookSaleWhereUniqueInput
    /**
     * In case the BookSale found by the `where` argument doesn't exist, create a new BookSale with this data.
     */
    create: XOR<BookSaleCreateInput, BookSaleUncheckedCreateInput>
    /**
     * In case the BookSale was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookSaleUpdateInput, BookSaleUncheckedUpdateInput>
  }

  /**
   * BookSale delete
   */
  export type BookSaleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSale
     */
    select?: BookSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSale
     */
    omit?: BookSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleInclude<ExtArgs> | null
    /**
     * Filter which BookSale to delete.
     */
    where: BookSaleWhereUniqueInput
  }

  /**
   * BookSale deleteMany
   */
  export type BookSaleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookSales to delete
     */
    where?: BookSaleWhereInput
    /**
     * Limit how many BookSales to delete.
     */
    limit?: number
  }

  /**
   * BookSale.items
   */
  export type BookSale$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSaleItem
     */
    select?: BookSaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSaleItem
     */
    omit?: BookSaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleItemInclude<ExtArgs> | null
    where?: BookSaleItemWhereInput
    orderBy?: BookSaleItemOrderByWithRelationInput | BookSaleItemOrderByWithRelationInput[]
    cursor?: BookSaleItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookSaleItemScalarFieldEnum | BookSaleItemScalarFieldEnum[]
  }

  /**
   * BookSale without action
   */
  export type BookSaleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSale
     */
    select?: BookSaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSale
     */
    omit?: BookSaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleInclude<ExtArgs> | null
  }


  /**
   * Model BookSaleItem
   */

  export type AggregateBookSaleItem = {
    _count: BookSaleItemCountAggregateOutputType | null
    _avg: BookSaleItemAvgAggregateOutputType | null
    _sum: BookSaleItemSumAggregateOutputType | null
    _min: BookSaleItemMinAggregateOutputType | null
    _max: BookSaleItemMaxAggregateOutputType | null
  }

  export type BookSaleItemAvgAggregateOutputType = {
    quantity: number | null
    price: number | null
  }

  export type BookSaleItemSumAggregateOutputType = {
    quantity: number | null
    price: number | null
  }

  export type BookSaleItemMinAggregateOutputType = {
    id: string | null
    bookSaleId: string | null
    bookId: string | null
    quantity: number | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookSaleItemMaxAggregateOutputType = {
    id: string | null
    bookSaleId: string | null
    bookId: string | null
    quantity: number | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookSaleItemCountAggregateOutputType = {
    id: number
    bookSaleId: number
    bookId: number
    quantity: number
    price: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookSaleItemAvgAggregateInputType = {
    quantity?: true
    price?: true
  }

  export type BookSaleItemSumAggregateInputType = {
    quantity?: true
    price?: true
  }

  export type BookSaleItemMinAggregateInputType = {
    id?: true
    bookSaleId?: true
    bookId?: true
    quantity?: true
    price?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookSaleItemMaxAggregateInputType = {
    id?: true
    bookSaleId?: true
    bookId?: true
    quantity?: true
    price?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookSaleItemCountAggregateInputType = {
    id?: true
    bookSaleId?: true
    bookId?: true
    quantity?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookSaleItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookSaleItem to aggregate.
     */
    where?: BookSaleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookSaleItems to fetch.
     */
    orderBy?: BookSaleItemOrderByWithRelationInput | BookSaleItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookSaleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookSaleItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookSaleItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookSaleItems
    **/
    _count?: true | BookSaleItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookSaleItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookSaleItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookSaleItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookSaleItemMaxAggregateInputType
  }

  export type GetBookSaleItemAggregateType<T extends BookSaleItemAggregateArgs> = {
        [P in keyof T & keyof AggregateBookSaleItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookSaleItem[P]>
      : GetScalarType<T[P], AggregateBookSaleItem[P]>
  }




  export type BookSaleItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookSaleItemWhereInput
    orderBy?: BookSaleItemOrderByWithAggregationInput | BookSaleItemOrderByWithAggregationInput[]
    by: BookSaleItemScalarFieldEnum[] | BookSaleItemScalarFieldEnum
    having?: BookSaleItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookSaleItemCountAggregateInputType | true
    _avg?: BookSaleItemAvgAggregateInputType
    _sum?: BookSaleItemSumAggregateInputType
    _min?: BookSaleItemMinAggregateInputType
    _max?: BookSaleItemMaxAggregateInputType
  }

  export type BookSaleItemGroupByOutputType = {
    id: string
    bookSaleId: string
    bookId: string
    quantity: number
    price: number
    createdAt: Date
    updatedAt: Date
    _count: BookSaleItemCountAggregateOutputType | null
    _avg: BookSaleItemAvgAggregateOutputType | null
    _sum: BookSaleItemSumAggregateOutputType | null
    _min: BookSaleItemMinAggregateOutputType | null
    _max: BookSaleItemMaxAggregateOutputType | null
  }

  type GetBookSaleItemGroupByPayload<T extends BookSaleItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookSaleItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookSaleItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookSaleItemGroupByOutputType[P]>
            : GetScalarType<T[P], BookSaleItemGroupByOutputType[P]>
        }
      >
    >


  export type BookSaleItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookSaleId?: boolean
    bookId?: boolean
    quantity?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bookSale?: boolean | BookSaleDefaultArgs<ExtArgs>
    book?: boolean | BookDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookSaleItem"]>

  export type BookSaleItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookSaleId?: boolean
    bookId?: boolean
    quantity?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bookSale?: boolean | BookSaleDefaultArgs<ExtArgs>
    book?: boolean | BookDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookSaleItem"]>

  export type BookSaleItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookSaleId?: boolean
    bookId?: boolean
    quantity?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bookSale?: boolean | BookSaleDefaultArgs<ExtArgs>
    book?: boolean | BookDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookSaleItem"]>

  export type BookSaleItemSelectScalar = {
    id?: boolean
    bookSaleId?: boolean
    bookId?: boolean
    quantity?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BookSaleItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bookSaleId" | "bookId" | "quantity" | "price" | "createdAt" | "updatedAt", ExtArgs["result"]["bookSaleItem"]>
  export type BookSaleItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookSale?: boolean | BookSaleDefaultArgs<ExtArgs>
    book?: boolean | BookDefaultArgs<ExtArgs>
  }
  export type BookSaleItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookSale?: boolean | BookSaleDefaultArgs<ExtArgs>
    book?: boolean | BookDefaultArgs<ExtArgs>
  }
  export type BookSaleItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookSale?: boolean | BookSaleDefaultArgs<ExtArgs>
    book?: boolean | BookDefaultArgs<ExtArgs>
  }

  export type $BookSaleItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookSaleItem"
    objects: {
      bookSale: Prisma.$BookSalePayload<ExtArgs>
      book: Prisma.$BookPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      bookSaleId: string
      bookId: string
      quantity: number
      price: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bookSaleItem"]>
    composites: {}
  }

  type BookSaleItemGetPayload<S extends boolean | null | undefined | BookSaleItemDefaultArgs> = $Result.GetResult<Prisma.$BookSaleItemPayload, S>

  type BookSaleItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookSaleItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookSaleItemCountAggregateInputType | true
    }

  export interface BookSaleItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookSaleItem'], meta: { name: 'BookSaleItem' } }
    /**
     * Find zero or one BookSaleItem that matches the filter.
     * @param {BookSaleItemFindUniqueArgs} args - Arguments to find a BookSaleItem
     * @example
     * // Get one BookSaleItem
     * const bookSaleItem = await prisma.bookSaleItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookSaleItemFindUniqueArgs>(args: SelectSubset<T, BookSaleItemFindUniqueArgs<ExtArgs>>): Prisma__BookSaleItemClient<$Result.GetResult<Prisma.$BookSaleItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BookSaleItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookSaleItemFindUniqueOrThrowArgs} args - Arguments to find a BookSaleItem
     * @example
     * // Get one BookSaleItem
     * const bookSaleItem = await prisma.bookSaleItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookSaleItemFindUniqueOrThrowArgs>(args: SelectSubset<T, BookSaleItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookSaleItemClient<$Result.GetResult<Prisma.$BookSaleItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookSaleItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookSaleItemFindFirstArgs} args - Arguments to find a BookSaleItem
     * @example
     * // Get one BookSaleItem
     * const bookSaleItem = await prisma.bookSaleItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookSaleItemFindFirstArgs>(args?: SelectSubset<T, BookSaleItemFindFirstArgs<ExtArgs>>): Prisma__BookSaleItemClient<$Result.GetResult<Prisma.$BookSaleItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookSaleItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookSaleItemFindFirstOrThrowArgs} args - Arguments to find a BookSaleItem
     * @example
     * // Get one BookSaleItem
     * const bookSaleItem = await prisma.bookSaleItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookSaleItemFindFirstOrThrowArgs>(args?: SelectSubset<T, BookSaleItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookSaleItemClient<$Result.GetResult<Prisma.$BookSaleItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BookSaleItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookSaleItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookSaleItems
     * const bookSaleItems = await prisma.bookSaleItem.findMany()
     * 
     * // Get first 10 BookSaleItems
     * const bookSaleItems = await prisma.bookSaleItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookSaleItemWithIdOnly = await prisma.bookSaleItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookSaleItemFindManyArgs>(args?: SelectSubset<T, BookSaleItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookSaleItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BookSaleItem.
     * @param {BookSaleItemCreateArgs} args - Arguments to create a BookSaleItem.
     * @example
     * // Create one BookSaleItem
     * const BookSaleItem = await prisma.bookSaleItem.create({
     *   data: {
     *     // ... data to create a BookSaleItem
     *   }
     * })
     * 
     */
    create<T extends BookSaleItemCreateArgs>(args: SelectSubset<T, BookSaleItemCreateArgs<ExtArgs>>): Prisma__BookSaleItemClient<$Result.GetResult<Prisma.$BookSaleItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BookSaleItems.
     * @param {BookSaleItemCreateManyArgs} args - Arguments to create many BookSaleItems.
     * @example
     * // Create many BookSaleItems
     * const bookSaleItem = await prisma.bookSaleItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookSaleItemCreateManyArgs>(args?: SelectSubset<T, BookSaleItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BookSaleItems and returns the data saved in the database.
     * @param {BookSaleItemCreateManyAndReturnArgs} args - Arguments to create many BookSaleItems.
     * @example
     * // Create many BookSaleItems
     * const bookSaleItem = await prisma.bookSaleItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BookSaleItems and only return the `id`
     * const bookSaleItemWithIdOnly = await prisma.bookSaleItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookSaleItemCreateManyAndReturnArgs>(args?: SelectSubset<T, BookSaleItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookSaleItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BookSaleItem.
     * @param {BookSaleItemDeleteArgs} args - Arguments to delete one BookSaleItem.
     * @example
     * // Delete one BookSaleItem
     * const BookSaleItem = await prisma.bookSaleItem.delete({
     *   where: {
     *     // ... filter to delete one BookSaleItem
     *   }
     * })
     * 
     */
    delete<T extends BookSaleItemDeleteArgs>(args: SelectSubset<T, BookSaleItemDeleteArgs<ExtArgs>>): Prisma__BookSaleItemClient<$Result.GetResult<Prisma.$BookSaleItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BookSaleItem.
     * @param {BookSaleItemUpdateArgs} args - Arguments to update one BookSaleItem.
     * @example
     * // Update one BookSaleItem
     * const bookSaleItem = await prisma.bookSaleItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookSaleItemUpdateArgs>(args: SelectSubset<T, BookSaleItemUpdateArgs<ExtArgs>>): Prisma__BookSaleItemClient<$Result.GetResult<Prisma.$BookSaleItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BookSaleItems.
     * @param {BookSaleItemDeleteManyArgs} args - Arguments to filter BookSaleItems to delete.
     * @example
     * // Delete a few BookSaleItems
     * const { count } = await prisma.bookSaleItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookSaleItemDeleteManyArgs>(args?: SelectSubset<T, BookSaleItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookSaleItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookSaleItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookSaleItems
     * const bookSaleItem = await prisma.bookSaleItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookSaleItemUpdateManyArgs>(args: SelectSubset<T, BookSaleItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookSaleItems and returns the data updated in the database.
     * @param {BookSaleItemUpdateManyAndReturnArgs} args - Arguments to update many BookSaleItems.
     * @example
     * // Update many BookSaleItems
     * const bookSaleItem = await prisma.bookSaleItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BookSaleItems and only return the `id`
     * const bookSaleItemWithIdOnly = await prisma.bookSaleItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookSaleItemUpdateManyAndReturnArgs>(args: SelectSubset<T, BookSaleItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookSaleItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BookSaleItem.
     * @param {BookSaleItemUpsertArgs} args - Arguments to update or create a BookSaleItem.
     * @example
     * // Update or create a BookSaleItem
     * const bookSaleItem = await prisma.bookSaleItem.upsert({
     *   create: {
     *     // ... data to create a BookSaleItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookSaleItem we want to update
     *   }
     * })
     */
    upsert<T extends BookSaleItemUpsertArgs>(args: SelectSubset<T, BookSaleItemUpsertArgs<ExtArgs>>): Prisma__BookSaleItemClient<$Result.GetResult<Prisma.$BookSaleItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BookSaleItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookSaleItemCountArgs} args - Arguments to filter BookSaleItems to count.
     * @example
     * // Count the number of BookSaleItems
     * const count = await prisma.bookSaleItem.count({
     *   where: {
     *     // ... the filter for the BookSaleItems we want to count
     *   }
     * })
    **/
    count<T extends BookSaleItemCountArgs>(
      args?: Subset<T, BookSaleItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookSaleItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookSaleItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookSaleItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookSaleItemAggregateArgs>(args: Subset<T, BookSaleItemAggregateArgs>): Prisma.PrismaPromise<GetBookSaleItemAggregateType<T>>

    /**
     * Group by BookSaleItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookSaleItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookSaleItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookSaleItemGroupByArgs['orderBy'] }
        : { orderBy?: BookSaleItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookSaleItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookSaleItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookSaleItem model
   */
  readonly fields: BookSaleItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookSaleItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookSaleItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bookSale<T extends BookSaleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookSaleDefaultArgs<ExtArgs>>): Prisma__BookSaleClient<$Result.GetResult<Prisma.$BookSalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    book<T extends BookDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookDefaultArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BookSaleItem model
   */ 
  interface BookSaleItemFieldRefs {
    readonly id: FieldRef<"BookSaleItem", 'String'>
    readonly bookSaleId: FieldRef<"BookSaleItem", 'String'>
    readonly bookId: FieldRef<"BookSaleItem", 'String'>
    readonly quantity: FieldRef<"BookSaleItem", 'Int'>
    readonly price: FieldRef<"BookSaleItem", 'Float'>
    readonly createdAt: FieldRef<"BookSaleItem", 'DateTime'>
    readonly updatedAt: FieldRef<"BookSaleItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BookSaleItem findUnique
   */
  export type BookSaleItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSaleItem
     */
    select?: BookSaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSaleItem
     */
    omit?: BookSaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleItemInclude<ExtArgs> | null
    /**
     * Filter, which BookSaleItem to fetch.
     */
    where: BookSaleItemWhereUniqueInput
  }

  /**
   * BookSaleItem findUniqueOrThrow
   */
  export type BookSaleItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSaleItem
     */
    select?: BookSaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSaleItem
     */
    omit?: BookSaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleItemInclude<ExtArgs> | null
    /**
     * Filter, which BookSaleItem to fetch.
     */
    where: BookSaleItemWhereUniqueInput
  }

  /**
   * BookSaleItem findFirst
   */
  export type BookSaleItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSaleItem
     */
    select?: BookSaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSaleItem
     */
    omit?: BookSaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleItemInclude<ExtArgs> | null
    /**
     * Filter, which BookSaleItem to fetch.
     */
    where?: BookSaleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookSaleItems to fetch.
     */
    orderBy?: BookSaleItemOrderByWithRelationInput | BookSaleItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookSaleItems.
     */
    cursor?: BookSaleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookSaleItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookSaleItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookSaleItems.
     */
    distinct?: BookSaleItemScalarFieldEnum | BookSaleItemScalarFieldEnum[]
  }

  /**
   * BookSaleItem findFirstOrThrow
   */
  export type BookSaleItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSaleItem
     */
    select?: BookSaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSaleItem
     */
    omit?: BookSaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleItemInclude<ExtArgs> | null
    /**
     * Filter, which BookSaleItem to fetch.
     */
    where?: BookSaleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookSaleItems to fetch.
     */
    orderBy?: BookSaleItemOrderByWithRelationInput | BookSaleItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookSaleItems.
     */
    cursor?: BookSaleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookSaleItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookSaleItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookSaleItems.
     */
    distinct?: BookSaleItemScalarFieldEnum | BookSaleItemScalarFieldEnum[]
  }

  /**
   * BookSaleItem findMany
   */
  export type BookSaleItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSaleItem
     */
    select?: BookSaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSaleItem
     */
    omit?: BookSaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleItemInclude<ExtArgs> | null
    /**
     * Filter, which BookSaleItems to fetch.
     */
    where?: BookSaleItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookSaleItems to fetch.
     */
    orderBy?: BookSaleItemOrderByWithRelationInput | BookSaleItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookSaleItems.
     */
    cursor?: BookSaleItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookSaleItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookSaleItems.
     */
    skip?: number
    distinct?: BookSaleItemScalarFieldEnum | BookSaleItemScalarFieldEnum[]
  }

  /**
   * BookSaleItem create
   */
  export type BookSaleItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSaleItem
     */
    select?: BookSaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSaleItem
     */
    omit?: BookSaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleItemInclude<ExtArgs> | null
    /**
     * The data needed to create a BookSaleItem.
     */
    data: XOR<BookSaleItemCreateInput, BookSaleItemUncheckedCreateInput>
  }

  /**
   * BookSaleItem createMany
   */
  export type BookSaleItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookSaleItems.
     */
    data: BookSaleItemCreateManyInput | BookSaleItemCreateManyInput[]
  }

  /**
   * BookSaleItem createManyAndReturn
   */
  export type BookSaleItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSaleItem
     */
    select?: BookSaleItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookSaleItem
     */
    omit?: BookSaleItemOmit<ExtArgs> | null
    /**
     * The data used to create many BookSaleItems.
     */
    data: BookSaleItemCreateManyInput | BookSaleItemCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookSaleItem update
   */
  export type BookSaleItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSaleItem
     */
    select?: BookSaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSaleItem
     */
    omit?: BookSaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleItemInclude<ExtArgs> | null
    /**
     * The data needed to update a BookSaleItem.
     */
    data: XOR<BookSaleItemUpdateInput, BookSaleItemUncheckedUpdateInput>
    /**
     * Choose, which BookSaleItem to update.
     */
    where: BookSaleItemWhereUniqueInput
  }

  /**
   * BookSaleItem updateMany
   */
  export type BookSaleItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookSaleItems.
     */
    data: XOR<BookSaleItemUpdateManyMutationInput, BookSaleItemUncheckedUpdateManyInput>
    /**
     * Filter which BookSaleItems to update
     */
    where?: BookSaleItemWhereInput
    /**
     * Limit how many BookSaleItems to update.
     */
    limit?: number
  }

  /**
   * BookSaleItem updateManyAndReturn
   */
  export type BookSaleItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSaleItem
     */
    select?: BookSaleItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookSaleItem
     */
    omit?: BookSaleItemOmit<ExtArgs> | null
    /**
     * The data used to update BookSaleItems.
     */
    data: XOR<BookSaleItemUpdateManyMutationInput, BookSaleItemUncheckedUpdateManyInput>
    /**
     * Filter which BookSaleItems to update
     */
    where?: BookSaleItemWhereInput
    /**
     * Limit how many BookSaleItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookSaleItem upsert
   */
  export type BookSaleItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSaleItem
     */
    select?: BookSaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSaleItem
     */
    omit?: BookSaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleItemInclude<ExtArgs> | null
    /**
     * The filter to search for the BookSaleItem to update in case it exists.
     */
    where: BookSaleItemWhereUniqueInput
    /**
     * In case the BookSaleItem found by the `where` argument doesn't exist, create a new BookSaleItem with this data.
     */
    create: XOR<BookSaleItemCreateInput, BookSaleItemUncheckedCreateInput>
    /**
     * In case the BookSaleItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookSaleItemUpdateInput, BookSaleItemUncheckedUpdateInput>
  }

  /**
   * BookSaleItem delete
   */
  export type BookSaleItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSaleItem
     */
    select?: BookSaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSaleItem
     */
    omit?: BookSaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleItemInclude<ExtArgs> | null
    /**
     * Filter which BookSaleItem to delete.
     */
    where: BookSaleItemWhereUniqueInput
  }

  /**
   * BookSaleItem deleteMany
   */
  export type BookSaleItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookSaleItems to delete
     */
    where?: BookSaleItemWhereInput
    /**
     * Limit how many BookSaleItems to delete.
     */
    limit?: number
  }

  /**
   * BookSaleItem without action
   */
  export type BookSaleItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookSaleItem
     */
    select?: BookSaleItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookSaleItem
     */
    omit?: BookSaleItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookSaleItemInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    isAdmin: 'isAdmin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const SettingScalarFieldEnum: {
    id: 'id',
    currentSession: 'currentSession',
    adminPassword: 'adminPassword',
    mainStoreData: 'mainStoreData'
  };

  export type SettingScalarFieldEnum = (typeof SettingScalarFieldEnum)[keyof typeof SettingScalarFieldEnum]


  export const PreOrderScalarFieldEnum: {
    id: 'id',
    orderNumber: 'orderNumber',
    fullName: 'fullName',
    email: 'email',
    phoneNumber: 'phoneNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isCollected: 'isCollected',
    isPartiallyCollected: 'isPartiallyCollected',
    purchasedAt: 'purchasedAt',
    shippingZone: 'shippingZone',
    orderStatus: 'orderStatus',
    total: 'total'
  };

  export type PreOrderScalarFieldEnum = (typeof PreOrderScalarFieldEnum)[keyof typeof PreOrderScalarFieldEnum]


  export const OrderItemScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    quantity: 'quantity',
    price: 'price',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isCollected: 'isCollected',
    productName: 'productName',
    bookId: 'bookId',
    consolidationId: 'consolidationId'
  };

  export type OrderItemScalarFieldEnum = (typeof OrderItemScalarFieldEnum)[keyof typeof OrderItemScalarFieldEnum]


  export const ConsolidationScalarFieldEnum: {
    id: 'id',
    date: 'date',
    session: 'session',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    orderId: 'orderId'
  };

  export type ConsolidationScalarFieldEnum = (typeof ConsolidationScalarFieldEnum)[keyof typeof ConsolidationScalarFieldEnum]


  export const PreorderSessionScalarFieldEnum: {
    id: 'id',
    session: 'session',
    userId: 'userId',
    data: 'data',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PreorderSessionScalarFieldEnum = (typeof PreorderSessionScalarFieldEnum)[keyof typeof PreorderSessionScalarFieldEnum]


  export const TableSaleSessionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    tableId: 'tableId',
    session: 'session',
    managerId: 'managerId',
    salesPersonId: 'salesPersonId',
    data: 'data',
    soldData: 'soldData',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TableSaleSessionScalarFieldEnum = (typeof TableSaleSessionScalarFieldEnum)[keyof typeof TableSaleSessionScalarFieldEnum]


  export const MySessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    session: 'session',
    workspace: 'workspace',
    data: 'data',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tableSaleSessionId: 'tableSaleSessionId',
    miniStoreSessionId: 'miniStoreSessionId',
    mainStoreSessionId: 'mainStoreSessionId',
    preorderSessionId: 'preorderSessionId'
  };

  export type MySessionScalarFieldEnum = (typeof MySessionScalarFieldEnum)[keyof typeof MySessionScalarFieldEnum]


  export const MiniStoreSessionScalarFieldEnum: {
    id: 'id',
    session: 'session',
    managerId: 'managerId',
    collectedData: 'collectedData',
    distributedData: 'distributedData',
    data: 'data',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MiniStoreSessionScalarFieldEnum = (typeof MiniStoreSessionScalarFieldEnum)[keyof typeof MiniStoreSessionScalarFieldEnum]


  export const MainStoreSessionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    session: 'session',
    managerId: 'managerId',
    collectedData: 'collectedData',
    distributedData: 'distributedData',
    data: 'data',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MainStoreSessionScalarFieldEnum = (typeof MainStoreSessionScalarFieldEnum)[keyof typeof MainStoreSessionScalarFieldEnum]


  export const BookScalarFieldEnum: {
    id: 'id',
    title: 'title',
    total: 'total',
    available: 'available',
    preorderTotal: 'preorderTotal',
    preorderAvailable: 'preorderAvailable',
    salesTotal: 'salesTotal',
    salesAvailable: 'salesAvailable',
    price: 'price',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookScalarFieldEnum = (typeof BookScalarFieldEnum)[keyof typeof BookScalarFieldEnum]


  export const BookSaleScalarFieldEnum: {
    id: 'id',
    orderNumber: 'orderNumber',
    fullName: 'fullName',
    email: 'email',
    phoneNumber: 'phoneNumber',
    isPaid: 'isPaid',
    purchasedAt: 'purchasedAt',
    orderStatus: 'orderStatus',
    total: 'total',
    sessionId: 'sessionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookSaleScalarFieldEnum = (typeof BookSaleScalarFieldEnum)[keyof typeof BookSaleScalarFieldEnum]


  export const BookSaleItemScalarFieldEnum: {
    id: 'id',
    bookSaleId: 'bookSaleId',
    bookId: 'bookId',
    quantity: 'quantity',
    price: 'price',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookSaleItemScalarFieldEnum = (typeof BookSaleItemScalarFieldEnum)[keyof typeof BookSaleItemScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    isAdmin?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    consolidations?: ConsolidationListRelationFilter
    mySessions?: MySessionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    consolidations?: ConsolidationOrderByRelationAggregateInput
    mySessions?: MySessionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    isAdmin?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    consolidations?: ConsolidationListRelationFilter
    mySessions?: MySessionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    isAdmin?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type SettingWhereInput = {
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    id?: StringFilter<"Setting"> | string
    currentSession?: StringNullableFilter<"Setting"> | string | null
    adminPassword?: StringNullableFilter<"Setting"> | string | null
    mainStoreData?: JsonNullableFilter<"Setting">
  }

  export type SettingOrderByWithRelationInput = {
    id?: SortOrder
    currentSession?: SortOrderInput | SortOrder
    adminPassword?: SortOrderInput | SortOrder
    mainStoreData?: SortOrderInput | SortOrder
  }

  export type SettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    currentSession?: StringNullableFilter<"Setting"> | string | null
    adminPassword?: StringNullableFilter<"Setting"> | string | null
    mainStoreData?: JsonNullableFilter<"Setting">
  }, "id">

  export type SettingOrderByWithAggregationInput = {
    id?: SortOrder
    currentSession?: SortOrderInput | SortOrder
    adminPassword?: SortOrderInput | SortOrder
    mainStoreData?: SortOrderInput | SortOrder
    _count?: SettingCountOrderByAggregateInput
    _max?: SettingMaxOrderByAggregateInput
    _min?: SettingMinOrderByAggregateInput
  }

  export type SettingScalarWhereWithAggregatesInput = {
    AND?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    OR?: SettingScalarWhereWithAggregatesInput[]
    NOT?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Setting"> | string
    currentSession?: StringNullableWithAggregatesFilter<"Setting"> | string | null
    adminPassword?: StringNullableWithAggregatesFilter<"Setting"> | string | null
    mainStoreData?: JsonNullableWithAggregatesFilter<"Setting">
  }

  export type PreOrderWhereInput = {
    AND?: PreOrderWhereInput | PreOrderWhereInput[]
    OR?: PreOrderWhereInput[]
    NOT?: PreOrderWhereInput | PreOrderWhereInput[]
    id?: StringFilter<"PreOrder"> | string
    orderNumber?: StringFilter<"PreOrder"> | string
    fullName?: StringFilter<"PreOrder"> | string
    email?: StringFilter<"PreOrder"> | string
    phoneNumber?: StringNullableFilter<"PreOrder"> | string | null
    createdAt?: DateTimeFilter<"PreOrder"> | Date | string
    updatedAt?: DateTimeFilter<"PreOrder"> | Date | string
    isCollected?: BoolFilter<"PreOrder"> | boolean
    isPartiallyCollected?: BoolFilter<"PreOrder"> | boolean
    purchasedAt?: DateTimeNullableFilter<"PreOrder"> | Date | string | null
    shippingZone?: StringNullableFilter<"PreOrder"> | string | null
    orderStatus?: StringFilter<"PreOrder"> | string
    total?: FloatFilter<"PreOrder"> | number
    items?: OrderItemListRelationFilter
    consolidations?: ConsolidationListRelationFilter
  }

  export type PreOrderOrderByWithRelationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isCollected?: SortOrder
    isPartiallyCollected?: SortOrder
    purchasedAt?: SortOrderInput | SortOrder
    shippingZone?: SortOrderInput | SortOrder
    orderStatus?: SortOrder
    total?: SortOrder
    items?: OrderItemOrderByRelationAggregateInput
    consolidations?: ConsolidationOrderByRelationAggregateInput
  }

  export type PreOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PreOrderWhereInput | PreOrderWhereInput[]
    OR?: PreOrderWhereInput[]
    NOT?: PreOrderWhereInput | PreOrderWhereInput[]
    orderNumber?: StringFilter<"PreOrder"> | string
    fullName?: StringFilter<"PreOrder"> | string
    email?: StringFilter<"PreOrder"> | string
    phoneNumber?: StringNullableFilter<"PreOrder"> | string | null
    createdAt?: DateTimeFilter<"PreOrder"> | Date | string
    updatedAt?: DateTimeFilter<"PreOrder"> | Date | string
    isCollected?: BoolFilter<"PreOrder"> | boolean
    isPartiallyCollected?: BoolFilter<"PreOrder"> | boolean
    purchasedAt?: DateTimeNullableFilter<"PreOrder"> | Date | string | null
    shippingZone?: StringNullableFilter<"PreOrder"> | string | null
    orderStatus?: StringFilter<"PreOrder"> | string
    total?: FloatFilter<"PreOrder"> | number
    items?: OrderItemListRelationFilter
    consolidations?: ConsolidationListRelationFilter
  }, "id">

  export type PreOrderOrderByWithAggregationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isCollected?: SortOrder
    isPartiallyCollected?: SortOrder
    purchasedAt?: SortOrderInput | SortOrder
    shippingZone?: SortOrderInput | SortOrder
    orderStatus?: SortOrder
    total?: SortOrder
    _count?: PreOrderCountOrderByAggregateInput
    _avg?: PreOrderAvgOrderByAggregateInput
    _max?: PreOrderMaxOrderByAggregateInput
    _min?: PreOrderMinOrderByAggregateInput
    _sum?: PreOrderSumOrderByAggregateInput
  }

  export type PreOrderScalarWhereWithAggregatesInput = {
    AND?: PreOrderScalarWhereWithAggregatesInput | PreOrderScalarWhereWithAggregatesInput[]
    OR?: PreOrderScalarWhereWithAggregatesInput[]
    NOT?: PreOrderScalarWhereWithAggregatesInput | PreOrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PreOrder"> | string
    orderNumber?: StringWithAggregatesFilter<"PreOrder"> | string
    fullName?: StringWithAggregatesFilter<"PreOrder"> | string
    email?: StringWithAggregatesFilter<"PreOrder"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"PreOrder"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PreOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PreOrder"> | Date | string
    isCollected?: BoolWithAggregatesFilter<"PreOrder"> | boolean
    isPartiallyCollected?: BoolWithAggregatesFilter<"PreOrder"> | boolean
    purchasedAt?: DateTimeNullableWithAggregatesFilter<"PreOrder"> | Date | string | null
    shippingZone?: StringNullableWithAggregatesFilter<"PreOrder"> | string | null
    orderStatus?: StringWithAggregatesFilter<"PreOrder"> | string
    total?: FloatWithAggregatesFilter<"PreOrder"> | number
  }

  export type OrderItemWhereInput = {
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    id?: StringFilter<"OrderItem"> | string
    orderId?: StringFilter<"OrderItem"> | string
    quantity?: IntFilter<"OrderItem"> | number
    price?: FloatFilter<"OrderItem"> | number
    createdAt?: DateTimeFilter<"OrderItem"> | Date | string
    updatedAt?: DateTimeFilter<"OrderItem"> | Date | string
    isCollected?: BoolFilter<"OrderItem"> | boolean
    productName?: StringFilter<"OrderItem"> | string
    bookId?: StringNullableFilter<"OrderItem"> | string | null
    consolidationId?: IntNullableFilter<"OrderItem"> | number | null
    order?: XOR<PreOrderScalarRelationFilter, PreOrderWhereInput>
    book?: XOR<BookNullableScalarRelationFilter, BookWhereInput> | null
    consolidation?: XOR<ConsolidationNullableScalarRelationFilter, ConsolidationWhereInput> | null
  }

  export type OrderItemOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isCollected?: SortOrder
    productName?: SortOrder
    bookId?: SortOrderInput | SortOrder
    consolidationId?: SortOrderInput | SortOrder
    order?: PreOrderOrderByWithRelationInput
    book?: BookOrderByWithRelationInput
    consolidation?: ConsolidationOrderByWithRelationInput
  }

  export type OrderItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    orderId?: StringFilter<"OrderItem"> | string
    quantity?: IntFilter<"OrderItem"> | number
    price?: FloatFilter<"OrderItem"> | number
    createdAt?: DateTimeFilter<"OrderItem"> | Date | string
    updatedAt?: DateTimeFilter<"OrderItem"> | Date | string
    isCollected?: BoolFilter<"OrderItem"> | boolean
    productName?: StringFilter<"OrderItem"> | string
    bookId?: StringNullableFilter<"OrderItem"> | string | null
    consolidationId?: IntNullableFilter<"OrderItem"> | number | null
    order?: XOR<PreOrderScalarRelationFilter, PreOrderWhereInput>
    book?: XOR<BookNullableScalarRelationFilter, BookWhereInput> | null
    consolidation?: XOR<ConsolidationNullableScalarRelationFilter, ConsolidationWhereInput> | null
  }, "id">

  export type OrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isCollected?: SortOrder
    productName?: SortOrder
    bookId?: SortOrderInput | SortOrder
    consolidationId?: SortOrderInput | SortOrder
    _count?: OrderItemCountOrderByAggregateInput
    _avg?: OrderItemAvgOrderByAggregateInput
    _max?: OrderItemMaxOrderByAggregateInput
    _min?: OrderItemMinOrderByAggregateInput
    _sum?: OrderItemSumOrderByAggregateInput
  }

  export type OrderItemScalarWhereWithAggregatesInput = {
    AND?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    OR?: OrderItemScalarWhereWithAggregatesInput[]
    NOT?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OrderItem"> | string
    orderId?: StringWithAggregatesFilter<"OrderItem"> | string
    quantity?: IntWithAggregatesFilter<"OrderItem"> | number
    price?: FloatWithAggregatesFilter<"OrderItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"OrderItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OrderItem"> | Date | string
    isCollected?: BoolWithAggregatesFilter<"OrderItem"> | boolean
    productName?: StringWithAggregatesFilter<"OrderItem"> | string
    bookId?: StringNullableWithAggregatesFilter<"OrderItem"> | string | null
    consolidationId?: IntNullableWithAggregatesFilter<"OrderItem"> | number | null
  }

  export type ConsolidationWhereInput = {
    AND?: ConsolidationWhereInput | ConsolidationWhereInput[]
    OR?: ConsolidationWhereInput[]
    NOT?: ConsolidationWhereInput | ConsolidationWhereInput[]
    id?: IntFilter<"Consolidation"> | number
    date?: DateTimeFilter<"Consolidation"> | Date | string
    session?: StringFilter<"Consolidation"> | string
    userId?: StringFilter<"Consolidation"> | string
    createdAt?: DateTimeFilter<"Consolidation"> | Date | string
    updatedAt?: DateTimeFilter<"Consolidation"> | Date | string
    orderId?: StringNullableFilter<"Consolidation"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    order?: XOR<PreOrderNullableScalarRelationFilter, PreOrderWhereInput> | null
    items?: OrderItemListRelationFilter
  }

  export type ConsolidationOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    session?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    order?: PreOrderOrderByWithRelationInput
    items?: OrderItemOrderByRelationAggregateInput
  }

  export type ConsolidationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ConsolidationWhereInput | ConsolidationWhereInput[]
    OR?: ConsolidationWhereInput[]
    NOT?: ConsolidationWhereInput | ConsolidationWhereInput[]
    date?: DateTimeFilter<"Consolidation"> | Date | string
    session?: StringFilter<"Consolidation"> | string
    userId?: StringFilter<"Consolidation"> | string
    createdAt?: DateTimeFilter<"Consolidation"> | Date | string
    updatedAt?: DateTimeFilter<"Consolidation"> | Date | string
    orderId?: StringNullableFilter<"Consolidation"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    order?: XOR<PreOrderNullableScalarRelationFilter, PreOrderWhereInput> | null
    items?: OrderItemListRelationFilter
  }, "id">

  export type ConsolidationOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    session?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrderInput | SortOrder
    _count?: ConsolidationCountOrderByAggregateInput
    _avg?: ConsolidationAvgOrderByAggregateInput
    _max?: ConsolidationMaxOrderByAggregateInput
    _min?: ConsolidationMinOrderByAggregateInput
    _sum?: ConsolidationSumOrderByAggregateInput
  }

  export type ConsolidationScalarWhereWithAggregatesInput = {
    AND?: ConsolidationScalarWhereWithAggregatesInput | ConsolidationScalarWhereWithAggregatesInput[]
    OR?: ConsolidationScalarWhereWithAggregatesInput[]
    NOT?: ConsolidationScalarWhereWithAggregatesInput | ConsolidationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Consolidation"> | number
    date?: DateTimeWithAggregatesFilter<"Consolidation"> | Date | string
    session?: StringWithAggregatesFilter<"Consolidation"> | string
    userId?: StringWithAggregatesFilter<"Consolidation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Consolidation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Consolidation"> | Date | string
    orderId?: StringNullableWithAggregatesFilter<"Consolidation"> | string | null
  }

  export type PreorderSessionWhereInput = {
    AND?: PreorderSessionWhereInput | PreorderSessionWhereInput[]
    OR?: PreorderSessionWhereInput[]
    NOT?: PreorderSessionWhereInput | PreorderSessionWhereInput[]
    id?: StringFilter<"PreorderSession"> | string
    session?: StringFilter<"PreorderSession"> | string
    userId?: StringFilter<"PreorderSession"> | string
    data?: JsonFilter<"PreorderSession">
    isActive?: BoolFilter<"PreorderSession"> | boolean
    createdAt?: DateTimeFilter<"PreorderSession"> | Date | string
    updatedAt?: DateTimeFilter<"PreorderSession"> | Date | string
    mySessions?: MySessionListRelationFilter
  }

  export type PreorderSessionOrderByWithRelationInput = {
    id?: SortOrder
    session?: SortOrder
    userId?: SortOrder
    data?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mySessions?: MySessionOrderByRelationAggregateInput
  }

  export type PreorderSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PreorderSessionWhereInput | PreorderSessionWhereInput[]
    OR?: PreorderSessionWhereInput[]
    NOT?: PreorderSessionWhereInput | PreorderSessionWhereInput[]
    session?: StringFilter<"PreorderSession"> | string
    userId?: StringFilter<"PreorderSession"> | string
    data?: JsonFilter<"PreorderSession">
    isActive?: BoolFilter<"PreorderSession"> | boolean
    createdAt?: DateTimeFilter<"PreorderSession"> | Date | string
    updatedAt?: DateTimeFilter<"PreorderSession"> | Date | string
    mySessions?: MySessionListRelationFilter
  }, "id">

  export type PreorderSessionOrderByWithAggregationInput = {
    id?: SortOrder
    session?: SortOrder
    userId?: SortOrder
    data?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PreorderSessionCountOrderByAggregateInput
    _max?: PreorderSessionMaxOrderByAggregateInput
    _min?: PreorderSessionMinOrderByAggregateInput
  }

  export type PreorderSessionScalarWhereWithAggregatesInput = {
    AND?: PreorderSessionScalarWhereWithAggregatesInput | PreorderSessionScalarWhereWithAggregatesInput[]
    OR?: PreorderSessionScalarWhereWithAggregatesInput[]
    NOT?: PreorderSessionScalarWhereWithAggregatesInput | PreorderSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PreorderSession"> | string
    session?: StringWithAggregatesFilter<"PreorderSession"> | string
    userId?: StringWithAggregatesFilter<"PreorderSession"> | string
    data?: JsonWithAggregatesFilter<"PreorderSession">
    isActive?: BoolWithAggregatesFilter<"PreorderSession"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"PreorderSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PreorderSession"> | Date | string
  }

  export type TableSaleSessionWhereInput = {
    AND?: TableSaleSessionWhereInput | TableSaleSessionWhereInput[]
    OR?: TableSaleSessionWhereInput[]
    NOT?: TableSaleSessionWhereInput | TableSaleSessionWhereInput[]
    id?: StringFilter<"TableSaleSession"> | string
    name?: StringFilter<"TableSaleSession"> | string
    tableId?: StringFilter<"TableSaleSession"> | string
    session?: StringFilter<"TableSaleSession"> | string
    managerId?: StringNullableFilter<"TableSaleSession"> | string | null
    salesPersonId?: StringNullableFilter<"TableSaleSession"> | string | null
    data?: JsonNullableFilter<"TableSaleSession">
    soldData?: JsonNullableFilter<"TableSaleSession">
    isActive?: BoolFilter<"TableSaleSession"> | boolean
    createdAt?: DateTimeFilter<"TableSaleSession"> | Date | string
    updatedAt?: DateTimeFilter<"TableSaleSession"> | Date | string
    bookSales?: BookSaleListRelationFilter
    mySessions?: MySessionListRelationFilter
  }

  export type TableSaleSessionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    tableId?: SortOrder
    session?: SortOrder
    managerId?: SortOrderInput | SortOrder
    salesPersonId?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    soldData?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bookSales?: BookSaleOrderByRelationAggregateInput
    mySessions?: MySessionOrderByRelationAggregateInput
  }

  export type TableSaleSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TableSaleSessionWhereInput | TableSaleSessionWhereInput[]
    OR?: TableSaleSessionWhereInput[]
    NOT?: TableSaleSessionWhereInput | TableSaleSessionWhereInput[]
    name?: StringFilter<"TableSaleSession"> | string
    tableId?: StringFilter<"TableSaleSession"> | string
    session?: StringFilter<"TableSaleSession"> | string
    managerId?: StringNullableFilter<"TableSaleSession"> | string | null
    salesPersonId?: StringNullableFilter<"TableSaleSession"> | string | null
    data?: JsonNullableFilter<"TableSaleSession">
    soldData?: JsonNullableFilter<"TableSaleSession">
    isActive?: BoolFilter<"TableSaleSession"> | boolean
    createdAt?: DateTimeFilter<"TableSaleSession"> | Date | string
    updatedAt?: DateTimeFilter<"TableSaleSession"> | Date | string
    bookSales?: BookSaleListRelationFilter
    mySessions?: MySessionListRelationFilter
  }, "id">

  export type TableSaleSessionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    tableId?: SortOrder
    session?: SortOrder
    managerId?: SortOrderInput | SortOrder
    salesPersonId?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    soldData?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TableSaleSessionCountOrderByAggregateInput
    _max?: TableSaleSessionMaxOrderByAggregateInput
    _min?: TableSaleSessionMinOrderByAggregateInput
  }

  export type TableSaleSessionScalarWhereWithAggregatesInput = {
    AND?: TableSaleSessionScalarWhereWithAggregatesInput | TableSaleSessionScalarWhereWithAggregatesInput[]
    OR?: TableSaleSessionScalarWhereWithAggregatesInput[]
    NOT?: TableSaleSessionScalarWhereWithAggregatesInput | TableSaleSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TableSaleSession"> | string
    name?: StringWithAggregatesFilter<"TableSaleSession"> | string
    tableId?: StringWithAggregatesFilter<"TableSaleSession"> | string
    session?: StringWithAggregatesFilter<"TableSaleSession"> | string
    managerId?: StringNullableWithAggregatesFilter<"TableSaleSession"> | string | null
    salesPersonId?: StringNullableWithAggregatesFilter<"TableSaleSession"> | string | null
    data?: JsonNullableWithAggregatesFilter<"TableSaleSession">
    soldData?: JsonNullableWithAggregatesFilter<"TableSaleSession">
    isActive?: BoolWithAggregatesFilter<"TableSaleSession"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"TableSaleSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TableSaleSession"> | Date | string
  }

  export type MySessionWhereInput = {
    AND?: MySessionWhereInput | MySessionWhereInput[]
    OR?: MySessionWhereInput[]
    NOT?: MySessionWhereInput | MySessionWhereInput[]
    id?: StringFilter<"MySession"> | string
    userId?: StringFilter<"MySession"> | string
    session?: StringFilter<"MySession"> | string
    workspace?: StringFilter<"MySession"> | string
    data?: JsonNullableFilter<"MySession">
    isActive?: BoolFilter<"MySession"> | boolean
    createdAt?: DateTimeFilter<"MySession"> | Date | string
    updatedAt?: DateTimeFilter<"MySession"> | Date | string
    tableSaleSessionId?: StringNullableFilter<"MySession"> | string | null
    miniStoreSessionId?: StringNullableFilter<"MySession"> | string | null
    mainStoreSessionId?: StringNullableFilter<"MySession"> | string | null
    preorderSessionId?: StringNullableFilter<"MySession"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    tableSaleSession?: XOR<TableSaleSessionNullableScalarRelationFilter, TableSaleSessionWhereInput> | null
    miniStoreSession?: XOR<MiniStoreSessionNullableScalarRelationFilter, MiniStoreSessionWhereInput> | null
    mainStoreSession?: XOR<MainStoreSessionNullableScalarRelationFilter, MainStoreSessionWhereInput> | null
    preorderSession?: XOR<PreorderSessionNullableScalarRelationFilter, PreorderSessionWhereInput> | null
  }

  export type MySessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    session?: SortOrder
    workspace?: SortOrder
    data?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tableSaleSessionId?: SortOrderInput | SortOrder
    miniStoreSessionId?: SortOrderInput | SortOrder
    mainStoreSessionId?: SortOrderInput | SortOrder
    preorderSessionId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    tableSaleSession?: TableSaleSessionOrderByWithRelationInput
    miniStoreSession?: MiniStoreSessionOrderByWithRelationInput
    mainStoreSession?: MainStoreSessionOrderByWithRelationInput
    preorderSession?: PreorderSessionOrderByWithRelationInput
  }

  export type MySessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MySessionWhereInput | MySessionWhereInput[]
    OR?: MySessionWhereInput[]
    NOT?: MySessionWhereInput | MySessionWhereInput[]
    userId?: StringFilter<"MySession"> | string
    session?: StringFilter<"MySession"> | string
    workspace?: StringFilter<"MySession"> | string
    data?: JsonNullableFilter<"MySession">
    isActive?: BoolFilter<"MySession"> | boolean
    createdAt?: DateTimeFilter<"MySession"> | Date | string
    updatedAt?: DateTimeFilter<"MySession"> | Date | string
    tableSaleSessionId?: StringNullableFilter<"MySession"> | string | null
    miniStoreSessionId?: StringNullableFilter<"MySession"> | string | null
    mainStoreSessionId?: StringNullableFilter<"MySession"> | string | null
    preorderSessionId?: StringNullableFilter<"MySession"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    tableSaleSession?: XOR<TableSaleSessionNullableScalarRelationFilter, TableSaleSessionWhereInput> | null
    miniStoreSession?: XOR<MiniStoreSessionNullableScalarRelationFilter, MiniStoreSessionWhereInput> | null
    mainStoreSession?: XOR<MainStoreSessionNullableScalarRelationFilter, MainStoreSessionWhereInput> | null
    preorderSession?: XOR<PreorderSessionNullableScalarRelationFilter, PreorderSessionWhereInput> | null
  }, "id">

  export type MySessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    session?: SortOrder
    workspace?: SortOrder
    data?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tableSaleSessionId?: SortOrderInput | SortOrder
    miniStoreSessionId?: SortOrderInput | SortOrder
    mainStoreSessionId?: SortOrderInput | SortOrder
    preorderSessionId?: SortOrderInput | SortOrder
    _count?: MySessionCountOrderByAggregateInput
    _max?: MySessionMaxOrderByAggregateInput
    _min?: MySessionMinOrderByAggregateInput
  }

  export type MySessionScalarWhereWithAggregatesInput = {
    AND?: MySessionScalarWhereWithAggregatesInput | MySessionScalarWhereWithAggregatesInput[]
    OR?: MySessionScalarWhereWithAggregatesInput[]
    NOT?: MySessionScalarWhereWithAggregatesInput | MySessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MySession"> | string
    userId?: StringWithAggregatesFilter<"MySession"> | string
    session?: StringWithAggregatesFilter<"MySession"> | string
    workspace?: StringWithAggregatesFilter<"MySession"> | string
    data?: JsonNullableWithAggregatesFilter<"MySession">
    isActive?: BoolWithAggregatesFilter<"MySession"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"MySession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MySession"> | Date | string
    tableSaleSessionId?: StringNullableWithAggregatesFilter<"MySession"> | string | null
    miniStoreSessionId?: StringNullableWithAggregatesFilter<"MySession"> | string | null
    mainStoreSessionId?: StringNullableWithAggregatesFilter<"MySession"> | string | null
    preorderSessionId?: StringNullableWithAggregatesFilter<"MySession"> | string | null
  }

  export type MiniStoreSessionWhereInput = {
    AND?: MiniStoreSessionWhereInput | MiniStoreSessionWhereInput[]
    OR?: MiniStoreSessionWhereInput[]
    NOT?: MiniStoreSessionWhereInput | MiniStoreSessionWhereInput[]
    id?: StringFilter<"MiniStoreSession"> | string
    session?: StringFilter<"MiniStoreSession"> | string
    managerId?: StringNullableFilter<"MiniStoreSession"> | string | null
    collectedData?: JsonNullableFilter<"MiniStoreSession">
    distributedData?: JsonNullableFilter<"MiniStoreSession">
    data?: JsonNullableFilter<"MiniStoreSession">
    isActive?: BoolFilter<"MiniStoreSession"> | boolean
    createdAt?: DateTimeFilter<"MiniStoreSession"> | Date | string
    updatedAt?: DateTimeFilter<"MiniStoreSession"> | Date | string
    mySessions?: MySessionListRelationFilter
  }

  export type MiniStoreSessionOrderByWithRelationInput = {
    id?: SortOrder
    session?: SortOrder
    managerId?: SortOrderInput | SortOrder
    collectedData?: SortOrderInput | SortOrder
    distributedData?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mySessions?: MySessionOrderByRelationAggregateInput
  }

  export type MiniStoreSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MiniStoreSessionWhereInput | MiniStoreSessionWhereInput[]
    OR?: MiniStoreSessionWhereInput[]
    NOT?: MiniStoreSessionWhereInput | MiniStoreSessionWhereInput[]
    session?: StringFilter<"MiniStoreSession"> | string
    managerId?: StringNullableFilter<"MiniStoreSession"> | string | null
    collectedData?: JsonNullableFilter<"MiniStoreSession">
    distributedData?: JsonNullableFilter<"MiniStoreSession">
    data?: JsonNullableFilter<"MiniStoreSession">
    isActive?: BoolFilter<"MiniStoreSession"> | boolean
    createdAt?: DateTimeFilter<"MiniStoreSession"> | Date | string
    updatedAt?: DateTimeFilter<"MiniStoreSession"> | Date | string
    mySessions?: MySessionListRelationFilter
  }, "id">

  export type MiniStoreSessionOrderByWithAggregationInput = {
    id?: SortOrder
    session?: SortOrder
    managerId?: SortOrderInput | SortOrder
    collectedData?: SortOrderInput | SortOrder
    distributedData?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MiniStoreSessionCountOrderByAggregateInput
    _max?: MiniStoreSessionMaxOrderByAggregateInput
    _min?: MiniStoreSessionMinOrderByAggregateInput
  }

  export type MiniStoreSessionScalarWhereWithAggregatesInput = {
    AND?: MiniStoreSessionScalarWhereWithAggregatesInput | MiniStoreSessionScalarWhereWithAggregatesInput[]
    OR?: MiniStoreSessionScalarWhereWithAggregatesInput[]
    NOT?: MiniStoreSessionScalarWhereWithAggregatesInput | MiniStoreSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MiniStoreSession"> | string
    session?: StringWithAggregatesFilter<"MiniStoreSession"> | string
    managerId?: StringNullableWithAggregatesFilter<"MiniStoreSession"> | string | null
    collectedData?: JsonNullableWithAggregatesFilter<"MiniStoreSession">
    distributedData?: JsonNullableWithAggregatesFilter<"MiniStoreSession">
    data?: JsonNullableWithAggregatesFilter<"MiniStoreSession">
    isActive?: BoolWithAggregatesFilter<"MiniStoreSession"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"MiniStoreSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MiniStoreSession"> | Date | string
  }

  export type MainStoreSessionWhereInput = {
    AND?: MainStoreSessionWhereInput | MainStoreSessionWhereInput[]
    OR?: MainStoreSessionWhereInput[]
    NOT?: MainStoreSessionWhereInput | MainStoreSessionWhereInput[]
    id?: StringFilter<"MainStoreSession"> | string
    name?: StringFilter<"MainStoreSession"> | string
    session?: StringFilter<"MainStoreSession"> | string
    managerId?: StringNullableFilter<"MainStoreSession"> | string | null
    collectedData?: JsonNullableFilter<"MainStoreSession">
    distributedData?: JsonNullableFilter<"MainStoreSession">
    data?: JsonNullableFilter<"MainStoreSession">
    isActive?: BoolFilter<"MainStoreSession"> | boolean
    createdAt?: DateTimeFilter<"MainStoreSession"> | Date | string
    updatedAt?: DateTimeFilter<"MainStoreSession"> | Date | string
    mySessions?: MySessionListRelationFilter
  }

  export type MainStoreSessionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    session?: SortOrder
    managerId?: SortOrderInput | SortOrder
    collectedData?: SortOrderInput | SortOrder
    distributedData?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mySessions?: MySessionOrderByRelationAggregateInput
  }

  export type MainStoreSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MainStoreSessionWhereInput | MainStoreSessionWhereInput[]
    OR?: MainStoreSessionWhereInput[]
    NOT?: MainStoreSessionWhereInput | MainStoreSessionWhereInput[]
    name?: StringFilter<"MainStoreSession"> | string
    session?: StringFilter<"MainStoreSession"> | string
    managerId?: StringNullableFilter<"MainStoreSession"> | string | null
    collectedData?: JsonNullableFilter<"MainStoreSession">
    distributedData?: JsonNullableFilter<"MainStoreSession">
    data?: JsonNullableFilter<"MainStoreSession">
    isActive?: BoolFilter<"MainStoreSession"> | boolean
    createdAt?: DateTimeFilter<"MainStoreSession"> | Date | string
    updatedAt?: DateTimeFilter<"MainStoreSession"> | Date | string
    mySessions?: MySessionListRelationFilter
  }, "id">

  export type MainStoreSessionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    session?: SortOrder
    managerId?: SortOrderInput | SortOrder
    collectedData?: SortOrderInput | SortOrder
    distributedData?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MainStoreSessionCountOrderByAggregateInput
    _max?: MainStoreSessionMaxOrderByAggregateInput
    _min?: MainStoreSessionMinOrderByAggregateInput
  }

  export type MainStoreSessionScalarWhereWithAggregatesInput = {
    AND?: MainStoreSessionScalarWhereWithAggregatesInput | MainStoreSessionScalarWhereWithAggregatesInput[]
    OR?: MainStoreSessionScalarWhereWithAggregatesInput[]
    NOT?: MainStoreSessionScalarWhereWithAggregatesInput | MainStoreSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MainStoreSession"> | string
    name?: StringWithAggregatesFilter<"MainStoreSession"> | string
    session?: StringWithAggregatesFilter<"MainStoreSession"> | string
    managerId?: StringNullableWithAggregatesFilter<"MainStoreSession"> | string | null
    collectedData?: JsonNullableWithAggregatesFilter<"MainStoreSession">
    distributedData?: JsonNullableWithAggregatesFilter<"MainStoreSession">
    data?: JsonNullableWithAggregatesFilter<"MainStoreSession">
    isActive?: BoolWithAggregatesFilter<"MainStoreSession"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"MainStoreSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MainStoreSession"> | Date | string
  }

  export type BookWhereInput = {
    AND?: BookWhereInput | BookWhereInput[]
    OR?: BookWhereInput[]
    NOT?: BookWhereInput | BookWhereInput[]
    id?: StringFilter<"Book"> | string
    title?: StringFilter<"Book"> | string
    total?: IntFilter<"Book"> | number
    available?: IntFilter<"Book"> | number
    preorderTotal?: IntFilter<"Book"> | number
    preorderAvailable?: IntFilter<"Book"> | number
    salesTotal?: IntFilter<"Book"> | number
    salesAvailable?: IntFilter<"Book"> | number
    price?: FloatFilter<"Book"> | number
    isActive?: BoolFilter<"Book"> | boolean
    createdAt?: DateTimeFilter<"Book"> | Date | string
    updatedAt?: DateTimeFilter<"Book"> | Date | string
    sales?: BookSaleItemListRelationFilter
    preorders?: OrderItemListRelationFilter
  }

  export type BookOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    total?: SortOrder
    available?: SortOrder
    preorderTotal?: SortOrder
    preorderAvailable?: SortOrder
    salesTotal?: SortOrder
    salesAvailable?: SortOrder
    price?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sales?: BookSaleItemOrderByRelationAggregateInput
    preorders?: OrderItemOrderByRelationAggregateInput
  }

  export type BookWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BookWhereInput | BookWhereInput[]
    OR?: BookWhereInput[]
    NOT?: BookWhereInput | BookWhereInput[]
    title?: StringFilter<"Book"> | string
    total?: IntFilter<"Book"> | number
    available?: IntFilter<"Book"> | number
    preorderTotal?: IntFilter<"Book"> | number
    preorderAvailable?: IntFilter<"Book"> | number
    salesTotal?: IntFilter<"Book"> | number
    salesAvailable?: IntFilter<"Book"> | number
    price?: FloatFilter<"Book"> | number
    isActive?: BoolFilter<"Book"> | boolean
    createdAt?: DateTimeFilter<"Book"> | Date | string
    updatedAt?: DateTimeFilter<"Book"> | Date | string
    sales?: BookSaleItemListRelationFilter
    preorders?: OrderItemListRelationFilter
  }, "id">

  export type BookOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    total?: SortOrder
    available?: SortOrder
    preorderTotal?: SortOrder
    preorderAvailable?: SortOrder
    salesTotal?: SortOrder
    salesAvailable?: SortOrder
    price?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookCountOrderByAggregateInput
    _avg?: BookAvgOrderByAggregateInput
    _max?: BookMaxOrderByAggregateInput
    _min?: BookMinOrderByAggregateInput
    _sum?: BookSumOrderByAggregateInput
  }

  export type BookScalarWhereWithAggregatesInput = {
    AND?: BookScalarWhereWithAggregatesInput | BookScalarWhereWithAggregatesInput[]
    OR?: BookScalarWhereWithAggregatesInput[]
    NOT?: BookScalarWhereWithAggregatesInput | BookScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Book"> | string
    title?: StringWithAggregatesFilter<"Book"> | string
    total?: IntWithAggregatesFilter<"Book"> | number
    available?: IntWithAggregatesFilter<"Book"> | number
    preorderTotal?: IntWithAggregatesFilter<"Book"> | number
    preorderAvailable?: IntWithAggregatesFilter<"Book"> | number
    salesTotal?: IntWithAggregatesFilter<"Book"> | number
    salesAvailable?: IntWithAggregatesFilter<"Book"> | number
    price?: FloatWithAggregatesFilter<"Book"> | number
    isActive?: BoolWithAggregatesFilter<"Book"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Book"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Book"> | Date | string
  }

  export type BookSaleWhereInput = {
    AND?: BookSaleWhereInput | BookSaleWhereInput[]
    OR?: BookSaleWhereInput[]
    NOT?: BookSaleWhereInput | BookSaleWhereInput[]
    id?: StringFilter<"BookSale"> | string
    orderNumber?: StringFilter<"BookSale"> | string
    fullName?: StringFilter<"BookSale"> | string
    email?: StringFilter<"BookSale"> | string
    phoneNumber?: StringNullableFilter<"BookSale"> | string | null
    isPaid?: BoolFilter<"BookSale"> | boolean
    purchasedAt?: DateTimeNullableFilter<"BookSale"> | Date | string | null
    orderStatus?: StringFilter<"BookSale"> | string
    total?: FloatFilter<"BookSale"> | number
    sessionId?: StringFilter<"BookSale"> | string
    createdAt?: DateTimeFilter<"BookSale"> | Date | string
    updatedAt?: DateTimeFilter<"BookSale"> | Date | string
    items?: BookSaleItemListRelationFilter
    session?: XOR<TableSaleSessionScalarRelationFilter, TableSaleSessionWhereInput>
  }

  export type BookSaleOrderByWithRelationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    isPaid?: SortOrder
    purchasedAt?: SortOrderInput | SortOrder
    orderStatus?: SortOrder
    total?: SortOrder
    sessionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    items?: BookSaleItemOrderByRelationAggregateInput
    session?: TableSaleSessionOrderByWithRelationInput
  }

  export type BookSaleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BookSaleWhereInput | BookSaleWhereInput[]
    OR?: BookSaleWhereInput[]
    NOT?: BookSaleWhereInput | BookSaleWhereInput[]
    orderNumber?: StringFilter<"BookSale"> | string
    fullName?: StringFilter<"BookSale"> | string
    email?: StringFilter<"BookSale"> | string
    phoneNumber?: StringNullableFilter<"BookSale"> | string | null
    isPaid?: BoolFilter<"BookSale"> | boolean
    purchasedAt?: DateTimeNullableFilter<"BookSale"> | Date | string | null
    orderStatus?: StringFilter<"BookSale"> | string
    total?: FloatFilter<"BookSale"> | number
    sessionId?: StringFilter<"BookSale"> | string
    createdAt?: DateTimeFilter<"BookSale"> | Date | string
    updatedAt?: DateTimeFilter<"BookSale"> | Date | string
    items?: BookSaleItemListRelationFilter
    session?: XOR<TableSaleSessionScalarRelationFilter, TableSaleSessionWhereInput>
  }, "id">

  export type BookSaleOrderByWithAggregationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    isPaid?: SortOrder
    purchasedAt?: SortOrderInput | SortOrder
    orderStatus?: SortOrder
    total?: SortOrder
    sessionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookSaleCountOrderByAggregateInput
    _avg?: BookSaleAvgOrderByAggregateInput
    _max?: BookSaleMaxOrderByAggregateInput
    _min?: BookSaleMinOrderByAggregateInput
    _sum?: BookSaleSumOrderByAggregateInput
  }

  export type BookSaleScalarWhereWithAggregatesInput = {
    AND?: BookSaleScalarWhereWithAggregatesInput | BookSaleScalarWhereWithAggregatesInput[]
    OR?: BookSaleScalarWhereWithAggregatesInput[]
    NOT?: BookSaleScalarWhereWithAggregatesInput | BookSaleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BookSale"> | string
    orderNumber?: StringWithAggregatesFilter<"BookSale"> | string
    fullName?: StringWithAggregatesFilter<"BookSale"> | string
    email?: StringWithAggregatesFilter<"BookSale"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"BookSale"> | string | null
    isPaid?: BoolWithAggregatesFilter<"BookSale"> | boolean
    purchasedAt?: DateTimeNullableWithAggregatesFilter<"BookSale"> | Date | string | null
    orderStatus?: StringWithAggregatesFilter<"BookSale"> | string
    total?: FloatWithAggregatesFilter<"BookSale"> | number
    sessionId?: StringWithAggregatesFilter<"BookSale"> | string
    createdAt?: DateTimeWithAggregatesFilter<"BookSale"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BookSale"> | Date | string
  }

  export type BookSaleItemWhereInput = {
    AND?: BookSaleItemWhereInput | BookSaleItemWhereInput[]
    OR?: BookSaleItemWhereInput[]
    NOT?: BookSaleItemWhereInput | BookSaleItemWhereInput[]
    id?: StringFilter<"BookSaleItem"> | string
    bookSaleId?: StringFilter<"BookSaleItem"> | string
    bookId?: StringFilter<"BookSaleItem"> | string
    quantity?: IntFilter<"BookSaleItem"> | number
    price?: FloatFilter<"BookSaleItem"> | number
    createdAt?: DateTimeFilter<"BookSaleItem"> | Date | string
    updatedAt?: DateTimeFilter<"BookSaleItem"> | Date | string
    bookSale?: XOR<BookSaleScalarRelationFilter, BookSaleWhereInput>
    book?: XOR<BookScalarRelationFilter, BookWhereInput>
  }

  export type BookSaleItemOrderByWithRelationInput = {
    id?: SortOrder
    bookSaleId?: SortOrder
    bookId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bookSale?: BookSaleOrderByWithRelationInput
    book?: BookOrderByWithRelationInput
  }

  export type BookSaleItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BookSaleItemWhereInput | BookSaleItemWhereInput[]
    OR?: BookSaleItemWhereInput[]
    NOT?: BookSaleItemWhereInput | BookSaleItemWhereInput[]
    bookSaleId?: StringFilter<"BookSaleItem"> | string
    bookId?: StringFilter<"BookSaleItem"> | string
    quantity?: IntFilter<"BookSaleItem"> | number
    price?: FloatFilter<"BookSaleItem"> | number
    createdAt?: DateTimeFilter<"BookSaleItem"> | Date | string
    updatedAt?: DateTimeFilter<"BookSaleItem"> | Date | string
    bookSale?: XOR<BookSaleScalarRelationFilter, BookSaleWhereInput>
    book?: XOR<BookScalarRelationFilter, BookWhereInput>
  }, "id">

  export type BookSaleItemOrderByWithAggregationInput = {
    id?: SortOrder
    bookSaleId?: SortOrder
    bookId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookSaleItemCountOrderByAggregateInput
    _avg?: BookSaleItemAvgOrderByAggregateInput
    _max?: BookSaleItemMaxOrderByAggregateInput
    _min?: BookSaleItemMinOrderByAggregateInput
    _sum?: BookSaleItemSumOrderByAggregateInput
  }

  export type BookSaleItemScalarWhereWithAggregatesInput = {
    AND?: BookSaleItemScalarWhereWithAggregatesInput | BookSaleItemScalarWhereWithAggregatesInput[]
    OR?: BookSaleItemScalarWhereWithAggregatesInput[]
    NOT?: BookSaleItemScalarWhereWithAggregatesInput | BookSaleItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BookSaleItem"> | string
    bookSaleId?: StringWithAggregatesFilter<"BookSaleItem"> | string
    bookId?: StringWithAggregatesFilter<"BookSaleItem"> | string
    quantity?: IntWithAggregatesFilter<"BookSaleItem"> | number
    price?: FloatWithAggregatesFilter<"BookSaleItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"BookSaleItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BookSaleItem"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    consolidations?: ConsolidationCreateNestedManyWithoutUserInput
    mySessions?: MySessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    consolidations?: ConsolidationUncheckedCreateNestedManyWithoutUserInput
    mySessions?: MySessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    consolidations?: ConsolidationUpdateManyWithoutUserNestedInput
    mySessions?: MySessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    consolidations?: ConsolidationUncheckedUpdateManyWithoutUserNestedInput
    mySessions?: MySessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingCreateInput = {
    id: string
    currentSession?: string | null
    adminPassword?: string | null
    mainStoreData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SettingUncheckedCreateInput = {
    id: string
    currentSession?: string | null
    adminPassword?: string | null
    mainStoreData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentSession?: NullableStringFieldUpdateOperationsInput | string | null
    adminPassword?: NullableStringFieldUpdateOperationsInput | string | null
    mainStoreData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentSession?: NullableStringFieldUpdateOperationsInput | string | null
    adminPassword?: NullableStringFieldUpdateOperationsInput | string | null
    mainStoreData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SettingCreateManyInput = {
    id: string
    currentSession?: string | null
    adminPassword?: string | null
    mainStoreData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentSession?: NullableStringFieldUpdateOperationsInput | string | null
    adminPassword?: NullableStringFieldUpdateOperationsInput | string | null
    mainStoreData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentSession?: NullableStringFieldUpdateOperationsInput | string | null
    adminPassword?: NullableStringFieldUpdateOperationsInput | string | null
    mainStoreData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PreOrderCreateInput = {
    id: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    isPartiallyCollected?: boolean
    purchasedAt?: Date | string | null
    shippingZone?: string | null
    orderStatus?: string
    total?: number
    items?: OrderItemCreateNestedManyWithoutOrderInput
    consolidations?: ConsolidationCreateNestedManyWithoutOrderInput
  }

  export type PreOrderUncheckedCreateInput = {
    id: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    isPartiallyCollected?: boolean
    purchasedAt?: Date | string | null
    shippingZone?: string | null
    orderStatus?: string
    total?: number
    items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    consolidations?: ConsolidationUncheckedCreateNestedManyWithoutOrderInput
  }

  export type PreOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    isPartiallyCollected?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingZone?: NullableStringFieldUpdateOperationsInput | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    items?: OrderItemUpdateManyWithoutOrderNestedInput
    consolidations?: ConsolidationUpdateManyWithoutOrderNestedInput
  }

  export type PreOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    isPartiallyCollected?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingZone?: NullableStringFieldUpdateOperationsInput | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    consolidations?: ConsolidationUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type PreOrderCreateManyInput = {
    id: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    isPartiallyCollected?: boolean
    purchasedAt?: Date | string | null
    shippingZone?: string | null
    orderStatus?: string
    total?: number
  }

  export type PreOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    isPartiallyCollected?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingZone?: NullableStringFieldUpdateOperationsInput | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
  }

  export type PreOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    isPartiallyCollected?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingZone?: NullableStringFieldUpdateOperationsInput | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
  }

  export type OrderItemCreateInput = {
    id: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    productName: string
    order: PreOrderCreateNestedOneWithoutItemsInput
    book?: BookCreateNestedOneWithoutPreordersInput
    consolidation?: ConsolidationCreateNestedOneWithoutItemsInput
  }

  export type OrderItemUncheckedCreateInput = {
    id: string
    orderId: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    productName: string
    bookId?: string | null
    consolidationId?: number | null
  }

  export type OrderItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    productName?: StringFieldUpdateOperationsInput | string
    order?: PreOrderUpdateOneRequiredWithoutItemsNestedInput
    book?: BookUpdateOneWithoutPreordersNestedInput
    consolidation?: ConsolidationUpdateOneWithoutItemsNestedInput
  }

  export type OrderItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    productName?: StringFieldUpdateOperationsInput | string
    bookId?: NullableStringFieldUpdateOperationsInput | string | null
    consolidationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderItemCreateManyInput = {
    id: string
    orderId: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    productName: string
    bookId?: string | null
    consolidationId?: number | null
  }

  export type OrderItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    productName?: StringFieldUpdateOperationsInput | string
  }

  export type OrderItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    productName?: StringFieldUpdateOperationsInput | string
    bookId?: NullableStringFieldUpdateOperationsInput | string | null
    consolidationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ConsolidationCreateInput = {
    date: Date | string
    session: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConsolidationsInput
    order?: PreOrderCreateNestedOneWithoutConsolidationsInput
    items?: OrderItemCreateNestedManyWithoutConsolidationInput
  }

  export type ConsolidationUncheckedCreateInput = {
    id?: number
    date: Date | string
    session: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: string | null
    items?: OrderItemUncheckedCreateNestedManyWithoutConsolidationInput
  }

  export type ConsolidationUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConsolidationsNestedInput
    order?: PreOrderUpdateOneWithoutConsolidationsNestedInput
    items?: OrderItemUpdateManyWithoutConsolidationNestedInput
  }

  export type ConsolidationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    items?: OrderItemUncheckedUpdateManyWithoutConsolidationNestedInput
  }

  export type ConsolidationCreateManyInput = {
    id?: number
    date: Date | string
    session: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: string | null
  }

  export type ConsolidationUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsolidationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PreorderSessionCreateInput = {
    id?: string
    session: string
    userId: string
    data: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    mySessions?: MySessionCreateNestedManyWithoutPreorderSessionInput
  }

  export type PreorderSessionUncheckedCreateInput = {
    id?: string
    session: string
    userId: string
    data: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    mySessions?: MySessionUncheckedCreateNestedManyWithoutPreorderSessionInput
  }

  export type PreorderSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mySessions?: MySessionUpdateManyWithoutPreorderSessionNestedInput
  }

  export type PreorderSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mySessions?: MySessionUncheckedUpdateManyWithoutPreorderSessionNestedInput
  }

  export type PreorderSessionCreateManyInput = {
    id?: string
    session: string
    userId: string
    data: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PreorderSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreorderSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TableSaleSessionCreateInput = {
    id?: string
    name: string
    tableId: string
    session: string
    managerId?: string | null
    salesPersonId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    soldData?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    bookSales?: BookSaleCreateNestedManyWithoutSessionInput
    mySessions?: MySessionCreateNestedManyWithoutTableSaleSessionInput
  }

  export type TableSaleSessionUncheckedCreateInput = {
    id?: string
    name: string
    tableId: string
    session: string
    managerId?: string | null
    salesPersonId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    soldData?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    bookSales?: BookSaleUncheckedCreateNestedManyWithoutSessionInput
    mySessions?: MySessionUncheckedCreateNestedManyWithoutTableSaleSessionInput
  }

  export type TableSaleSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tableId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    salesPersonId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    soldData?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookSales?: BookSaleUpdateManyWithoutSessionNestedInput
    mySessions?: MySessionUpdateManyWithoutTableSaleSessionNestedInput
  }

  export type TableSaleSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tableId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    salesPersonId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    soldData?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookSales?: BookSaleUncheckedUpdateManyWithoutSessionNestedInput
    mySessions?: MySessionUncheckedUpdateManyWithoutTableSaleSessionNestedInput
  }

  export type TableSaleSessionCreateManyInput = {
    id?: string
    name: string
    tableId: string
    session: string
    managerId?: string | null
    salesPersonId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    soldData?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TableSaleSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tableId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    salesPersonId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    soldData?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TableSaleSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tableId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    salesPersonId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    soldData?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MySessionCreateInput = {
    id?: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMySessionsInput
    tableSaleSession?: TableSaleSessionCreateNestedOneWithoutMySessionsInput
    miniStoreSession?: MiniStoreSessionCreateNestedOneWithoutMySessionsInput
    mainStoreSession?: MainStoreSessionCreateNestedOneWithoutMySessionsInput
    preorderSession?: PreorderSessionCreateNestedOneWithoutMySessionsInput
  }

  export type MySessionUncheckedCreateInput = {
    id?: string
    userId: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tableSaleSessionId?: string | null
    miniStoreSessionId?: string | null
    mainStoreSessionId?: string | null
    preorderSessionId?: string | null
  }

  export type MySessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMySessionsNestedInput
    tableSaleSession?: TableSaleSessionUpdateOneWithoutMySessionsNestedInput
    miniStoreSession?: MiniStoreSessionUpdateOneWithoutMySessionsNestedInput
    mainStoreSession?: MainStoreSessionUpdateOneWithoutMySessionsNestedInput
    preorderSession?: PreorderSessionUpdateOneWithoutMySessionsNestedInput
  }

  export type MySessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tableSaleSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    miniStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    mainStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    preorderSessionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MySessionCreateManyInput = {
    id?: string
    userId: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tableSaleSessionId?: string | null
    miniStoreSessionId?: string | null
    mainStoreSessionId?: string | null
    preorderSessionId?: string | null
  }

  export type MySessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MySessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tableSaleSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    miniStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    mainStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    preorderSessionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MiniStoreSessionCreateInput = {
    id?: string
    session: string
    managerId?: string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    mySessions?: MySessionCreateNestedManyWithoutMiniStoreSessionInput
  }

  export type MiniStoreSessionUncheckedCreateInput = {
    id?: string
    session: string
    managerId?: string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    mySessions?: MySessionUncheckedCreateNestedManyWithoutMiniStoreSessionInput
  }

  export type MiniStoreSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mySessions?: MySessionUpdateManyWithoutMiniStoreSessionNestedInput
  }

  export type MiniStoreSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mySessions?: MySessionUncheckedUpdateManyWithoutMiniStoreSessionNestedInput
  }

  export type MiniStoreSessionCreateManyInput = {
    id?: string
    session: string
    managerId?: string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MiniStoreSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MiniStoreSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MainStoreSessionCreateInput = {
    id?: string
    name: string
    session: string
    managerId?: string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    mySessions?: MySessionCreateNestedManyWithoutMainStoreSessionInput
  }

  export type MainStoreSessionUncheckedCreateInput = {
    id?: string
    name: string
    session: string
    managerId?: string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    mySessions?: MySessionUncheckedCreateNestedManyWithoutMainStoreSessionInput
  }

  export type MainStoreSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mySessions?: MySessionUpdateManyWithoutMainStoreSessionNestedInput
  }

  export type MainStoreSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mySessions?: MySessionUncheckedUpdateManyWithoutMainStoreSessionNestedInput
  }

  export type MainStoreSessionCreateManyInput = {
    id?: string
    name: string
    session: string
    managerId?: string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MainStoreSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MainStoreSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookCreateInput = {
    id?: string
    title: string
    total: number
    available: number
    preorderTotal: number
    preorderAvailable: number
    salesTotal: number
    salesAvailable: number
    price: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sales?: BookSaleItemCreateNestedManyWithoutBookInput
    preorders?: OrderItemCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateInput = {
    id?: string
    title: string
    total: number
    available: number
    preorderTotal: number
    preorderAvailable: number
    salesTotal: number
    salesAvailable: number
    price: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sales?: BookSaleItemUncheckedCreateNestedManyWithoutBookInput
    preorders?: OrderItemUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    preorderTotal?: IntFieldUpdateOperationsInput | number
    preorderAvailable?: IntFieldUpdateOperationsInput | number
    salesTotal?: IntFieldUpdateOperationsInput | number
    salesAvailable?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sales?: BookSaleItemUpdateManyWithoutBookNestedInput
    preorders?: OrderItemUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    preorderTotal?: IntFieldUpdateOperationsInput | number
    preorderAvailable?: IntFieldUpdateOperationsInput | number
    salesTotal?: IntFieldUpdateOperationsInput | number
    salesAvailable?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sales?: BookSaleItemUncheckedUpdateManyWithoutBookNestedInput
    preorders?: OrderItemUncheckedUpdateManyWithoutBookNestedInput
  }

  export type BookCreateManyInput = {
    id?: string
    title: string
    total: number
    available: number
    preorderTotal: number
    preorderAvailable: number
    salesTotal: number
    salesAvailable: number
    price: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    preorderTotal?: IntFieldUpdateOperationsInput | number
    preorderAvailable?: IntFieldUpdateOperationsInput | number
    salesTotal?: IntFieldUpdateOperationsInput | number
    salesAvailable?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    preorderTotal?: IntFieldUpdateOperationsInput | number
    preorderAvailable?: IntFieldUpdateOperationsInput | number
    salesTotal?: IntFieldUpdateOperationsInput | number
    salesAvailable?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookSaleCreateInput = {
    id?: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber?: string | null
    isPaid?: boolean
    purchasedAt?: Date | string | null
    orderStatus?: string
    total?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: BookSaleItemCreateNestedManyWithoutBookSaleInput
    session: TableSaleSessionCreateNestedOneWithoutBookSalesInput
  }

  export type BookSaleUncheckedCreateInput = {
    id?: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber?: string | null
    isPaid?: boolean
    purchasedAt?: Date | string | null
    orderStatus?: string
    total?: number
    sessionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: BookSaleItemUncheckedCreateNestedManyWithoutBookSaleInput
  }

  export type BookSaleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: BookSaleItemUpdateManyWithoutBookSaleNestedInput
    session?: TableSaleSessionUpdateOneRequiredWithoutBookSalesNestedInput
  }

  export type BookSaleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: BookSaleItemUncheckedUpdateManyWithoutBookSaleNestedInput
  }

  export type BookSaleCreateManyInput = {
    id?: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber?: string | null
    isPaid?: boolean
    purchasedAt?: Date | string | null
    orderStatus?: string
    total?: number
    sessionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookSaleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookSaleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookSaleItemCreateInput = {
    id?: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    bookSale: BookSaleCreateNestedOneWithoutItemsInput
    book: BookCreateNestedOneWithoutSalesInput
  }

  export type BookSaleItemUncheckedCreateInput = {
    id?: string
    bookSaleId: string
    bookId: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookSaleItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookSale?: BookSaleUpdateOneRequiredWithoutItemsNestedInput
    book?: BookUpdateOneRequiredWithoutSalesNestedInput
  }

  export type BookSaleItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bookSaleId?: StringFieldUpdateOperationsInput | string
    bookId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookSaleItemCreateManyInput = {
    id?: string
    bookSaleId: string
    bookId: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookSaleItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookSaleItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    bookSaleId?: StringFieldUpdateOperationsInput | string
    bookId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type ConsolidationListRelationFilter = {
    every?: ConsolidationWhereInput
    some?: ConsolidationWhereInput
    none?: ConsolidationWhereInput
  }

  export type MySessionListRelationFilter = {
    every?: MySessionWhereInput
    some?: MySessionWhereInput
    none?: MySessionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConsolidationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MySessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SettingCountOrderByAggregateInput = {
    id?: SortOrder
    currentSession?: SortOrder
    adminPassword?: SortOrder
    mainStoreData?: SortOrder
  }

  export type SettingMaxOrderByAggregateInput = {
    id?: SortOrder
    currentSession?: SortOrder
    adminPassword?: SortOrder
  }

  export type SettingMinOrderByAggregateInput = {
    id?: SortOrder
    currentSession?: SortOrder
    adminPassword?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type OrderItemListRelationFilter = {
    every?: OrderItemWhereInput
    some?: OrderItemWhereInput
    none?: OrderItemWhereInput
  }

  export type OrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PreOrderCountOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isCollected?: SortOrder
    isPartiallyCollected?: SortOrder
    purchasedAt?: SortOrder
    shippingZone?: SortOrder
    orderStatus?: SortOrder
    total?: SortOrder
  }

  export type PreOrderAvgOrderByAggregateInput = {
    total?: SortOrder
  }

  export type PreOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isCollected?: SortOrder
    isPartiallyCollected?: SortOrder
    purchasedAt?: SortOrder
    shippingZone?: SortOrder
    orderStatus?: SortOrder
    total?: SortOrder
  }

  export type PreOrderMinOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isCollected?: SortOrder
    isPartiallyCollected?: SortOrder
    purchasedAt?: SortOrder
    shippingZone?: SortOrder
    orderStatus?: SortOrder
    total?: SortOrder
  }

  export type PreOrderSumOrderByAggregateInput = {
    total?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type PreOrderScalarRelationFilter = {
    is?: PreOrderWhereInput
    isNot?: PreOrderWhereInput
  }

  export type BookNullableScalarRelationFilter = {
    is?: BookWhereInput | null
    isNot?: BookWhereInput | null
  }

  export type ConsolidationNullableScalarRelationFilter = {
    is?: ConsolidationWhereInput | null
    isNot?: ConsolidationWhereInput | null
  }

  export type OrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isCollected?: SortOrder
    productName?: SortOrder
    bookId?: SortOrder
    consolidationId?: SortOrder
  }

  export type OrderItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
    consolidationId?: SortOrder
  }

  export type OrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isCollected?: SortOrder
    productName?: SortOrder
    bookId?: SortOrder
    consolidationId?: SortOrder
  }

  export type OrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isCollected?: SortOrder
    productName?: SortOrder
    bookId?: SortOrder
    consolidationId?: SortOrder
  }

  export type OrderItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
    consolidationId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type PreOrderNullableScalarRelationFilter = {
    is?: PreOrderWhereInput | null
    isNot?: PreOrderWhereInput | null
  }

  export type ConsolidationCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    session?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrder
  }

  export type ConsolidationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ConsolidationMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    session?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrder
  }

  export type ConsolidationMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    session?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrder
  }

  export type ConsolidationSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PreorderSessionCountOrderByAggregateInput = {
    id?: SortOrder
    session?: SortOrder
    userId?: SortOrder
    data?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PreorderSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    session?: SortOrder
    userId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PreorderSessionMinOrderByAggregateInput = {
    id?: SortOrder
    session?: SortOrder
    userId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BookSaleListRelationFilter = {
    every?: BookSaleWhereInput
    some?: BookSaleWhereInput
    none?: BookSaleWhereInput
  }

  export type BookSaleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TableSaleSessionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tableId?: SortOrder
    session?: SortOrder
    managerId?: SortOrder
    salesPersonId?: SortOrder
    data?: SortOrder
    soldData?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TableSaleSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tableId?: SortOrder
    session?: SortOrder
    managerId?: SortOrder
    salesPersonId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TableSaleSessionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tableId?: SortOrder
    session?: SortOrder
    managerId?: SortOrder
    salesPersonId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TableSaleSessionNullableScalarRelationFilter = {
    is?: TableSaleSessionWhereInput | null
    isNot?: TableSaleSessionWhereInput | null
  }

  export type MiniStoreSessionNullableScalarRelationFilter = {
    is?: MiniStoreSessionWhereInput | null
    isNot?: MiniStoreSessionWhereInput | null
  }

  export type MainStoreSessionNullableScalarRelationFilter = {
    is?: MainStoreSessionWhereInput | null
    isNot?: MainStoreSessionWhereInput | null
  }

  export type PreorderSessionNullableScalarRelationFilter = {
    is?: PreorderSessionWhereInput | null
    isNot?: PreorderSessionWhereInput | null
  }

  export type MySessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    session?: SortOrder
    workspace?: SortOrder
    data?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tableSaleSessionId?: SortOrder
    miniStoreSessionId?: SortOrder
    mainStoreSessionId?: SortOrder
    preorderSessionId?: SortOrder
  }

  export type MySessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    session?: SortOrder
    workspace?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tableSaleSessionId?: SortOrder
    miniStoreSessionId?: SortOrder
    mainStoreSessionId?: SortOrder
    preorderSessionId?: SortOrder
  }

  export type MySessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    session?: SortOrder
    workspace?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tableSaleSessionId?: SortOrder
    miniStoreSessionId?: SortOrder
    mainStoreSessionId?: SortOrder
    preorderSessionId?: SortOrder
  }

  export type MiniStoreSessionCountOrderByAggregateInput = {
    id?: SortOrder
    session?: SortOrder
    managerId?: SortOrder
    collectedData?: SortOrder
    distributedData?: SortOrder
    data?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MiniStoreSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    session?: SortOrder
    managerId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MiniStoreSessionMinOrderByAggregateInput = {
    id?: SortOrder
    session?: SortOrder
    managerId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MainStoreSessionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    session?: SortOrder
    managerId?: SortOrder
    collectedData?: SortOrder
    distributedData?: SortOrder
    data?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MainStoreSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    session?: SortOrder
    managerId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MainStoreSessionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    session?: SortOrder
    managerId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookSaleItemListRelationFilter = {
    every?: BookSaleItemWhereInput
    some?: BookSaleItemWhereInput
    none?: BookSaleItemWhereInput
  }

  export type BookSaleItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    total?: SortOrder
    available?: SortOrder
    preorderTotal?: SortOrder
    preorderAvailable?: SortOrder
    salesTotal?: SortOrder
    salesAvailable?: SortOrder
    price?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookAvgOrderByAggregateInput = {
    total?: SortOrder
    available?: SortOrder
    preorderTotal?: SortOrder
    preorderAvailable?: SortOrder
    salesTotal?: SortOrder
    salesAvailable?: SortOrder
    price?: SortOrder
  }

  export type BookMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    total?: SortOrder
    available?: SortOrder
    preorderTotal?: SortOrder
    preorderAvailable?: SortOrder
    salesTotal?: SortOrder
    salesAvailable?: SortOrder
    price?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    total?: SortOrder
    available?: SortOrder
    preorderTotal?: SortOrder
    preorderAvailable?: SortOrder
    salesTotal?: SortOrder
    salesAvailable?: SortOrder
    price?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookSumOrderByAggregateInput = {
    total?: SortOrder
    available?: SortOrder
    preorderTotal?: SortOrder
    preorderAvailable?: SortOrder
    salesTotal?: SortOrder
    salesAvailable?: SortOrder
    price?: SortOrder
  }

  export type TableSaleSessionScalarRelationFilter = {
    is?: TableSaleSessionWhereInput
    isNot?: TableSaleSessionWhereInput
  }

  export type BookSaleCountOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    isPaid?: SortOrder
    purchasedAt?: SortOrder
    orderStatus?: SortOrder
    total?: SortOrder
    sessionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookSaleAvgOrderByAggregateInput = {
    total?: SortOrder
  }

  export type BookSaleMaxOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    isPaid?: SortOrder
    purchasedAt?: SortOrder
    orderStatus?: SortOrder
    total?: SortOrder
    sessionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookSaleMinOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    isPaid?: SortOrder
    purchasedAt?: SortOrder
    orderStatus?: SortOrder
    total?: SortOrder
    sessionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookSaleSumOrderByAggregateInput = {
    total?: SortOrder
  }

  export type BookSaleScalarRelationFilter = {
    is?: BookSaleWhereInput
    isNot?: BookSaleWhereInput
  }

  export type BookScalarRelationFilter = {
    is?: BookWhereInput
    isNot?: BookWhereInput
  }

  export type BookSaleItemCountOrderByAggregateInput = {
    id?: SortOrder
    bookSaleId?: SortOrder
    bookId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookSaleItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
  }

  export type BookSaleItemMaxOrderByAggregateInput = {
    id?: SortOrder
    bookSaleId?: SortOrder
    bookId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookSaleItemMinOrderByAggregateInput = {
    id?: SortOrder
    bookSaleId?: SortOrder
    bookId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookSaleItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type ConsolidationCreateNestedManyWithoutUserInput = {
    create?: XOR<ConsolidationCreateWithoutUserInput, ConsolidationUncheckedCreateWithoutUserInput> | ConsolidationCreateWithoutUserInput[] | ConsolidationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConsolidationCreateOrConnectWithoutUserInput | ConsolidationCreateOrConnectWithoutUserInput[]
    createMany?: ConsolidationCreateManyUserInputEnvelope
    connect?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
  }

  export type MySessionCreateNestedManyWithoutUserInput = {
    create?: XOR<MySessionCreateWithoutUserInput, MySessionUncheckedCreateWithoutUserInput> | MySessionCreateWithoutUserInput[] | MySessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutUserInput | MySessionCreateOrConnectWithoutUserInput[]
    createMany?: MySessionCreateManyUserInputEnvelope
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type ConsolidationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ConsolidationCreateWithoutUserInput, ConsolidationUncheckedCreateWithoutUserInput> | ConsolidationCreateWithoutUserInput[] | ConsolidationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConsolidationCreateOrConnectWithoutUserInput | ConsolidationCreateOrConnectWithoutUserInput[]
    createMany?: ConsolidationCreateManyUserInputEnvelope
    connect?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
  }

  export type MySessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MySessionCreateWithoutUserInput, MySessionUncheckedCreateWithoutUserInput> | MySessionCreateWithoutUserInput[] | MySessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutUserInput | MySessionCreateOrConnectWithoutUserInput[]
    createMany?: MySessionCreateManyUserInputEnvelope
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type ConsolidationUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConsolidationCreateWithoutUserInput, ConsolidationUncheckedCreateWithoutUserInput> | ConsolidationCreateWithoutUserInput[] | ConsolidationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConsolidationCreateOrConnectWithoutUserInput | ConsolidationCreateOrConnectWithoutUserInput[]
    upsert?: ConsolidationUpsertWithWhereUniqueWithoutUserInput | ConsolidationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConsolidationCreateManyUserInputEnvelope
    set?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
    disconnect?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
    delete?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
    connect?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
    update?: ConsolidationUpdateWithWhereUniqueWithoutUserInput | ConsolidationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConsolidationUpdateManyWithWhereWithoutUserInput | ConsolidationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConsolidationScalarWhereInput | ConsolidationScalarWhereInput[]
  }

  export type MySessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<MySessionCreateWithoutUserInput, MySessionUncheckedCreateWithoutUserInput> | MySessionCreateWithoutUserInput[] | MySessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutUserInput | MySessionCreateOrConnectWithoutUserInput[]
    upsert?: MySessionUpsertWithWhereUniqueWithoutUserInput | MySessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MySessionCreateManyUserInputEnvelope
    set?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    disconnect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    delete?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    update?: MySessionUpdateWithWhereUniqueWithoutUserInput | MySessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MySessionUpdateManyWithWhereWithoutUserInput | MySessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MySessionScalarWhereInput | MySessionScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type ConsolidationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConsolidationCreateWithoutUserInput, ConsolidationUncheckedCreateWithoutUserInput> | ConsolidationCreateWithoutUserInput[] | ConsolidationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConsolidationCreateOrConnectWithoutUserInput | ConsolidationCreateOrConnectWithoutUserInput[]
    upsert?: ConsolidationUpsertWithWhereUniqueWithoutUserInput | ConsolidationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConsolidationCreateManyUserInputEnvelope
    set?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
    disconnect?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
    delete?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
    connect?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
    update?: ConsolidationUpdateWithWhereUniqueWithoutUserInput | ConsolidationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConsolidationUpdateManyWithWhereWithoutUserInput | ConsolidationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConsolidationScalarWhereInput | ConsolidationScalarWhereInput[]
  }

  export type MySessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MySessionCreateWithoutUserInput, MySessionUncheckedCreateWithoutUserInput> | MySessionCreateWithoutUserInput[] | MySessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutUserInput | MySessionCreateOrConnectWithoutUserInput[]
    upsert?: MySessionUpsertWithWhereUniqueWithoutUserInput | MySessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MySessionCreateManyUserInputEnvelope
    set?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    disconnect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    delete?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    update?: MySessionUpdateWithWhereUniqueWithoutUserInput | MySessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MySessionUpdateManyWithWhereWithoutUserInput | MySessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MySessionScalarWhereInput | MySessionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type OrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type ConsolidationCreateNestedManyWithoutOrderInput = {
    create?: XOR<ConsolidationCreateWithoutOrderInput, ConsolidationUncheckedCreateWithoutOrderInput> | ConsolidationCreateWithoutOrderInput[] | ConsolidationUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ConsolidationCreateOrConnectWithoutOrderInput | ConsolidationCreateOrConnectWithoutOrderInput[]
    createMany?: ConsolidationCreateManyOrderInputEnvelope
    connect?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type ConsolidationUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<ConsolidationCreateWithoutOrderInput, ConsolidationUncheckedCreateWithoutOrderInput> | ConsolidationCreateWithoutOrderInput[] | ConsolidationUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ConsolidationCreateOrConnectWithoutOrderInput | ConsolidationCreateOrConnectWithoutOrderInput[]
    createMany?: ConsolidationCreateManyOrderInputEnvelope
    connect?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrderItemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type ConsolidationUpdateManyWithoutOrderNestedInput = {
    create?: XOR<ConsolidationCreateWithoutOrderInput, ConsolidationUncheckedCreateWithoutOrderInput> | ConsolidationCreateWithoutOrderInput[] | ConsolidationUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ConsolidationCreateOrConnectWithoutOrderInput | ConsolidationCreateOrConnectWithoutOrderInput[]
    upsert?: ConsolidationUpsertWithWhereUniqueWithoutOrderInput | ConsolidationUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: ConsolidationCreateManyOrderInputEnvelope
    set?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
    disconnect?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
    delete?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
    connect?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
    update?: ConsolidationUpdateWithWhereUniqueWithoutOrderInput | ConsolidationUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: ConsolidationUpdateManyWithWhereWithoutOrderInput | ConsolidationUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: ConsolidationScalarWhereInput | ConsolidationScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type ConsolidationUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<ConsolidationCreateWithoutOrderInput, ConsolidationUncheckedCreateWithoutOrderInput> | ConsolidationCreateWithoutOrderInput[] | ConsolidationUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ConsolidationCreateOrConnectWithoutOrderInput | ConsolidationCreateOrConnectWithoutOrderInput[]
    upsert?: ConsolidationUpsertWithWhereUniqueWithoutOrderInput | ConsolidationUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: ConsolidationCreateManyOrderInputEnvelope
    set?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
    disconnect?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
    delete?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
    connect?: ConsolidationWhereUniqueInput | ConsolidationWhereUniqueInput[]
    update?: ConsolidationUpdateWithWhereUniqueWithoutOrderInput | ConsolidationUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: ConsolidationUpdateManyWithWhereWithoutOrderInput | ConsolidationUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: ConsolidationScalarWhereInput | ConsolidationScalarWhereInput[]
  }

  export type PreOrderCreateNestedOneWithoutItemsInput = {
    create?: XOR<PreOrderCreateWithoutItemsInput, PreOrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: PreOrderCreateOrConnectWithoutItemsInput
    connect?: PreOrderWhereUniqueInput
  }

  export type BookCreateNestedOneWithoutPreordersInput = {
    create?: XOR<BookCreateWithoutPreordersInput, BookUncheckedCreateWithoutPreordersInput>
    connectOrCreate?: BookCreateOrConnectWithoutPreordersInput
    connect?: BookWhereUniqueInput
  }

  export type ConsolidationCreateNestedOneWithoutItemsInput = {
    create?: XOR<ConsolidationCreateWithoutItemsInput, ConsolidationUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ConsolidationCreateOrConnectWithoutItemsInput
    connect?: ConsolidationWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PreOrderUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<PreOrderCreateWithoutItemsInput, PreOrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: PreOrderCreateOrConnectWithoutItemsInput
    upsert?: PreOrderUpsertWithoutItemsInput
    connect?: PreOrderWhereUniqueInput
    update?: XOR<XOR<PreOrderUpdateToOneWithWhereWithoutItemsInput, PreOrderUpdateWithoutItemsInput>, PreOrderUncheckedUpdateWithoutItemsInput>
  }

  export type BookUpdateOneWithoutPreordersNestedInput = {
    create?: XOR<BookCreateWithoutPreordersInput, BookUncheckedCreateWithoutPreordersInput>
    connectOrCreate?: BookCreateOrConnectWithoutPreordersInput
    upsert?: BookUpsertWithoutPreordersInput
    disconnect?: BookWhereInput | boolean
    delete?: BookWhereInput | boolean
    connect?: BookWhereUniqueInput
    update?: XOR<XOR<BookUpdateToOneWithWhereWithoutPreordersInput, BookUpdateWithoutPreordersInput>, BookUncheckedUpdateWithoutPreordersInput>
  }

  export type ConsolidationUpdateOneWithoutItemsNestedInput = {
    create?: XOR<ConsolidationCreateWithoutItemsInput, ConsolidationUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ConsolidationCreateOrConnectWithoutItemsInput
    upsert?: ConsolidationUpsertWithoutItemsInput
    disconnect?: ConsolidationWhereInput | boolean
    delete?: ConsolidationWhereInput | boolean
    connect?: ConsolidationWhereUniqueInput
    update?: XOR<XOR<ConsolidationUpdateToOneWithWhereWithoutItemsInput, ConsolidationUpdateWithoutItemsInput>, ConsolidationUncheckedUpdateWithoutItemsInput>
  }

  export type UserCreateNestedOneWithoutConsolidationsInput = {
    create?: XOR<UserCreateWithoutConsolidationsInput, UserUncheckedCreateWithoutConsolidationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConsolidationsInput
    connect?: UserWhereUniqueInput
  }

  export type PreOrderCreateNestedOneWithoutConsolidationsInput = {
    create?: XOR<PreOrderCreateWithoutConsolidationsInput, PreOrderUncheckedCreateWithoutConsolidationsInput>
    connectOrCreate?: PreOrderCreateOrConnectWithoutConsolidationsInput
    connect?: PreOrderWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutConsolidationInput = {
    create?: XOR<OrderItemCreateWithoutConsolidationInput, OrderItemUncheckedCreateWithoutConsolidationInput> | OrderItemCreateWithoutConsolidationInput[] | OrderItemUncheckedCreateWithoutConsolidationInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutConsolidationInput | OrderItemCreateOrConnectWithoutConsolidationInput[]
    createMany?: OrderItemCreateManyConsolidationInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutConsolidationInput = {
    create?: XOR<OrderItemCreateWithoutConsolidationInput, OrderItemUncheckedCreateWithoutConsolidationInput> | OrderItemCreateWithoutConsolidationInput[] | OrderItemUncheckedCreateWithoutConsolidationInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutConsolidationInput | OrderItemCreateOrConnectWithoutConsolidationInput[]
    createMany?: OrderItemCreateManyConsolidationInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutConsolidationsNestedInput = {
    create?: XOR<UserCreateWithoutConsolidationsInput, UserUncheckedCreateWithoutConsolidationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConsolidationsInput
    upsert?: UserUpsertWithoutConsolidationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConsolidationsInput, UserUpdateWithoutConsolidationsInput>, UserUncheckedUpdateWithoutConsolidationsInput>
  }

  export type PreOrderUpdateOneWithoutConsolidationsNestedInput = {
    create?: XOR<PreOrderCreateWithoutConsolidationsInput, PreOrderUncheckedCreateWithoutConsolidationsInput>
    connectOrCreate?: PreOrderCreateOrConnectWithoutConsolidationsInput
    upsert?: PreOrderUpsertWithoutConsolidationsInput
    disconnect?: PreOrderWhereInput | boolean
    delete?: PreOrderWhereInput | boolean
    connect?: PreOrderWhereUniqueInput
    update?: XOR<XOR<PreOrderUpdateToOneWithWhereWithoutConsolidationsInput, PreOrderUpdateWithoutConsolidationsInput>, PreOrderUncheckedUpdateWithoutConsolidationsInput>
  }

  export type OrderItemUpdateManyWithoutConsolidationNestedInput = {
    create?: XOR<OrderItemCreateWithoutConsolidationInput, OrderItemUncheckedCreateWithoutConsolidationInput> | OrderItemCreateWithoutConsolidationInput[] | OrderItemUncheckedCreateWithoutConsolidationInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutConsolidationInput | OrderItemCreateOrConnectWithoutConsolidationInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutConsolidationInput | OrderItemUpsertWithWhereUniqueWithoutConsolidationInput[]
    createMany?: OrderItemCreateManyConsolidationInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutConsolidationInput | OrderItemUpdateWithWhereUniqueWithoutConsolidationInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutConsolidationInput | OrderItemUpdateManyWithWhereWithoutConsolidationInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutConsolidationNestedInput = {
    create?: XOR<OrderItemCreateWithoutConsolidationInput, OrderItemUncheckedCreateWithoutConsolidationInput> | OrderItemCreateWithoutConsolidationInput[] | OrderItemUncheckedCreateWithoutConsolidationInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutConsolidationInput | OrderItemCreateOrConnectWithoutConsolidationInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutConsolidationInput | OrderItemUpsertWithWhereUniqueWithoutConsolidationInput[]
    createMany?: OrderItemCreateManyConsolidationInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutConsolidationInput | OrderItemUpdateWithWhereUniqueWithoutConsolidationInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutConsolidationInput | OrderItemUpdateManyWithWhereWithoutConsolidationInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type MySessionCreateNestedManyWithoutPreorderSessionInput = {
    create?: XOR<MySessionCreateWithoutPreorderSessionInput, MySessionUncheckedCreateWithoutPreorderSessionInput> | MySessionCreateWithoutPreorderSessionInput[] | MySessionUncheckedCreateWithoutPreorderSessionInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutPreorderSessionInput | MySessionCreateOrConnectWithoutPreorderSessionInput[]
    createMany?: MySessionCreateManyPreorderSessionInputEnvelope
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
  }

  export type MySessionUncheckedCreateNestedManyWithoutPreorderSessionInput = {
    create?: XOR<MySessionCreateWithoutPreorderSessionInput, MySessionUncheckedCreateWithoutPreorderSessionInput> | MySessionCreateWithoutPreorderSessionInput[] | MySessionUncheckedCreateWithoutPreorderSessionInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutPreorderSessionInput | MySessionCreateOrConnectWithoutPreorderSessionInput[]
    createMany?: MySessionCreateManyPreorderSessionInputEnvelope
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
  }

  export type MySessionUpdateManyWithoutPreorderSessionNestedInput = {
    create?: XOR<MySessionCreateWithoutPreorderSessionInput, MySessionUncheckedCreateWithoutPreorderSessionInput> | MySessionCreateWithoutPreorderSessionInput[] | MySessionUncheckedCreateWithoutPreorderSessionInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutPreorderSessionInput | MySessionCreateOrConnectWithoutPreorderSessionInput[]
    upsert?: MySessionUpsertWithWhereUniqueWithoutPreorderSessionInput | MySessionUpsertWithWhereUniqueWithoutPreorderSessionInput[]
    createMany?: MySessionCreateManyPreorderSessionInputEnvelope
    set?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    disconnect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    delete?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    update?: MySessionUpdateWithWhereUniqueWithoutPreorderSessionInput | MySessionUpdateWithWhereUniqueWithoutPreorderSessionInput[]
    updateMany?: MySessionUpdateManyWithWhereWithoutPreorderSessionInput | MySessionUpdateManyWithWhereWithoutPreorderSessionInput[]
    deleteMany?: MySessionScalarWhereInput | MySessionScalarWhereInput[]
  }

  export type MySessionUncheckedUpdateManyWithoutPreorderSessionNestedInput = {
    create?: XOR<MySessionCreateWithoutPreorderSessionInput, MySessionUncheckedCreateWithoutPreorderSessionInput> | MySessionCreateWithoutPreorderSessionInput[] | MySessionUncheckedCreateWithoutPreorderSessionInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutPreorderSessionInput | MySessionCreateOrConnectWithoutPreorderSessionInput[]
    upsert?: MySessionUpsertWithWhereUniqueWithoutPreorderSessionInput | MySessionUpsertWithWhereUniqueWithoutPreorderSessionInput[]
    createMany?: MySessionCreateManyPreorderSessionInputEnvelope
    set?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    disconnect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    delete?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    update?: MySessionUpdateWithWhereUniqueWithoutPreorderSessionInput | MySessionUpdateWithWhereUniqueWithoutPreorderSessionInput[]
    updateMany?: MySessionUpdateManyWithWhereWithoutPreorderSessionInput | MySessionUpdateManyWithWhereWithoutPreorderSessionInput[]
    deleteMany?: MySessionScalarWhereInput | MySessionScalarWhereInput[]
  }

  export type BookSaleCreateNestedManyWithoutSessionInput = {
    create?: XOR<BookSaleCreateWithoutSessionInput, BookSaleUncheckedCreateWithoutSessionInput> | BookSaleCreateWithoutSessionInput[] | BookSaleUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: BookSaleCreateOrConnectWithoutSessionInput | BookSaleCreateOrConnectWithoutSessionInput[]
    createMany?: BookSaleCreateManySessionInputEnvelope
    connect?: BookSaleWhereUniqueInput | BookSaleWhereUniqueInput[]
  }

  export type MySessionCreateNestedManyWithoutTableSaleSessionInput = {
    create?: XOR<MySessionCreateWithoutTableSaleSessionInput, MySessionUncheckedCreateWithoutTableSaleSessionInput> | MySessionCreateWithoutTableSaleSessionInput[] | MySessionUncheckedCreateWithoutTableSaleSessionInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutTableSaleSessionInput | MySessionCreateOrConnectWithoutTableSaleSessionInput[]
    createMany?: MySessionCreateManyTableSaleSessionInputEnvelope
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
  }

  export type BookSaleUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<BookSaleCreateWithoutSessionInput, BookSaleUncheckedCreateWithoutSessionInput> | BookSaleCreateWithoutSessionInput[] | BookSaleUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: BookSaleCreateOrConnectWithoutSessionInput | BookSaleCreateOrConnectWithoutSessionInput[]
    createMany?: BookSaleCreateManySessionInputEnvelope
    connect?: BookSaleWhereUniqueInput | BookSaleWhereUniqueInput[]
  }

  export type MySessionUncheckedCreateNestedManyWithoutTableSaleSessionInput = {
    create?: XOR<MySessionCreateWithoutTableSaleSessionInput, MySessionUncheckedCreateWithoutTableSaleSessionInput> | MySessionCreateWithoutTableSaleSessionInput[] | MySessionUncheckedCreateWithoutTableSaleSessionInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutTableSaleSessionInput | MySessionCreateOrConnectWithoutTableSaleSessionInput[]
    createMany?: MySessionCreateManyTableSaleSessionInputEnvelope
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
  }

  export type BookSaleUpdateManyWithoutSessionNestedInput = {
    create?: XOR<BookSaleCreateWithoutSessionInput, BookSaleUncheckedCreateWithoutSessionInput> | BookSaleCreateWithoutSessionInput[] | BookSaleUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: BookSaleCreateOrConnectWithoutSessionInput | BookSaleCreateOrConnectWithoutSessionInput[]
    upsert?: BookSaleUpsertWithWhereUniqueWithoutSessionInput | BookSaleUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: BookSaleCreateManySessionInputEnvelope
    set?: BookSaleWhereUniqueInput | BookSaleWhereUniqueInput[]
    disconnect?: BookSaleWhereUniqueInput | BookSaleWhereUniqueInput[]
    delete?: BookSaleWhereUniqueInput | BookSaleWhereUniqueInput[]
    connect?: BookSaleWhereUniqueInput | BookSaleWhereUniqueInput[]
    update?: BookSaleUpdateWithWhereUniqueWithoutSessionInput | BookSaleUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: BookSaleUpdateManyWithWhereWithoutSessionInput | BookSaleUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: BookSaleScalarWhereInput | BookSaleScalarWhereInput[]
  }

  export type MySessionUpdateManyWithoutTableSaleSessionNestedInput = {
    create?: XOR<MySessionCreateWithoutTableSaleSessionInput, MySessionUncheckedCreateWithoutTableSaleSessionInput> | MySessionCreateWithoutTableSaleSessionInput[] | MySessionUncheckedCreateWithoutTableSaleSessionInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutTableSaleSessionInput | MySessionCreateOrConnectWithoutTableSaleSessionInput[]
    upsert?: MySessionUpsertWithWhereUniqueWithoutTableSaleSessionInput | MySessionUpsertWithWhereUniqueWithoutTableSaleSessionInput[]
    createMany?: MySessionCreateManyTableSaleSessionInputEnvelope
    set?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    disconnect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    delete?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    update?: MySessionUpdateWithWhereUniqueWithoutTableSaleSessionInput | MySessionUpdateWithWhereUniqueWithoutTableSaleSessionInput[]
    updateMany?: MySessionUpdateManyWithWhereWithoutTableSaleSessionInput | MySessionUpdateManyWithWhereWithoutTableSaleSessionInput[]
    deleteMany?: MySessionScalarWhereInput | MySessionScalarWhereInput[]
  }

  export type BookSaleUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<BookSaleCreateWithoutSessionInput, BookSaleUncheckedCreateWithoutSessionInput> | BookSaleCreateWithoutSessionInput[] | BookSaleUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: BookSaleCreateOrConnectWithoutSessionInput | BookSaleCreateOrConnectWithoutSessionInput[]
    upsert?: BookSaleUpsertWithWhereUniqueWithoutSessionInput | BookSaleUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: BookSaleCreateManySessionInputEnvelope
    set?: BookSaleWhereUniqueInput | BookSaleWhereUniqueInput[]
    disconnect?: BookSaleWhereUniqueInput | BookSaleWhereUniqueInput[]
    delete?: BookSaleWhereUniqueInput | BookSaleWhereUniqueInput[]
    connect?: BookSaleWhereUniqueInput | BookSaleWhereUniqueInput[]
    update?: BookSaleUpdateWithWhereUniqueWithoutSessionInput | BookSaleUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: BookSaleUpdateManyWithWhereWithoutSessionInput | BookSaleUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: BookSaleScalarWhereInput | BookSaleScalarWhereInput[]
  }

  export type MySessionUncheckedUpdateManyWithoutTableSaleSessionNestedInput = {
    create?: XOR<MySessionCreateWithoutTableSaleSessionInput, MySessionUncheckedCreateWithoutTableSaleSessionInput> | MySessionCreateWithoutTableSaleSessionInput[] | MySessionUncheckedCreateWithoutTableSaleSessionInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutTableSaleSessionInput | MySessionCreateOrConnectWithoutTableSaleSessionInput[]
    upsert?: MySessionUpsertWithWhereUniqueWithoutTableSaleSessionInput | MySessionUpsertWithWhereUniqueWithoutTableSaleSessionInput[]
    createMany?: MySessionCreateManyTableSaleSessionInputEnvelope
    set?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    disconnect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    delete?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    update?: MySessionUpdateWithWhereUniqueWithoutTableSaleSessionInput | MySessionUpdateWithWhereUniqueWithoutTableSaleSessionInput[]
    updateMany?: MySessionUpdateManyWithWhereWithoutTableSaleSessionInput | MySessionUpdateManyWithWhereWithoutTableSaleSessionInput[]
    deleteMany?: MySessionScalarWhereInput | MySessionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMySessionsInput = {
    create?: XOR<UserCreateWithoutMySessionsInput, UserUncheckedCreateWithoutMySessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMySessionsInput
    connect?: UserWhereUniqueInput
  }

  export type TableSaleSessionCreateNestedOneWithoutMySessionsInput = {
    create?: XOR<TableSaleSessionCreateWithoutMySessionsInput, TableSaleSessionUncheckedCreateWithoutMySessionsInput>
    connectOrCreate?: TableSaleSessionCreateOrConnectWithoutMySessionsInput
    connect?: TableSaleSessionWhereUniqueInput
  }

  export type MiniStoreSessionCreateNestedOneWithoutMySessionsInput = {
    create?: XOR<MiniStoreSessionCreateWithoutMySessionsInput, MiniStoreSessionUncheckedCreateWithoutMySessionsInput>
    connectOrCreate?: MiniStoreSessionCreateOrConnectWithoutMySessionsInput
    connect?: MiniStoreSessionWhereUniqueInput
  }

  export type MainStoreSessionCreateNestedOneWithoutMySessionsInput = {
    create?: XOR<MainStoreSessionCreateWithoutMySessionsInput, MainStoreSessionUncheckedCreateWithoutMySessionsInput>
    connectOrCreate?: MainStoreSessionCreateOrConnectWithoutMySessionsInput
    connect?: MainStoreSessionWhereUniqueInput
  }

  export type PreorderSessionCreateNestedOneWithoutMySessionsInput = {
    create?: XOR<PreorderSessionCreateWithoutMySessionsInput, PreorderSessionUncheckedCreateWithoutMySessionsInput>
    connectOrCreate?: PreorderSessionCreateOrConnectWithoutMySessionsInput
    connect?: PreorderSessionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMySessionsNestedInput = {
    create?: XOR<UserCreateWithoutMySessionsInput, UserUncheckedCreateWithoutMySessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMySessionsInput
    upsert?: UserUpsertWithoutMySessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMySessionsInput, UserUpdateWithoutMySessionsInput>, UserUncheckedUpdateWithoutMySessionsInput>
  }

  export type TableSaleSessionUpdateOneWithoutMySessionsNestedInput = {
    create?: XOR<TableSaleSessionCreateWithoutMySessionsInput, TableSaleSessionUncheckedCreateWithoutMySessionsInput>
    connectOrCreate?: TableSaleSessionCreateOrConnectWithoutMySessionsInput
    upsert?: TableSaleSessionUpsertWithoutMySessionsInput
    disconnect?: TableSaleSessionWhereInput | boolean
    delete?: TableSaleSessionWhereInput | boolean
    connect?: TableSaleSessionWhereUniqueInput
    update?: XOR<XOR<TableSaleSessionUpdateToOneWithWhereWithoutMySessionsInput, TableSaleSessionUpdateWithoutMySessionsInput>, TableSaleSessionUncheckedUpdateWithoutMySessionsInput>
  }

  export type MiniStoreSessionUpdateOneWithoutMySessionsNestedInput = {
    create?: XOR<MiniStoreSessionCreateWithoutMySessionsInput, MiniStoreSessionUncheckedCreateWithoutMySessionsInput>
    connectOrCreate?: MiniStoreSessionCreateOrConnectWithoutMySessionsInput
    upsert?: MiniStoreSessionUpsertWithoutMySessionsInput
    disconnect?: MiniStoreSessionWhereInput | boolean
    delete?: MiniStoreSessionWhereInput | boolean
    connect?: MiniStoreSessionWhereUniqueInput
    update?: XOR<XOR<MiniStoreSessionUpdateToOneWithWhereWithoutMySessionsInput, MiniStoreSessionUpdateWithoutMySessionsInput>, MiniStoreSessionUncheckedUpdateWithoutMySessionsInput>
  }

  export type MainStoreSessionUpdateOneWithoutMySessionsNestedInput = {
    create?: XOR<MainStoreSessionCreateWithoutMySessionsInput, MainStoreSessionUncheckedCreateWithoutMySessionsInput>
    connectOrCreate?: MainStoreSessionCreateOrConnectWithoutMySessionsInput
    upsert?: MainStoreSessionUpsertWithoutMySessionsInput
    disconnect?: MainStoreSessionWhereInput | boolean
    delete?: MainStoreSessionWhereInput | boolean
    connect?: MainStoreSessionWhereUniqueInput
    update?: XOR<XOR<MainStoreSessionUpdateToOneWithWhereWithoutMySessionsInput, MainStoreSessionUpdateWithoutMySessionsInput>, MainStoreSessionUncheckedUpdateWithoutMySessionsInput>
  }

  export type PreorderSessionUpdateOneWithoutMySessionsNestedInput = {
    create?: XOR<PreorderSessionCreateWithoutMySessionsInput, PreorderSessionUncheckedCreateWithoutMySessionsInput>
    connectOrCreate?: PreorderSessionCreateOrConnectWithoutMySessionsInput
    upsert?: PreorderSessionUpsertWithoutMySessionsInput
    disconnect?: PreorderSessionWhereInput | boolean
    delete?: PreorderSessionWhereInput | boolean
    connect?: PreorderSessionWhereUniqueInput
    update?: XOR<XOR<PreorderSessionUpdateToOneWithWhereWithoutMySessionsInput, PreorderSessionUpdateWithoutMySessionsInput>, PreorderSessionUncheckedUpdateWithoutMySessionsInput>
  }

  export type MySessionCreateNestedManyWithoutMiniStoreSessionInput = {
    create?: XOR<MySessionCreateWithoutMiniStoreSessionInput, MySessionUncheckedCreateWithoutMiniStoreSessionInput> | MySessionCreateWithoutMiniStoreSessionInput[] | MySessionUncheckedCreateWithoutMiniStoreSessionInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutMiniStoreSessionInput | MySessionCreateOrConnectWithoutMiniStoreSessionInput[]
    createMany?: MySessionCreateManyMiniStoreSessionInputEnvelope
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
  }

  export type MySessionUncheckedCreateNestedManyWithoutMiniStoreSessionInput = {
    create?: XOR<MySessionCreateWithoutMiniStoreSessionInput, MySessionUncheckedCreateWithoutMiniStoreSessionInput> | MySessionCreateWithoutMiniStoreSessionInput[] | MySessionUncheckedCreateWithoutMiniStoreSessionInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutMiniStoreSessionInput | MySessionCreateOrConnectWithoutMiniStoreSessionInput[]
    createMany?: MySessionCreateManyMiniStoreSessionInputEnvelope
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
  }

  export type MySessionUpdateManyWithoutMiniStoreSessionNestedInput = {
    create?: XOR<MySessionCreateWithoutMiniStoreSessionInput, MySessionUncheckedCreateWithoutMiniStoreSessionInput> | MySessionCreateWithoutMiniStoreSessionInput[] | MySessionUncheckedCreateWithoutMiniStoreSessionInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutMiniStoreSessionInput | MySessionCreateOrConnectWithoutMiniStoreSessionInput[]
    upsert?: MySessionUpsertWithWhereUniqueWithoutMiniStoreSessionInput | MySessionUpsertWithWhereUniqueWithoutMiniStoreSessionInput[]
    createMany?: MySessionCreateManyMiniStoreSessionInputEnvelope
    set?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    disconnect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    delete?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    update?: MySessionUpdateWithWhereUniqueWithoutMiniStoreSessionInput | MySessionUpdateWithWhereUniqueWithoutMiniStoreSessionInput[]
    updateMany?: MySessionUpdateManyWithWhereWithoutMiniStoreSessionInput | MySessionUpdateManyWithWhereWithoutMiniStoreSessionInput[]
    deleteMany?: MySessionScalarWhereInput | MySessionScalarWhereInput[]
  }

  export type MySessionUncheckedUpdateManyWithoutMiniStoreSessionNestedInput = {
    create?: XOR<MySessionCreateWithoutMiniStoreSessionInput, MySessionUncheckedCreateWithoutMiniStoreSessionInput> | MySessionCreateWithoutMiniStoreSessionInput[] | MySessionUncheckedCreateWithoutMiniStoreSessionInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutMiniStoreSessionInput | MySessionCreateOrConnectWithoutMiniStoreSessionInput[]
    upsert?: MySessionUpsertWithWhereUniqueWithoutMiniStoreSessionInput | MySessionUpsertWithWhereUniqueWithoutMiniStoreSessionInput[]
    createMany?: MySessionCreateManyMiniStoreSessionInputEnvelope
    set?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    disconnect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    delete?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    update?: MySessionUpdateWithWhereUniqueWithoutMiniStoreSessionInput | MySessionUpdateWithWhereUniqueWithoutMiniStoreSessionInput[]
    updateMany?: MySessionUpdateManyWithWhereWithoutMiniStoreSessionInput | MySessionUpdateManyWithWhereWithoutMiniStoreSessionInput[]
    deleteMany?: MySessionScalarWhereInput | MySessionScalarWhereInput[]
  }

  export type MySessionCreateNestedManyWithoutMainStoreSessionInput = {
    create?: XOR<MySessionCreateWithoutMainStoreSessionInput, MySessionUncheckedCreateWithoutMainStoreSessionInput> | MySessionCreateWithoutMainStoreSessionInput[] | MySessionUncheckedCreateWithoutMainStoreSessionInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutMainStoreSessionInput | MySessionCreateOrConnectWithoutMainStoreSessionInput[]
    createMany?: MySessionCreateManyMainStoreSessionInputEnvelope
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
  }

  export type MySessionUncheckedCreateNestedManyWithoutMainStoreSessionInput = {
    create?: XOR<MySessionCreateWithoutMainStoreSessionInput, MySessionUncheckedCreateWithoutMainStoreSessionInput> | MySessionCreateWithoutMainStoreSessionInput[] | MySessionUncheckedCreateWithoutMainStoreSessionInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutMainStoreSessionInput | MySessionCreateOrConnectWithoutMainStoreSessionInput[]
    createMany?: MySessionCreateManyMainStoreSessionInputEnvelope
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
  }

  export type MySessionUpdateManyWithoutMainStoreSessionNestedInput = {
    create?: XOR<MySessionCreateWithoutMainStoreSessionInput, MySessionUncheckedCreateWithoutMainStoreSessionInput> | MySessionCreateWithoutMainStoreSessionInput[] | MySessionUncheckedCreateWithoutMainStoreSessionInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutMainStoreSessionInput | MySessionCreateOrConnectWithoutMainStoreSessionInput[]
    upsert?: MySessionUpsertWithWhereUniqueWithoutMainStoreSessionInput | MySessionUpsertWithWhereUniqueWithoutMainStoreSessionInput[]
    createMany?: MySessionCreateManyMainStoreSessionInputEnvelope
    set?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    disconnect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    delete?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    update?: MySessionUpdateWithWhereUniqueWithoutMainStoreSessionInput | MySessionUpdateWithWhereUniqueWithoutMainStoreSessionInput[]
    updateMany?: MySessionUpdateManyWithWhereWithoutMainStoreSessionInput | MySessionUpdateManyWithWhereWithoutMainStoreSessionInput[]
    deleteMany?: MySessionScalarWhereInput | MySessionScalarWhereInput[]
  }

  export type MySessionUncheckedUpdateManyWithoutMainStoreSessionNestedInput = {
    create?: XOR<MySessionCreateWithoutMainStoreSessionInput, MySessionUncheckedCreateWithoutMainStoreSessionInput> | MySessionCreateWithoutMainStoreSessionInput[] | MySessionUncheckedCreateWithoutMainStoreSessionInput[]
    connectOrCreate?: MySessionCreateOrConnectWithoutMainStoreSessionInput | MySessionCreateOrConnectWithoutMainStoreSessionInput[]
    upsert?: MySessionUpsertWithWhereUniqueWithoutMainStoreSessionInput | MySessionUpsertWithWhereUniqueWithoutMainStoreSessionInput[]
    createMany?: MySessionCreateManyMainStoreSessionInputEnvelope
    set?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    disconnect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    delete?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    connect?: MySessionWhereUniqueInput | MySessionWhereUniqueInput[]
    update?: MySessionUpdateWithWhereUniqueWithoutMainStoreSessionInput | MySessionUpdateWithWhereUniqueWithoutMainStoreSessionInput[]
    updateMany?: MySessionUpdateManyWithWhereWithoutMainStoreSessionInput | MySessionUpdateManyWithWhereWithoutMainStoreSessionInput[]
    deleteMany?: MySessionScalarWhereInput | MySessionScalarWhereInput[]
  }

  export type BookSaleItemCreateNestedManyWithoutBookInput = {
    create?: XOR<BookSaleItemCreateWithoutBookInput, BookSaleItemUncheckedCreateWithoutBookInput> | BookSaleItemCreateWithoutBookInput[] | BookSaleItemUncheckedCreateWithoutBookInput[]
    connectOrCreate?: BookSaleItemCreateOrConnectWithoutBookInput | BookSaleItemCreateOrConnectWithoutBookInput[]
    createMany?: BookSaleItemCreateManyBookInputEnvelope
    connect?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
  }

  export type OrderItemCreateNestedManyWithoutBookInput = {
    create?: XOR<OrderItemCreateWithoutBookInput, OrderItemUncheckedCreateWithoutBookInput> | OrderItemCreateWithoutBookInput[] | OrderItemUncheckedCreateWithoutBookInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutBookInput | OrderItemCreateOrConnectWithoutBookInput[]
    createMany?: OrderItemCreateManyBookInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type BookSaleItemUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<BookSaleItemCreateWithoutBookInput, BookSaleItemUncheckedCreateWithoutBookInput> | BookSaleItemCreateWithoutBookInput[] | BookSaleItemUncheckedCreateWithoutBookInput[]
    connectOrCreate?: BookSaleItemCreateOrConnectWithoutBookInput | BookSaleItemCreateOrConnectWithoutBookInput[]
    createMany?: BookSaleItemCreateManyBookInputEnvelope
    connect?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<OrderItemCreateWithoutBookInput, OrderItemUncheckedCreateWithoutBookInput> | OrderItemCreateWithoutBookInput[] | OrderItemUncheckedCreateWithoutBookInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutBookInput | OrderItemCreateOrConnectWithoutBookInput[]
    createMany?: OrderItemCreateManyBookInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type BookSaleItemUpdateManyWithoutBookNestedInput = {
    create?: XOR<BookSaleItemCreateWithoutBookInput, BookSaleItemUncheckedCreateWithoutBookInput> | BookSaleItemCreateWithoutBookInput[] | BookSaleItemUncheckedCreateWithoutBookInput[]
    connectOrCreate?: BookSaleItemCreateOrConnectWithoutBookInput | BookSaleItemCreateOrConnectWithoutBookInput[]
    upsert?: BookSaleItemUpsertWithWhereUniqueWithoutBookInput | BookSaleItemUpsertWithWhereUniqueWithoutBookInput[]
    createMany?: BookSaleItemCreateManyBookInputEnvelope
    set?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
    disconnect?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
    delete?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
    connect?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
    update?: BookSaleItemUpdateWithWhereUniqueWithoutBookInput | BookSaleItemUpdateWithWhereUniqueWithoutBookInput[]
    updateMany?: BookSaleItemUpdateManyWithWhereWithoutBookInput | BookSaleItemUpdateManyWithWhereWithoutBookInput[]
    deleteMany?: BookSaleItemScalarWhereInput | BookSaleItemScalarWhereInput[]
  }

  export type OrderItemUpdateManyWithoutBookNestedInput = {
    create?: XOR<OrderItemCreateWithoutBookInput, OrderItemUncheckedCreateWithoutBookInput> | OrderItemCreateWithoutBookInput[] | OrderItemUncheckedCreateWithoutBookInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutBookInput | OrderItemCreateOrConnectWithoutBookInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutBookInput | OrderItemUpsertWithWhereUniqueWithoutBookInput[]
    createMany?: OrderItemCreateManyBookInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutBookInput | OrderItemUpdateWithWhereUniqueWithoutBookInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutBookInput | OrderItemUpdateManyWithWhereWithoutBookInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type BookSaleItemUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<BookSaleItemCreateWithoutBookInput, BookSaleItemUncheckedCreateWithoutBookInput> | BookSaleItemCreateWithoutBookInput[] | BookSaleItemUncheckedCreateWithoutBookInput[]
    connectOrCreate?: BookSaleItemCreateOrConnectWithoutBookInput | BookSaleItemCreateOrConnectWithoutBookInput[]
    upsert?: BookSaleItemUpsertWithWhereUniqueWithoutBookInput | BookSaleItemUpsertWithWhereUniqueWithoutBookInput[]
    createMany?: BookSaleItemCreateManyBookInputEnvelope
    set?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
    disconnect?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
    delete?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
    connect?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
    update?: BookSaleItemUpdateWithWhereUniqueWithoutBookInput | BookSaleItemUpdateWithWhereUniqueWithoutBookInput[]
    updateMany?: BookSaleItemUpdateManyWithWhereWithoutBookInput | BookSaleItemUpdateManyWithWhereWithoutBookInput[]
    deleteMany?: BookSaleItemScalarWhereInput | BookSaleItemScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<OrderItemCreateWithoutBookInput, OrderItemUncheckedCreateWithoutBookInput> | OrderItemCreateWithoutBookInput[] | OrderItemUncheckedCreateWithoutBookInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutBookInput | OrderItemCreateOrConnectWithoutBookInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutBookInput | OrderItemUpsertWithWhereUniqueWithoutBookInput[]
    createMany?: OrderItemCreateManyBookInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutBookInput | OrderItemUpdateWithWhereUniqueWithoutBookInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutBookInput | OrderItemUpdateManyWithWhereWithoutBookInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type BookSaleItemCreateNestedManyWithoutBookSaleInput = {
    create?: XOR<BookSaleItemCreateWithoutBookSaleInput, BookSaleItemUncheckedCreateWithoutBookSaleInput> | BookSaleItemCreateWithoutBookSaleInput[] | BookSaleItemUncheckedCreateWithoutBookSaleInput[]
    connectOrCreate?: BookSaleItemCreateOrConnectWithoutBookSaleInput | BookSaleItemCreateOrConnectWithoutBookSaleInput[]
    createMany?: BookSaleItemCreateManyBookSaleInputEnvelope
    connect?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
  }

  export type TableSaleSessionCreateNestedOneWithoutBookSalesInput = {
    create?: XOR<TableSaleSessionCreateWithoutBookSalesInput, TableSaleSessionUncheckedCreateWithoutBookSalesInput>
    connectOrCreate?: TableSaleSessionCreateOrConnectWithoutBookSalesInput
    connect?: TableSaleSessionWhereUniqueInput
  }

  export type BookSaleItemUncheckedCreateNestedManyWithoutBookSaleInput = {
    create?: XOR<BookSaleItemCreateWithoutBookSaleInput, BookSaleItemUncheckedCreateWithoutBookSaleInput> | BookSaleItemCreateWithoutBookSaleInput[] | BookSaleItemUncheckedCreateWithoutBookSaleInput[]
    connectOrCreate?: BookSaleItemCreateOrConnectWithoutBookSaleInput | BookSaleItemCreateOrConnectWithoutBookSaleInput[]
    createMany?: BookSaleItemCreateManyBookSaleInputEnvelope
    connect?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
  }

  export type BookSaleItemUpdateManyWithoutBookSaleNestedInput = {
    create?: XOR<BookSaleItemCreateWithoutBookSaleInput, BookSaleItemUncheckedCreateWithoutBookSaleInput> | BookSaleItemCreateWithoutBookSaleInput[] | BookSaleItemUncheckedCreateWithoutBookSaleInput[]
    connectOrCreate?: BookSaleItemCreateOrConnectWithoutBookSaleInput | BookSaleItemCreateOrConnectWithoutBookSaleInput[]
    upsert?: BookSaleItemUpsertWithWhereUniqueWithoutBookSaleInput | BookSaleItemUpsertWithWhereUniqueWithoutBookSaleInput[]
    createMany?: BookSaleItemCreateManyBookSaleInputEnvelope
    set?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
    disconnect?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
    delete?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
    connect?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
    update?: BookSaleItemUpdateWithWhereUniqueWithoutBookSaleInput | BookSaleItemUpdateWithWhereUniqueWithoutBookSaleInput[]
    updateMany?: BookSaleItemUpdateManyWithWhereWithoutBookSaleInput | BookSaleItemUpdateManyWithWhereWithoutBookSaleInput[]
    deleteMany?: BookSaleItemScalarWhereInput | BookSaleItemScalarWhereInput[]
  }

  export type TableSaleSessionUpdateOneRequiredWithoutBookSalesNestedInput = {
    create?: XOR<TableSaleSessionCreateWithoutBookSalesInput, TableSaleSessionUncheckedCreateWithoutBookSalesInput>
    connectOrCreate?: TableSaleSessionCreateOrConnectWithoutBookSalesInput
    upsert?: TableSaleSessionUpsertWithoutBookSalesInput
    connect?: TableSaleSessionWhereUniqueInput
    update?: XOR<XOR<TableSaleSessionUpdateToOneWithWhereWithoutBookSalesInput, TableSaleSessionUpdateWithoutBookSalesInput>, TableSaleSessionUncheckedUpdateWithoutBookSalesInput>
  }

  export type BookSaleItemUncheckedUpdateManyWithoutBookSaleNestedInput = {
    create?: XOR<BookSaleItemCreateWithoutBookSaleInput, BookSaleItemUncheckedCreateWithoutBookSaleInput> | BookSaleItemCreateWithoutBookSaleInput[] | BookSaleItemUncheckedCreateWithoutBookSaleInput[]
    connectOrCreate?: BookSaleItemCreateOrConnectWithoutBookSaleInput | BookSaleItemCreateOrConnectWithoutBookSaleInput[]
    upsert?: BookSaleItemUpsertWithWhereUniqueWithoutBookSaleInput | BookSaleItemUpsertWithWhereUniqueWithoutBookSaleInput[]
    createMany?: BookSaleItemCreateManyBookSaleInputEnvelope
    set?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
    disconnect?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
    delete?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
    connect?: BookSaleItemWhereUniqueInput | BookSaleItemWhereUniqueInput[]
    update?: BookSaleItemUpdateWithWhereUniqueWithoutBookSaleInput | BookSaleItemUpdateWithWhereUniqueWithoutBookSaleInput[]
    updateMany?: BookSaleItemUpdateManyWithWhereWithoutBookSaleInput | BookSaleItemUpdateManyWithWhereWithoutBookSaleInput[]
    deleteMany?: BookSaleItemScalarWhereInput | BookSaleItemScalarWhereInput[]
  }

  export type BookSaleCreateNestedOneWithoutItemsInput = {
    create?: XOR<BookSaleCreateWithoutItemsInput, BookSaleUncheckedCreateWithoutItemsInput>
    connectOrCreate?: BookSaleCreateOrConnectWithoutItemsInput
    connect?: BookSaleWhereUniqueInput
  }

  export type BookCreateNestedOneWithoutSalesInput = {
    create?: XOR<BookCreateWithoutSalesInput, BookUncheckedCreateWithoutSalesInput>
    connectOrCreate?: BookCreateOrConnectWithoutSalesInput
    connect?: BookWhereUniqueInput
  }

  export type BookSaleUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<BookSaleCreateWithoutItemsInput, BookSaleUncheckedCreateWithoutItemsInput>
    connectOrCreate?: BookSaleCreateOrConnectWithoutItemsInput
    upsert?: BookSaleUpsertWithoutItemsInput
    connect?: BookSaleWhereUniqueInput
    update?: XOR<XOR<BookSaleUpdateToOneWithWhereWithoutItemsInput, BookSaleUpdateWithoutItemsInput>, BookSaleUncheckedUpdateWithoutItemsInput>
  }

  export type BookUpdateOneRequiredWithoutSalesNestedInput = {
    create?: XOR<BookCreateWithoutSalesInput, BookUncheckedCreateWithoutSalesInput>
    connectOrCreate?: BookCreateOrConnectWithoutSalesInput
    upsert?: BookUpsertWithoutSalesInput
    connect?: BookWhereUniqueInput
    update?: XOR<XOR<BookUpdateToOneWithWhereWithoutSalesInput, BookUpdateWithoutSalesInput>, BookUncheckedUpdateWithoutSalesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
  }

  export type ConsolidationCreateWithoutUserInput = {
    date: Date | string
    session: string
    createdAt?: Date | string
    updatedAt?: Date | string
    order?: PreOrderCreateNestedOneWithoutConsolidationsInput
    items?: OrderItemCreateNestedManyWithoutConsolidationInput
  }

  export type ConsolidationUncheckedCreateWithoutUserInput = {
    id?: number
    date: Date | string
    session: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: string | null
    items?: OrderItemUncheckedCreateNestedManyWithoutConsolidationInput
  }

  export type ConsolidationCreateOrConnectWithoutUserInput = {
    where: ConsolidationWhereUniqueInput
    create: XOR<ConsolidationCreateWithoutUserInput, ConsolidationUncheckedCreateWithoutUserInput>
  }

  export type ConsolidationCreateManyUserInputEnvelope = {
    data: ConsolidationCreateManyUserInput | ConsolidationCreateManyUserInput[]
  }

  export type MySessionCreateWithoutUserInput = {
    id?: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tableSaleSession?: TableSaleSessionCreateNestedOneWithoutMySessionsInput
    miniStoreSession?: MiniStoreSessionCreateNestedOneWithoutMySessionsInput
    mainStoreSession?: MainStoreSessionCreateNestedOneWithoutMySessionsInput
    preorderSession?: PreorderSessionCreateNestedOneWithoutMySessionsInput
  }

  export type MySessionUncheckedCreateWithoutUserInput = {
    id?: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tableSaleSessionId?: string | null
    miniStoreSessionId?: string | null
    mainStoreSessionId?: string | null
    preorderSessionId?: string | null
  }

  export type MySessionCreateOrConnectWithoutUserInput = {
    where: MySessionWhereUniqueInput
    create: XOR<MySessionCreateWithoutUserInput, MySessionUncheckedCreateWithoutUserInput>
  }

  export type MySessionCreateManyUserInputEnvelope = {
    data: MySessionCreateManyUserInput | MySessionCreateManyUserInput[]
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
  }

  export type ConsolidationUpsertWithWhereUniqueWithoutUserInput = {
    where: ConsolidationWhereUniqueInput
    update: XOR<ConsolidationUpdateWithoutUserInput, ConsolidationUncheckedUpdateWithoutUserInput>
    create: XOR<ConsolidationCreateWithoutUserInput, ConsolidationUncheckedCreateWithoutUserInput>
  }

  export type ConsolidationUpdateWithWhereUniqueWithoutUserInput = {
    where: ConsolidationWhereUniqueInput
    data: XOR<ConsolidationUpdateWithoutUserInput, ConsolidationUncheckedUpdateWithoutUserInput>
  }

  export type ConsolidationUpdateManyWithWhereWithoutUserInput = {
    where: ConsolidationScalarWhereInput
    data: XOR<ConsolidationUpdateManyMutationInput, ConsolidationUncheckedUpdateManyWithoutUserInput>
  }

  export type ConsolidationScalarWhereInput = {
    AND?: ConsolidationScalarWhereInput | ConsolidationScalarWhereInput[]
    OR?: ConsolidationScalarWhereInput[]
    NOT?: ConsolidationScalarWhereInput | ConsolidationScalarWhereInput[]
    id?: IntFilter<"Consolidation"> | number
    date?: DateTimeFilter<"Consolidation"> | Date | string
    session?: StringFilter<"Consolidation"> | string
    userId?: StringFilter<"Consolidation"> | string
    createdAt?: DateTimeFilter<"Consolidation"> | Date | string
    updatedAt?: DateTimeFilter<"Consolidation"> | Date | string
    orderId?: StringNullableFilter<"Consolidation"> | string | null
  }

  export type MySessionUpsertWithWhereUniqueWithoutUserInput = {
    where: MySessionWhereUniqueInput
    update: XOR<MySessionUpdateWithoutUserInput, MySessionUncheckedUpdateWithoutUserInput>
    create: XOR<MySessionCreateWithoutUserInput, MySessionUncheckedCreateWithoutUserInput>
  }

  export type MySessionUpdateWithWhereUniqueWithoutUserInput = {
    where: MySessionWhereUniqueInput
    data: XOR<MySessionUpdateWithoutUserInput, MySessionUncheckedUpdateWithoutUserInput>
  }

  export type MySessionUpdateManyWithWhereWithoutUserInput = {
    where: MySessionScalarWhereInput
    data: XOR<MySessionUpdateManyMutationInput, MySessionUncheckedUpdateManyWithoutUserInput>
  }

  export type MySessionScalarWhereInput = {
    AND?: MySessionScalarWhereInput | MySessionScalarWhereInput[]
    OR?: MySessionScalarWhereInput[]
    NOT?: MySessionScalarWhereInput | MySessionScalarWhereInput[]
    id?: StringFilter<"MySession"> | string
    userId?: StringFilter<"MySession"> | string
    session?: StringFilter<"MySession"> | string
    workspace?: StringFilter<"MySession"> | string
    data?: JsonNullableFilter<"MySession">
    isActive?: BoolFilter<"MySession"> | boolean
    createdAt?: DateTimeFilter<"MySession"> | Date | string
    updatedAt?: DateTimeFilter<"MySession"> | Date | string
    tableSaleSessionId?: StringNullableFilter<"MySession"> | string | null
    miniStoreSessionId?: StringNullableFilter<"MySession"> | string | null
    mainStoreSessionId?: StringNullableFilter<"MySession"> | string | null
    preorderSessionId?: StringNullableFilter<"MySession"> | string | null
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    consolidations?: ConsolidationCreateNestedManyWithoutUserInput
    mySessions?: MySessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    consolidations?: ConsolidationUncheckedCreateNestedManyWithoutUserInput
    mySessions?: MySessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    consolidations?: ConsolidationUpdateManyWithoutUserNestedInput
    mySessions?: MySessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    consolidations?: ConsolidationUncheckedUpdateManyWithoutUserNestedInput
    mySessions?: MySessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    consolidations?: ConsolidationCreateNestedManyWithoutUserInput
    mySessions?: MySessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    consolidations?: ConsolidationUncheckedCreateNestedManyWithoutUserInput
    mySessions?: MySessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    consolidations?: ConsolidationUpdateManyWithoutUserNestedInput
    mySessions?: MySessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    consolidations?: ConsolidationUncheckedUpdateManyWithoutUserNestedInput
    mySessions?: MySessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderItemCreateWithoutOrderInput = {
    id: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    productName: string
    book?: BookCreateNestedOneWithoutPreordersInput
    consolidation?: ConsolidationCreateNestedOneWithoutItemsInput
  }

  export type OrderItemUncheckedCreateWithoutOrderInput = {
    id: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    productName: string
    bookId?: string | null
    consolidationId?: number | null
  }

  export type OrderItemCreateOrConnectWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemCreateManyOrderInputEnvelope = {
    data: OrderItemCreateManyOrderInput | OrderItemCreateManyOrderInput[]
  }

  export type ConsolidationCreateWithoutOrderInput = {
    date: Date | string
    session: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConsolidationsInput
    items?: OrderItemCreateNestedManyWithoutConsolidationInput
  }

  export type ConsolidationUncheckedCreateWithoutOrderInput = {
    id?: number
    date: Date | string
    session: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: OrderItemUncheckedCreateNestedManyWithoutConsolidationInput
  }

  export type ConsolidationCreateOrConnectWithoutOrderInput = {
    where: ConsolidationWhereUniqueInput
    create: XOR<ConsolidationCreateWithoutOrderInput, ConsolidationUncheckedCreateWithoutOrderInput>
  }

  export type ConsolidationCreateManyOrderInputEnvelope = {
    data: ConsolidationCreateManyOrderInput | ConsolidationCreateManyOrderInput[]
  }

  export type OrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderItemScalarWhereInput = {
    AND?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    OR?: OrderItemScalarWhereInput[]
    NOT?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    id?: StringFilter<"OrderItem"> | string
    orderId?: StringFilter<"OrderItem"> | string
    quantity?: IntFilter<"OrderItem"> | number
    price?: FloatFilter<"OrderItem"> | number
    createdAt?: DateTimeFilter<"OrderItem"> | Date | string
    updatedAt?: DateTimeFilter<"OrderItem"> | Date | string
    isCollected?: BoolFilter<"OrderItem"> | boolean
    productName?: StringFilter<"OrderItem"> | string
    bookId?: StringNullableFilter<"OrderItem"> | string | null
    consolidationId?: IntNullableFilter<"OrderItem"> | number | null
  }

  export type ConsolidationUpsertWithWhereUniqueWithoutOrderInput = {
    where: ConsolidationWhereUniqueInput
    update: XOR<ConsolidationUpdateWithoutOrderInput, ConsolidationUncheckedUpdateWithoutOrderInput>
    create: XOR<ConsolidationCreateWithoutOrderInput, ConsolidationUncheckedCreateWithoutOrderInput>
  }

  export type ConsolidationUpdateWithWhereUniqueWithoutOrderInput = {
    where: ConsolidationWhereUniqueInput
    data: XOR<ConsolidationUpdateWithoutOrderInput, ConsolidationUncheckedUpdateWithoutOrderInput>
  }

  export type ConsolidationUpdateManyWithWhereWithoutOrderInput = {
    where: ConsolidationScalarWhereInput
    data: XOR<ConsolidationUpdateManyMutationInput, ConsolidationUncheckedUpdateManyWithoutOrderInput>
  }

  export type PreOrderCreateWithoutItemsInput = {
    id: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    isPartiallyCollected?: boolean
    purchasedAt?: Date | string | null
    shippingZone?: string | null
    orderStatus?: string
    total?: number
    consolidations?: ConsolidationCreateNestedManyWithoutOrderInput
  }

  export type PreOrderUncheckedCreateWithoutItemsInput = {
    id: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    isPartiallyCollected?: boolean
    purchasedAt?: Date | string | null
    shippingZone?: string | null
    orderStatus?: string
    total?: number
    consolidations?: ConsolidationUncheckedCreateNestedManyWithoutOrderInput
  }

  export type PreOrderCreateOrConnectWithoutItemsInput = {
    where: PreOrderWhereUniqueInput
    create: XOR<PreOrderCreateWithoutItemsInput, PreOrderUncheckedCreateWithoutItemsInput>
  }

  export type BookCreateWithoutPreordersInput = {
    id?: string
    title: string
    total: number
    available: number
    preorderTotal: number
    preorderAvailable: number
    salesTotal: number
    salesAvailable: number
    price: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sales?: BookSaleItemCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateWithoutPreordersInput = {
    id?: string
    title: string
    total: number
    available: number
    preorderTotal: number
    preorderAvailable: number
    salesTotal: number
    salesAvailable: number
    price: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sales?: BookSaleItemUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookCreateOrConnectWithoutPreordersInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutPreordersInput, BookUncheckedCreateWithoutPreordersInput>
  }

  export type ConsolidationCreateWithoutItemsInput = {
    date: Date | string
    session: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConsolidationsInput
    order?: PreOrderCreateNestedOneWithoutConsolidationsInput
  }

  export type ConsolidationUncheckedCreateWithoutItemsInput = {
    id?: number
    date: Date | string
    session: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: string | null
  }

  export type ConsolidationCreateOrConnectWithoutItemsInput = {
    where: ConsolidationWhereUniqueInput
    create: XOR<ConsolidationCreateWithoutItemsInput, ConsolidationUncheckedCreateWithoutItemsInput>
  }

  export type PreOrderUpsertWithoutItemsInput = {
    update: XOR<PreOrderUpdateWithoutItemsInput, PreOrderUncheckedUpdateWithoutItemsInput>
    create: XOR<PreOrderCreateWithoutItemsInput, PreOrderUncheckedCreateWithoutItemsInput>
    where?: PreOrderWhereInput
  }

  export type PreOrderUpdateToOneWithWhereWithoutItemsInput = {
    where?: PreOrderWhereInput
    data: XOR<PreOrderUpdateWithoutItemsInput, PreOrderUncheckedUpdateWithoutItemsInput>
  }

  export type PreOrderUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    isPartiallyCollected?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingZone?: NullableStringFieldUpdateOperationsInput | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    consolidations?: ConsolidationUpdateManyWithoutOrderNestedInput
  }

  export type PreOrderUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    isPartiallyCollected?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingZone?: NullableStringFieldUpdateOperationsInput | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    consolidations?: ConsolidationUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type BookUpsertWithoutPreordersInput = {
    update: XOR<BookUpdateWithoutPreordersInput, BookUncheckedUpdateWithoutPreordersInput>
    create: XOR<BookCreateWithoutPreordersInput, BookUncheckedCreateWithoutPreordersInput>
    where?: BookWhereInput
  }

  export type BookUpdateToOneWithWhereWithoutPreordersInput = {
    where?: BookWhereInput
    data: XOR<BookUpdateWithoutPreordersInput, BookUncheckedUpdateWithoutPreordersInput>
  }

  export type BookUpdateWithoutPreordersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    preorderTotal?: IntFieldUpdateOperationsInput | number
    preorderAvailable?: IntFieldUpdateOperationsInput | number
    salesTotal?: IntFieldUpdateOperationsInput | number
    salesAvailable?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sales?: BookSaleItemUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutPreordersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    preorderTotal?: IntFieldUpdateOperationsInput | number
    preorderAvailable?: IntFieldUpdateOperationsInput | number
    salesTotal?: IntFieldUpdateOperationsInput | number
    salesAvailable?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sales?: BookSaleItemUncheckedUpdateManyWithoutBookNestedInput
  }

  export type ConsolidationUpsertWithoutItemsInput = {
    update: XOR<ConsolidationUpdateWithoutItemsInput, ConsolidationUncheckedUpdateWithoutItemsInput>
    create: XOR<ConsolidationCreateWithoutItemsInput, ConsolidationUncheckedCreateWithoutItemsInput>
    where?: ConsolidationWhereInput
  }

  export type ConsolidationUpdateToOneWithWhereWithoutItemsInput = {
    where?: ConsolidationWhereInput
    data: XOR<ConsolidationUpdateWithoutItemsInput, ConsolidationUncheckedUpdateWithoutItemsInput>
  }

  export type ConsolidationUpdateWithoutItemsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConsolidationsNestedInput
    order?: PreOrderUpdateOneWithoutConsolidationsNestedInput
  }

  export type ConsolidationUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateWithoutConsolidationsInput = {
    id?: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    mySessions?: MySessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutConsolidationsInput = {
    id?: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    mySessions?: MySessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutConsolidationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConsolidationsInput, UserUncheckedCreateWithoutConsolidationsInput>
  }

  export type PreOrderCreateWithoutConsolidationsInput = {
    id: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    isPartiallyCollected?: boolean
    purchasedAt?: Date | string | null
    shippingZone?: string | null
    orderStatus?: string
    total?: number
    items?: OrderItemCreateNestedManyWithoutOrderInput
  }

  export type PreOrderUncheckedCreateWithoutConsolidationsInput = {
    id: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    isPartiallyCollected?: boolean
    purchasedAt?: Date | string | null
    shippingZone?: string | null
    orderStatus?: string
    total?: number
    items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type PreOrderCreateOrConnectWithoutConsolidationsInput = {
    where: PreOrderWhereUniqueInput
    create: XOR<PreOrderCreateWithoutConsolidationsInput, PreOrderUncheckedCreateWithoutConsolidationsInput>
  }

  export type OrderItemCreateWithoutConsolidationInput = {
    id: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    productName: string
    order: PreOrderCreateNestedOneWithoutItemsInput
    book?: BookCreateNestedOneWithoutPreordersInput
  }

  export type OrderItemUncheckedCreateWithoutConsolidationInput = {
    id: string
    orderId: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    productName: string
    bookId?: string | null
  }

  export type OrderItemCreateOrConnectWithoutConsolidationInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutConsolidationInput, OrderItemUncheckedCreateWithoutConsolidationInput>
  }

  export type OrderItemCreateManyConsolidationInputEnvelope = {
    data: OrderItemCreateManyConsolidationInput | OrderItemCreateManyConsolidationInput[]
  }

  export type UserUpsertWithoutConsolidationsInput = {
    update: XOR<UserUpdateWithoutConsolidationsInput, UserUncheckedUpdateWithoutConsolidationsInput>
    create: XOR<UserCreateWithoutConsolidationsInput, UserUncheckedCreateWithoutConsolidationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConsolidationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConsolidationsInput, UserUncheckedUpdateWithoutConsolidationsInput>
  }

  export type UserUpdateWithoutConsolidationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    mySessions?: MySessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutConsolidationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    mySessions?: MySessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PreOrderUpsertWithoutConsolidationsInput = {
    update: XOR<PreOrderUpdateWithoutConsolidationsInput, PreOrderUncheckedUpdateWithoutConsolidationsInput>
    create: XOR<PreOrderCreateWithoutConsolidationsInput, PreOrderUncheckedCreateWithoutConsolidationsInput>
    where?: PreOrderWhereInput
  }

  export type PreOrderUpdateToOneWithWhereWithoutConsolidationsInput = {
    where?: PreOrderWhereInput
    data: XOR<PreOrderUpdateWithoutConsolidationsInput, PreOrderUncheckedUpdateWithoutConsolidationsInput>
  }

  export type PreOrderUpdateWithoutConsolidationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    isPartiallyCollected?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingZone?: NullableStringFieldUpdateOperationsInput | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    items?: OrderItemUpdateManyWithoutOrderNestedInput
  }

  export type PreOrderUncheckedUpdateWithoutConsolidationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    isPartiallyCollected?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingZone?: NullableStringFieldUpdateOperationsInput | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderItemUpsertWithWhereUniqueWithoutConsolidationInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutConsolidationInput, OrderItemUncheckedUpdateWithoutConsolidationInput>
    create: XOR<OrderItemCreateWithoutConsolidationInput, OrderItemUncheckedCreateWithoutConsolidationInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutConsolidationInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutConsolidationInput, OrderItemUncheckedUpdateWithoutConsolidationInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutConsolidationInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutConsolidationInput>
  }

  export type MySessionCreateWithoutPreorderSessionInput = {
    id?: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMySessionsInput
    tableSaleSession?: TableSaleSessionCreateNestedOneWithoutMySessionsInput
    miniStoreSession?: MiniStoreSessionCreateNestedOneWithoutMySessionsInput
    mainStoreSession?: MainStoreSessionCreateNestedOneWithoutMySessionsInput
  }

  export type MySessionUncheckedCreateWithoutPreorderSessionInput = {
    id?: string
    userId: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tableSaleSessionId?: string | null
    miniStoreSessionId?: string | null
    mainStoreSessionId?: string | null
  }

  export type MySessionCreateOrConnectWithoutPreorderSessionInput = {
    where: MySessionWhereUniqueInput
    create: XOR<MySessionCreateWithoutPreorderSessionInput, MySessionUncheckedCreateWithoutPreorderSessionInput>
  }

  export type MySessionCreateManyPreorderSessionInputEnvelope = {
    data: MySessionCreateManyPreorderSessionInput | MySessionCreateManyPreorderSessionInput[]
  }

  export type MySessionUpsertWithWhereUniqueWithoutPreorderSessionInput = {
    where: MySessionWhereUniqueInput
    update: XOR<MySessionUpdateWithoutPreorderSessionInput, MySessionUncheckedUpdateWithoutPreorderSessionInput>
    create: XOR<MySessionCreateWithoutPreorderSessionInput, MySessionUncheckedCreateWithoutPreorderSessionInput>
  }

  export type MySessionUpdateWithWhereUniqueWithoutPreorderSessionInput = {
    where: MySessionWhereUniqueInput
    data: XOR<MySessionUpdateWithoutPreorderSessionInput, MySessionUncheckedUpdateWithoutPreorderSessionInput>
  }

  export type MySessionUpdateManyWithWhereWithoutPreorderSessionInput = {
    where: MySessionScalarWhereInput
    data: XOR<MySessionUpdateManyMutationInput, MySessionUncheckedUpdateManyWithoutPreorderSessionInput>
  }

  export type BookSaleCreateWithoutSessionInput = {
    id?: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber?: string | null
    isPaid?: boolean
    purchasedAt?: Date | string | null
    orderStatus?: string
    total?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: BookSaleItemCreateNestedManyWithoutBookSaleInput
  }

  export type BookSaleUncheckedCreateWithoutSessionInput = {
    id?: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber?: string | null
    isPaid?: boolean
    purchasedAt?: Date | string | null
    orderStatus?: string
    total?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: BookSaleItemUncheckedCreateNestedManyWithoutBookSaleInput
  }

  export type BookSaleCreateOrConnectWithoutSessionInput = {
    where: BookSaleWhereUniqueInput
    create: XOR<BookSaleCreateWithoutSessionInput, BookSaleUncheckedCreateWithoutSessionInput>
  }

  export type BookSaleCreateManySessionInputEnvelope = {
    data: BookSaleCreateManySessionInput | BookSaleCreateManySessionInput[]
  }

  export type MySessionCreateWithoutTableSaleSessionInput = {
    id?: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMySessionsInput
    miniStoreSession?: MiniStoreSessionCreateNestedOneWithoutMySessionsInput
    mainStoreSession?: MainStoreSessionCreateNestedOneWithoutMySessionsInput
    preorderSession?: PreorderSessionCreateNestedOneWithoutMySessionsInput
  }

  export type MySessionUncheckedCreateWithoutTableSaleSessionInput = {
    id?: string
    userId: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    miniStoreSessionId?: string | null
    mainStoreSessionId?: string | null
    preorderSessionId?: string | null
  }

  export type MySessionCreateOrConnectWithoutTableSaleSessionInput = {
    where: MySessionWhereUniqueInput
    create: XOR<MySessionCreateWithoutTableSaleSessionInput, MySessionUncheckedCreateWithoutTableSaleSessionInput>
  }

  export type MySessionCreateManyTableSaleSessionInputEnvelope = {
    data: MySessionCreateManyTableSaleSessionInput | MySessionCreateManyTableSaleSessionInput[]
  }

  export type BookSaleUpsertWithWhereUniqueWithoutSessionInput = {
    where: BookSaleWhereUniqueInput
    update: XOR<BookSaleUpdateWithoutSessionInput, BookSaleUncheckedUpdateWithoutSessionInput>
    create: XOR<BookSaleCreateWithoutSessionInput, BookSaleUncheckedCreateWithoutSessionInput>
  }

  export type BookSaleUpdateWithWhereUniqueWithoutSessionInput = {
    where: BookSaleWhereUniqueInput
    data: XOR<BookSaleUpdateWithoutSessionInput, BookSaleUncheckedUpdateWithoutSessionInput>
  }

  export type BookSaleUpdateManyWithWhereWithoutSessionInput = {
    where: BookSaleScalarWhereInput
    data: XOR<BookSaleUpdateManyMutationInput, BookSaleUncheckedUpdateManyWithoutSessionInput>
  }

  export type BookSaleScalarWhereInput = {
    AND?: BookSaleScalarWhereInput | BookSaleScalarWhereInput[]
    OR?: BookSaleScalarWhereInput[]
    NOT?: BookSaleScalarWhereInput | BookSaleScalarWhereInput[]
    id?: StringFilter<"BookSale"> | string
    orderNumber?: StringFilter<"BookSale"> | string
    fullName?: StringFilter<"BookSale"> | string
    email?: StringFilter<"BookSale"> | string
    phoneNumber?: StringNullableFilter<"BookSale"> | string | null
    isPaid?: BoolFilter<"BookSale"> | boolean
    purchasedAt?: DateTimeNullableFilter<"BookSale"> | Date | string | null
    orderStatus?: StringFilter<"BookSale"> | string
    total?: FloatFilter<"BookSale"> | number
    sessionId?: StringFilter<"BookSale"> | string
    createdAt?: DateTimeFilter<"BookSale"> | Date | string
    updatedAt?: DateTimeFilter<"BookSale"> | Date | string
  }

  export type MySessionUpsertWithWhereUniqueWithoutTableSaleSessionInput = {
    where: MySessionWhereUniqueInput
    update: XOR<MySessionUpdateWithoutTableSaleSessionInput, MySessionUncheckedUpdateWithoutTableSaleSessionInput>
    create: XOR<MySessionCreateWithoutTableSaleSessionInput, MySessionUncheckedCreateWithoutTableSaleSessionInput>
  }

  export type MySessionUpdateWithWhereUniqueWithoutTableSaleSessionInput = {
    where: MySessionWhereUniqueInput
    data: XOR<MySessionUpdateWithoutTableSaleSessionInput, MySessionUncheckedUpdateWithoutTableSaleSessionInput>
  }

  export type MySessionUpdateManyWithWhereWithoutTableSaleSessionInput = {
    where: MySessionScalarWhereInput
    data: XOR<MySessionUpdateManyMutationInput, MySessionUncheckedUpdateManyWithoutTableSaleSessionInput>
  }

  export type UserCreateWithoutMySessionsInput = {
    id?: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    consolidations?: ConsolidationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMySessionsInput = {
    id?: string
    email: string
    name?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    consolidations?: ConsolidationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMySessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMySessionsInput, UserUncheckedCreateWithoutMySessionsInput>
  }

  export type TableSaleSessionCreateWithoutMySessionsInput = {
    id?: string
    name: string
    tableId: string
    session: string
    managerId?: string | null
    salesPersonId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    soldData?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    bookSales?: BookSaleCreateNestedManyWithoutSessionInput
  }

  export type TableSaleSessionUncheckedCreateWithoutMySessionsInput = {
    id?: string
    name: string
    tableId: string
    session: string
    managerId?: string | null
    salesPersonId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    soldData?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    bookSales?: BookSaleUncheckedCreateNestedManyWithoutSessionInput
  }

  export type TableSaleSessionCreateOrConnectWithoutMySessionsInput = {
    where: TableSaleSessionWhereUniqueInput
    create: XOR<TableSaleSessionCreateWithoutMySessionsInput, TableSaleSessionUncheckedCreateWithoutMySessionsInput>
  }

  export type MiniStoreSessionCreateWithoutMySessionsInput = {
    id?: string
    session: string
    managerId?: string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MiniStoreSessionUncheckedCreateWithoutMySessionsInput = {
    id?: string
    session: string
    managerId?: string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MiniStoreSessionCreateOrConnectWithoutMySessionsInput = {
    where: MiniStoreSessionWhereUniqueInput
    create: XOR<MiniStoreSessionCreateWithoutMySessionsInput, MiniStoreSessionUncheckedCreateWithoutMySessionsInput>
  }

  export type MainStoreSessionCreateWithoutMySessionsInput = {
    id?: string
    name: string
    session: string
    managerId?: string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MainStoreSessionUncheckedCreateWithoutMySessionsInput = {
    id?: string
    name: string
    session: string
    managerId?: string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MainStoreSessionCreateOrConnectWithoutMySessionsInput = {
    where: MainStoreSessionWhereUniqueInput
    create: XOR<MainStoreSessionCreateWithoutMySessionsInput, MainStoreSessionUncheckedCreateWithoutMySessionsInput>
  }

  export type PreorderSessionCreateWithoutMySessionsInput = {
    id?: string
    session: string
    userId: string
    data: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PreorderSessionUncheckedCreateWithoutMySessionsInput = {
    id?: string
    session: string
    userId: string
    data: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PreorderSessionCreateOrConnectWithoutMySessionsInput = {
    where: PreorderSessionWhereUniqueInput
    create: XOR<PreorderSessionCreateWithoutMySessionsInput, PreorderSessionUncheckedCreateWithoutMySessionsInput>
  }

  export type UserUpsertWithoutMySessionsInput = {
    update: XOR<UserUpdateWithoutMySessionsInput, UserUncheckedUpdateWithoutMySessionsInput>
    create: XOR<UserCreateWithoutMySessionsInput, UserUncheckedCreateWithoutMySessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMySessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMySessionsInput, UserUncheckedUpdateWithoutMySessionsInput>
  }

  export type UserUpdateWithoutMySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    consolidations?: ConsolidationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    consolidations?: ConsolidationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TableSaleSessionUpsertWithoutMySessionsInput = {
    update: XOR<TableSaleSessionUpdateWithoutMySessionsInput, TableSaleSessionUncheckedUpdateWithoutMySessionsInput>
    create: XOR<TableSaleSessionCreateWithoutMySessionsInput, TableSaleSessionUncheckedCreateWithoutMySessionsInput>
    where?: TableSaleSessionWhereInput
  }

  export type TableSaleSessionUpdateToOneWithWhereWithoutMySessionsInput = {
    where?: TableSaleSessionWhereInput
    data: XOR<TableSaleSessionUpdateWithoutMySessionsInput, TableSaleSessionUncheckedUpdateWithoutMySessionsInput>
  }

  export type TableSaleSessionUpdateWithoutMySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tableId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    salesPersonId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    soldData?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookSales?: BookSaleUpdateManyWithoutSessionNestedInput
  }

  export type TableSaleSessionUncheckedUpdateWithoutMySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tableId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    salesPersonId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    soldData?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookSales?: BookSaleUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type MiniStoreSessionUpsertWithoutMySessionsInput = {
    update: XOR<MiniStoreSessionUpdateWithoutMySessionsInput, MiniStoreSessionUncheckedUpdateWithoutMySessionsInput>
    create: XOR<MiniStoreSessionCreateWithoutMySessionsInput, MiniStoreSessionUncheckedCreateWithoutMySessionsInput>
    where?: MiniStoreSessionWhereInput
  }

  export type MiniStoreSessionUpdateToOneWithWhereWithoutMySessionsInput = {
    where?: MiniStoreSessionWhereInput
    data: XOR<MiniStoreSessionUpdateWithoutMySessionsInput, MiniStoreSessionUncheckedUpdateWithoutMySessionsInput>
  }

  export type MiniStoreSessionUpdateWithoutMySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MiniStoreSessionUncheckedUpdateWithoutMySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MainStoreSessionUpsertWithoutMySessionsInput = {
    update: XOR<MainStoreSessionUpdateWithoutMySessionsInput, MainStoreSessionUncheckedUpdateWithoutMySessionsInput>
    create: XOR<MainStoreSessionCreateWithoutMySessionsInput, MainStoreSessionUncheckedCreateWithoutMySessionsInput>
    where?: MainStoreSessionWhereInput
  }

  export type MainStoreSessionUpdateToOneWithWhereWithoutMySessionsInput = {
    where?: MainStoreSessionWhereInput
    data: XOR<MainStoreSessionUpdateWithoutMySessionsInput, MainStoreSessionUncheckedUpdateWithoutMySessionsInput>
  }

  export type MainStoreSessionUpdateWithoutMySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MainStoreSessionUncheckedUpdateWithoutMySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    collectedData?: NullableJsonNullValueInput | InputJsonValue
    distributedData?: NullableJsonNullValueInput | InputJsonValue
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreorderSessionUpsertWithoutMySessionsInput = {
    update: XOR<PreorderSessionUpdateWithoutMySessionsInput, PreorderSessionUncheckedUpdateWithoutMySessionsInput>
    create: XOR<PreorderSessionCreateWithoutMySessionsInput, PreorderSessionUncheckedCreateWithoutMySessionsInput>
    where?: PreorderSessionWhereInput
  }

  export type PreorderSessionUpdateToOneWithWhereWithoutMySessionsInput = {
    where?: PreorderSessionWhereInput
    data: XOR<PreorderSessionUpdateWithoutMySessionsInput, PreorderSessionUncheckedUpdateWithoutMySessionsInput>
  }

  export type PreorderSessionUpdateWithoutMySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreorderSessionUncheckedUpdateWithoutMySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MySessionCreateWithoutMiniStoreSessionInput = {
    id?: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMySessionsInput
    tableSaleSession?: TableSaleSessionCreateNestedOneWithoutMySessionsInput
    mainStoreSession?: MainStoreSessionCreateNestedOneWithoutMySessionsInput
    preorderSession?: PreorderSessionCreateNestedOneWithoutMySessionsInput
  }

  export type MySessionUncheckedCreateWithoutMiniStoreSessionInput = {
    id?: string
    userId: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tableSaleSessionId?: string | null
    mainStoreSessionId?: string | null
    preorderSessionId?: string | null
  }

  export type MySessionCreateOrConnectWithoutMiniStoreSessionInput = {
    where: MySessionWhereUniqueInput
    create: XOR<MySessionCreateWithoutMiniStoreSessionInput, MySessionUncheckedCreateWithoutMiniStoreSessionInput>
  }

  export type MySessionCreateManyMiniStoreSessionInputEnvelope = {
    data: MySessionCreateManyMiniStoreSessionInput | MySessionCreateManyMiniStoreSessionInput[]
  }

  export type MySessionUpsertWithWhereUniqueWithoutMiniStoreSessionInput = {
    where: MySessionWhereUniqueInput
    update: XOR<MySessionUpdateWithoutMiniStoreSessionInput, MySessionUncheckedUpdateWithoutMiniStoreSessionInput>
    create: XOR<MySessionCreateWithoutMiniStoreSessionInput, MySessionUncheckedCreateWithoutMiniStoreSessionInput>
  }

  export type MySessionUpdateWithWhereUniqueWithoutMiniStoreSessionInput = {
    where: MySessionWhereUniqueInput
    data: XOR<MySessionUpdateWithoutMiniStoreSessionInput, MySessionUncheckedUpdateWithoutMiniStoreSessionInput>
  }

  export type MySessionUpdateManyWithWhereWithoutMiniStoreSessionInput = {
    where: MySessionScalarWhereInput
    data: XOR<MySessionUpdateManyMutationInput, MySessionUncheckedUpdateManyWithoutMiniStoreSessionInput>
  }

  export type MySessionCreateWithoutMainStoreSessionInput = {
    id?: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMySessionsInput
    tableSaleSession?: TableSaleSessionCreateNestedOneWithoutMySessionsInput
    miniStoreSession?: MiniStoreSessionCreateNestedOneWithoutMySessionsInput
    preorderSession?: PreorderSessionCreateNestedOneWithoutMySessionsInput
  }

  export type MySessionUncheckedCreateWithoutMainStoreSessionInput = {
    id?: string
    userId: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tableSaleSessionId?: string | null
    miniStoreSessionId?: string | null
    preorderSessionId?: string | null
  }

  export type MySessionCreateOrConnectWithoutMainStoreSessionInput = {
    where: MySessionWhereUniqueInput
    create: XOR<MySessionCreateWithoutMainStoreSessionInput, MySessionUncheckedCreateWithoutMainStoreSessionInput>
  }

  export type MySessionCreateManyMainStoreSessionInputEnvelope = {
    data: MySessionCreateManyMainStoreSessionInput | MySessionCreateManyMainStoreSessionInput[]
  }

  export type MySessionUpsertWithWhereUniqueWithoutMainStoreSessionInput = {
    where: MySessionWhereUniqueInput
    update: XOR<MySessionUpdateWithoutMainStoreSessionInput, MySessionUncheckedUpdateWithoutMainStoreSessionInput>
    create: XOR<MySessionCreateWithoutMainStoreSessionInput, MySessionUncheckedCreateWithoutMainStoreSessionInput>
  }

  export type MySessionUpdateWithWhereUniqueWithoutMainStoreSessionInput = {
    where: MySessionWhereUniqueInput
    data: XOR<MySessionUpdateWithoutMainStoreSessionInput, MySessionUncheckedUpdateWithoutMainStoreSessionInput>
  }

  export type MySessionUpdateManyWithWhereWithoutMainStoreSessionInput = {
    where: MySessionScalarWhereInput
    data: XOR<MySessionUpdateManyMutationInput, MySessionUncheckedUpdateManyWithoutMainStoreSessionInput>
  }

  export type BookSaleItemCreateWithoutBookInput = {
    id?: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    bookSale: BookSaleCreateNestedOneWithoutItemsInput
  }

  export type BookSaleItemUncheckedCreateWithoutBookInput = {
    id?: string
    bookSaleId: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookSaleItemCreateOrConnectWithoutBookInput = {
    where: BookSaleItemWhereUniqueInput
    create: XOR<BookSaleItemCreateWithoutBookInput, BookSaleItemUncheckedCreateWithoutBookInput>
  }

  export type BookSaleItemCreateManyBookInputEnvelope = {
    data: BookSaleItemCreateManyBookInput | BookSaleItemCreateManyBookInput[]
  }

  export type OrderItemCreateWithoutBookInput = {
    id: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    productName: string
    order: PreOrderCreateNestedOneWithoutItemsInput
    consolidation?: ConsolidationCreateNestedOneWithoutItemsInput
  }

  export type OrderItemUncheckedCreateWithoutBookInput = {
    id: string
    orderId: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    productName: string
    consolidationId?: number | null
  }

  export type OrderItemCreateOrConnectWithoutBookInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutBookInput, OrderItemUncheckedCreateWithoutBookInput>
  }

  export type OrderItemCreateManyBookInputEnvelope = {
    data: OrderItemCreateManyBookInput | OrderItemCreateManyBookInput[]
  }

  export type BookSaleItemUpsertWithWhereUniqueWithoutBookInput = {
    where: BookSaleItemWhereUniqueInput
    update: XOR<BookSaleItemUpdateWithoutBookInput, BookSaleItemUncheckedUpdateWithoutBookInput>
    create: XOR<BookSaleItemCreateWithoutBookInput, BookSaleItemUncheckedCreateWithoutBookInput>
  }

  export type BookSaleItemUpdateWithWhereUniqueWithoutBookInput = {
    where: BookSaleItemWhereUniqueInput
    data: XOR<BookSaleItemUpdateWithoutBookInput, BookSaleItemUncheckedUpdateWithoutBookInput>
  }

  export type BookSaleItemUpdateManyWithWhereWithoutBookInput = {
    where: BookSaleItemScalarWhereInput
    data: XOR<BookSaleItemUpdateManyMutationInput, BookSaleItemUncheckedUpdateManyWithoutBookInput>
  }

  export type BookSaleItemScalarWhereInput = {
    AND?: BookSaleItemScalarWhereInput | BookSaleItemScalarWhereInput[]
    OR?: BookSaleItemScalarWhereInput[]
    NOT?: BookSaleItemScalarWhereInput | BookSaleItemScalarWhereInput[]
    id?: StringFilter<"BookSaleItem"> | string
    bookSaleId?: StringFilter<"BookSaleItem"> | string
    bookId?: StringFilter<"BookSaleItem"> | string
    quantity?: IntFilter<"BookSaleItem"> | number
    price?: FloatFilter<"BookSaleItem"> | number
    createdAt?: DateTimeFilter<"BookSaleItem"> | Date | string
    updatedAt?: DateTimeFilter<"BookSaleItem"> | Date | string
  }

  export type OrderItemUpsertWithWhereUniqueWithoutBookInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutBookInput, OrderItemUncheckedUpdateWithoutBookInput>
    create: XOR<OrderItemCreateWithoutBookInput, OrderItemUncheckedCreateWithoutBookInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutBookInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutBookInput, OrderItemUncheckedUpdateWithoutBookInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutBookInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutBookInput>
  }

  export type BookSaleItemCreateWithoutBookSaleInput = {
    id?: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    book: BookCreateNestedOneWithoutSalesInput
  }

  export type BookSaleItemUncheckedCreateWithoutBookSaleInput = {
    id?: string
    bookId: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookSaleItemCreateOrConnectWithoutBookSaleInput = {
    where: BookSaleItemWhereUniqueInput
    create: XOR<BookSaleItemCreateWithoutBookSaleInput, BookSaleItemUncheckedCreateWithoutBookSaleInput>
  }

  export type BookSaleItemCreateManyBookSaleInputEnvelope = {
    data: BookSaleItemCreateManyBookSaleInput | BookSaleItemCreateManyBookSaleInput[]
  }

  export type TableSaleSessionCreateWithoutBookSalesInput = {
    id?: string
    name: string
    tableId: string
    session: string
    managerId?: string | null
    salesPersonId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    soldData?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    mySessions?: MySessionCreateNestedManyWithoutTableSaleSessionInput
  }

  export type TableSaleSessionUncheckedCreateWithoutBookSalesInput = {
    id?: string
    name: string
    tableId: string
    session: string
    managerId?: string | null
    salesPersonId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    soldData?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    mySessions?: MySessionUncheckedCreateNestedManyWithoutTableSaleSessionInput
  }

  export type TableSaleSessionCreateOrConnectWithoutBookSalesInput = {
    where: TableSaleSessionWhereUniqueInput
    create: XOR<TableSaleSessionCreateWithoutBookSalesInput, TableSaleSessionUncheckedCreateWithoutBookSalesInput>
  }

  export type BookSaleItemUpsertWithWhereUniqueWithoutBookSaleInput = {
    where: BookSaleItemWhereUniqueInput
    update: XOR<BookSaleItemUpdateWithoutBookSaleInput, BookSaleItemUncheckedUpdateWithoutBookSaleInput>
    create: XOR<BookSaleItemCreateWithoutBookSaleInput, BookSaleItemUncheckedCreateWithoutBookSaleInput>
  }

  export type BookSaleItemUpdateWithWhereUniqueWithoutBookSaleInput = {
    where: BookSaleItemWhereUniqueInput
    data: XOR<BookSaleItemUpdateWithoutBookSaleInput, BookSaleItemUncheckedUpdateWithoutBookSaleInput>
  }

  export type BookSaleItemUpdateManyWithWhereWithoutBookSaleInput = {
    where: BookSaleItemScalarWhereInput
    data: XOR<BookSaleItemUpdateManyMutationInput, BookSaleItemUncheckedUpdateManyWithoutBookSaleInput>
  }

  export type TableSaleSessionUpsertWithoutBookSalesInput = {
    update: XOR<TableSaleSessionUpdateWithoutBookSalesInput, TableSaleSessionUncheckedUpdateWithoutBookSalesInput>
    create: XOR<TableSaleSessionCreateWithoutBookSalesInput, TableSaleSessionUncheckedCreateWithoutBookSalesInput>
    where?: TableSaleSessionWhereInput
  }

  export type TableSaleSessionUpdateToOneWithWhereWithoutBookSalesInput = {
    where?: TableSaleSessionWhereInput
    data: XOR<TableSaleSessionUpdateWithoutBookSalesInput, TableSaleSessionUncheckedUpdateWithoutBookSalesInput>
  }

  export type TableSaleSessionUpdateWithoutBookSalesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tableId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    salesPersonId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    soldData?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mySessions?: MySessionUpdateManyWithoutTableSaleSessionNestedInput
  }

  export type TableSaleSessionUncheckedUpdateWithoutBookSalesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tableId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    managerId?: NullableStringFieldUpdateOperationsInput | string | null
    salesPersonId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    soldData?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mySessions?: MySessionUncheckedUpdateManyWithoutTableSaleSessionNestedInput
  }

  export type BookSaleCreateWithoutItemsInput = {
    id?: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber?: string | null
    isPaid?: boolean
    purchasedAt?: Date | string | null
    orderStatus?: string
    total?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    session: TableSaleSessionCreateNestedOneWithoutBookSalesInput
  }

  export type BookSaleUncheckedCreateWithoutItemsInput = {
    id?: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber?: string | null
    isPaid?: boolean
    purchasedAt?: Date | string | null
    orderStatus?: string
    total?: number
    sessionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookSaleCreateOrConnectWithoutItemsInput = {
    where: BookSaleWhereUniqueInput
    create: XOR<BookSaleCreateWithoutItemsInput, BookSaleUncheckedCreateWithoutItemsInput>
  }

  export type BookCreateWithoutSalesInput = {
    id?: string
    title: string
    total: number
    available: number
    preorderTotal: number
    preorderAvailable: number
    salesTotal: number
    salesAvailable: number
    price: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    preorders?: OrderItemCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateWithoutSalesInput = {
    id?: string
    title: string
    total: number
    available: number
    preorderTotal: number
    preorderAvailable: number
    salesTotal: number
    salesAvailable: number
    price: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    preorders?: OrderItemUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookCreateOrConnectWithoutSalesInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutSalesInput, BookUncheckedCreateWithoutSalesInput>
  }

  export type BookSaleUpsertWithoutItemsInput = {
    update: XOR<BookSaleUpdateWithoutItemsInput, BookSaleUncheckedUpdateWithoutItemsInput>
    create: XOR<BookSaleCreateWithoutItemsInput, BookSaleUncheckedCreateWithoutItemsInput>
    where?: BookSaleWhereInput
  }

  export type BookSaleUpdateToOneWithWhereWithoutItemsInput = {
    where?: BookSaleWhereInput
    data: XOR<BookSaleUpdateWithoutItemsInput, BookSaleUncheckedUpdateWithoutItemsInput>
  }

  export type BookSaleUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: TableSaleSessionUpdateOneRequiredWithoutBookSalesNestedInput
  }

  export type BookSaleUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookUpsertWithoutSalesInput = {
    update: XOR<BookUpdateWithoutSalesInput, BookUncheckedUpdateWithoutSalesInput>
    create: XOR<BookCreateWithoutSalesInput, BookUncheckedCreateWithoutSalesInput>
    where?: BookWhereInput
  }

  export type BookUpdateToOneWithWhereWithoutSalesInput = {
    where?: BookWhereInput
    data: XOR<BookUpdateWithoutSalesInput, BookUncheckedUpdateWithoutSalesInput>
  }

  export type BookUpdateWithoutSalesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    preorderTotal?: IntFieldUpdateOperationsInput | number
    preorderAvailable?: IntFieldUpdateOperationsInput | number
    salesTotal?: IntFieldUpdateOperationsInput | number
    salesAvailable?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preorders?: OrderItemUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutSalesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    available?: IntFieldUpdateOperationsInput | number
    preorderTotal?: IntFieldUpdateOperationsInput | number
    preorderAvailable?: IntFieldUpdateOperationsInput | number
    salesTotal?: IntFieldUpdateOperationsInput | number
    salesAvailable?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preorders?: OrderItemUncheckedUpdateManyWithoutBookNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsolidationCreateManyUserInput = {
    id?: number
    date: Date | string
    session: string
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: string | null
  }

  export type MySessionCreateManyUserInput = {
    id?: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tableSaleSessionId?: string | null
    miniStoreSessionId?: string | null
    mainStoreSessionId?: string | null
    preorderSessionId?: string | null
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsolidationUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: PreOrderUpdateOneWithoutConsolidationsNestedInput
    items?: OrderItemUpdateManyWithoutConsolidationNestedInput
  }

  export type ConsolidationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    items?: OrderItemUncheckedUpdateManyWithoutConsolidationNestedInput
  }

  export type ConsolidationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MySessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tableSaleSession?: TableSaleSessionUpdateOneWithoutMySessionsNestedInput
    miniStoreSession?: MiniStoreSessionUpdateOneWithoutMySessionsNestedInput
    mainStoreSession?: MainStoreSessionUpdateOneWithoutMySessionsNestedInput
    preorderSession?: PreorderSessionUpdateOneWithoutMySessionsNestedInput
  }

  export type MySessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tableSaleSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    miniStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    mainStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    preorderSessionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MySessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tableSaleSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    miniStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    mainStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    preorderSessionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemCreateManyOrderInput = {
    id: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    productName: string
    bookId?: string | null
    consolidationId?: number | null
  }

  export type ConsolidationCreateManyOrderInput = {
    id?: number
    date: Date | string
    session: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderItemUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    productName?: StringFieldUpdateOperationsInput | string
    book?: BookUpdateOneWithoutPreordersNestedInput
    consolidation?: ConsolidationUpdateOneWithoutItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    productName?: StringFieldUpdateOperationsInput | string
    bookId?: NullableStringFieldUpdateOperationsInput | string | null
    consolidationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    productName?: StringFieldUpdateOperationsInput | string
    bookId?: NullableStringFieldUpdateOperationsInput | string | null
    consolidationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ConsolidationUpdateWithoutOrderInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConsolidationsNestedInput
    items?: OrderItemUpdateManyWithoutConsolidationNestedInput
  }

  export type ConsolidationUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: OrderItemUncheckedUpdateManyWithoutConsolidationNestedInput
  }

  export type ConsolidationUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateManyConsolidationInput = {
    id: string
    orderId: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    productName: string
    bookId?: string | null
  }

  export type OrderItemUpdateWithoutConsolidationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    productName?: StringFieldUpdateOperationsInput | string
    order?: PreOrderUpdateOneRequiredWithoutItemsNestedInput
    book?: BookUpdateOneWithoutPreordersNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutConsolidationInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    productName?: StringFieldUpdateOperationsInput | string
    bookId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemUncheckedUpdateManyWithoutConsolidationInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    productName?: StringFieldUpdateOperationsInput | string
    bookId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MySessionCreateManyPreorderSessionInput = {
    id?: string
    userId: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tableSaleSessionId?: string | null
    miniStoreSessionId?: string | null
    mainStoreSessionId?: string | null
  }

  export type MySessionUpdateWithoutPreorderSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMySessionsNestedInput
    tableSaleSession?: TableSaleSessionUpdateOneWithoutMySessionsNestedInput
    miniStoreSession?: MiniStoreSessionUpdateOneWithoutMySessionsNestedInput
    mainStoreSession?: MainStoreSessionUpdateOneWithoutMySessionsNestedInput
  }

  export type MySessionUncheckedUpdateWithoutPreorderSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tableSaleSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    miniStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    mainStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MySessionUncheckedUpdateManyWithoutPreorderSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tableSaleSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    miniStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    mainStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BookSaleCreateManySessionInput = {
    id?: string
    orderNumber: string
    fullName: string
    email: string
    phoneNumber?: string | null
    isPaid?: boolean
    purchasedAt?: Date | string | null
    orderStatus?: string
    total?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MySessionCreateManyTableSaleSessionInput = {
    id?: string
    userId: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    miniStoreSessionId?: string | null
    mainStoreSessionId?: string | null
    preorderSessionId?: string | null
  }

  export type BookSaleUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: BookSaleItemUpdateManyWithoutBookSaleNestedInput
  }

  export type BookSaleUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: BookSaleItemUncheckedUpdateManyWithoutBookSaleNestedInput
  }

  export type BookSaleUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    purchasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orderStatus?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MySessionUpdateWithoutTableSaleSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMySessionsNestedInput
    miniStoreSession?: MiniStoreSessionUpdateOneWithoutMySessionsNestedInput
    mainStoreSession?: MainStoreSessionUpdateOneWithoutMySessionsNestedInput
    preorderSession?: PreorderSessionUpdateOneWithoutMySessionsNestedInput
  }

  export type MySessionUncheckedUpdateWithoutTableSaleSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    miniStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    mainStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    preorderSessionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MySessionUncheckedUpdateManyWithoutTableSaleSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    miniStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    mainStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    preorderSessionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MySessionCreateManyMiniStoreSessionInput = {
    id?: string
    userId: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tableSaleSessionId?: string | null
    mainStoreSessionId?: string | null
    preorderSessionId?: string | null
  }

  export type MySessionUpdateWithoutMiniStoreSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMySessionsNestedInput
    tableSaleSession?: TableSaleSessionUpdateOneWithoutMySessionsNestedInput
    mainStoreSession?: MainStoreSessionUpdateOneWithoutMySessionsNestedInput
    preorderSession?: PreorderSessionUpdateOneWithoutMySessionsNestedInput
  }

  export type MySessionUncheckedUpdateWithoutMiniStoreSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tableSaleSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    mainStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    preorderSessionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MySessionUncheckedUpdateManyWithoutMiniStoreSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tableSaleSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    mainStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    preorderSessionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MySessionCreateManyMainStoreSessionInput = {
    id?: string
    userId: string
    session: string
    workspace: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tableSaleSessionId?: string | null
    miniStoreSessionId?: string | null
    preorderSessionId?: string | null
  }

  export type MySessionUpdateWithoutMainStoreSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMySessionsNestedInput
    tableSaleSession?: TableSaleSessionUpdateOneWithoutMySessionsNestedInput
    miniStoreSession?: MiniStoreSessionUpdateOneWithoutMySessionsNestedInput
    preorderSession?: PreorderSessionUpdateOneWithoutMySessionsNestedInput
  }

  export type MySessionUncheckedUpdateWithoutMainStoreSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tableSaleSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    miniStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    preorderSessionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MySessionUncheckedUpdateManyWithoutMainStoreSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    workspace?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tableSaleSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    miniStoreSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    preorderSessionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BookSaleItemCreateManyBookInput = {
    id?: string
    bookSaleId: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderItemCreateManyBookInput = {
    id: string
    orderId: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isCollected?: boolean
    productName: string
    consolidationId?: number | null
  }

  export type BookSaleItemUpdateWithoutBookInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookSale?: BookSaleUpdateOneRequiredWithoutItemsNestedInput
  }

  export type BookSaleItemUncheckedUpdateWithoutBookInput = {
    id?: StringFieldUpdateOperationsInput | string
    bookSaleId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookSaleItemUncheckedUpdateManyWithoutBookInput = {
    id?: StringFieldUpdateOperationsInput | string
    bookSaleId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemUpdateWithoutBookInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    productName?: StringFieldUpdateOperationsInput | string
    order?: PreOrderUpdateOneRequiredWithoutItemsNestedInput
    consolidation?: ConsolidationUpdateOneWithoutItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutBookInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    productName?: StringFieldUpdateOperationsInput | string
    consolidationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderItemUncheckedUpdateManyWithoutBookInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCollected?: BoolFieldUpdateOperationsInput | boolean
    productName?: StringFieldUpdateOperationsInput | string
    consolidationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookSaleItemCreateManyBookSaleInput = {
    id?: string
    bookId: string
    quantity: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookSaleItemUpdateWithoutBookSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    book?: BookUpdateOneRequiredWithoutSalesNestedInput
  }

  export type BookSaleItemUncheckedUpdateWithoutBookSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    bookId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookSaleItemUncheckedUpdateManyWithoutBookSaleInput = {
    id?: StringFieldUpdateOperationsInput | string
    bookId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}